const fetch = require('node-fetch');

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

// H√†m t·∫°o format JSON ho√†n ch·ªânh cho Veo3
async function generateVeo3Format(detailedAnalysis, videoInfo) {
    try {
        console.log(`üé¨ [generateVeo3Format] T·∫°o format JSON cho ${detailedAnalysis.length} gi√¢y`);
        
        const systemPrompt = `B·∫°n l√† chuy√™n gia t·∫°o format JSON cho Veo3 API.
        
        Nhi·ªám v·ª•: T·∫°o JSON format ho√†n ch·ªânh cho Veo3 API d·ª±a tr√™n ph√¢n t√≠ch chi ti·∫øt t·ª´ng gi√¢y.
        
        Veo3 API format:
        {
            "clientContext": {
                "projectId": "ccd41cba-0a8f-4777-8ddb-56feee829abd",
                "tool": "PINHOLE",
                "userPaygateTier": "PAYGATE_TIER_TWO"
            },
            "requests": [
                {
                    "aspectRatio": "VIDEO_ASPECT_RATIO_LANDSCAPE",
                    "seed": random_number,
                    "textInput": {
                        "prompt": "detailed prompt for Veo3"
                    },
                    "videoModelKey": "veo_3_1_t2v_fast_ultra",
                    "metadata": {
                        "sceneId": "unique-uuid"
                    }
                }
            ]
        }
        
        Y√™u c·∫ßu:
        1. T·∫°o 1 request cho m·ªói gi√¢y (8 requests cho 8 gi√¢y)
        2. M·ªói prompt ph·∫£i chi ti·∫øt v√† ph√π h·ª£p v·ªõi ph√¢n t√≠ch
        3. Seed ph·∫£i kh√°c nhau cho m·ªói request
        4. SceneId ph·∫£i unique cho m·ªói request
        5. Prompt ph·∫£i t·∫°o video 8 gi√¢y th√∫ v·ªã v√† li·ªÅn m·∫°ch
        
        Tr·∫£ v·ªÅ JSON format ch√≠nh x√°c nh∆∞ tr√™n.`;

        const userPrompt = `T·∫°o format JSON cho Veo3 API d·ª±a tr√™n ph√¢n t√≠ch chi ti·∫øt:

VIDEO INFO:
- Duration: ${videoInfo.duration}s
- Resolution: ${videoInfo.width}x${videoInfo.height}
- FPS: ${videoInfo.fps}

DETAILED ANALYSIS (${detailedAnalysis.length} gi√¢y):
${detailedAnalysis.map((item, index) => {
    const analysis = item.analysis;
    return `Gi√¢y ${analysis.second}: ${analysis.description}
- Mood: ${analysis.mood}
- Camera: ${analysis.camera_movement}
- Lighting: ${analysis.lighting}
- Colors: ${analysis.colors.join(', ')}
- Composition: ${analysis.composition}
- Veo3 prompt: ${analysis.veo3_prompt}
- Continuity: ${analysis.continuity}`;
}).join('\n\n')}

T·∫°o JSON format ho√†n ch·ªânh cho Veo3 API v·ªõi 8 requests (m·ªói gi√¢y 1 request).`;

        // G·ªçi ChatGPT API
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: "gpt-4o",
                messages: [
                    {
                        role: "system",
                        content: systemPrompt
                    },
                    {
                        role: "user",
                        content: userPrompt
                    }
                ],
                max_tokens: 4000,
                temperature: 0.7
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`ChatGPT API error: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        const formatText = data.choices[0].message.content;
        
        console.log(`‚úÖ [generateVeo3Format] ChatGPT t·∫°o format th√†nh c√¥ng`);
        
        // Parse JSON response
        try {
            const jsonMatch = formatText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const veo3Format = JSON.parse(jsonMatch[0]);
                return {
                    success: true,
                    veo3Format,
                    rawResponse: formatText
                };
            } else {
                throw new Error('No JSON found in response');
            }
        } catch (parseError) {
            console.warn('‚ö†Ô∏è [generateVeo3Format] Kh√¥ng th·ªÉ parse JSON, t·∫°o mock format');
            
            // T·∫°o mock format
            const mockFormat = {
                clientContext: {
                    projectId: "ccd41cba-0a8f-4777-8ddb-56feee829abd",
                    tool: "PINHOLE",
                    userPaygateTier: "PAYGATE_TIER_TWO"
                },
                requests: detailedAnalysis.map((item, index) => {
                    const analysis = item.analysis;
                    return {
                        aspectRatio: "VIDEO_ASPECT_RATIO_LANDSCAPE",
                        seed: Math.floor(Math.random() * 100000),
                        textInput: {
                            prompt: analysis.veo3_prompt
                        },
                        videoModelKey: "veo_3_1_t2v_fast_ultra",
                        metadata: {
                            sceneId: `scene-${analysis.second}-${Date.now()}-${index}`
                        }
                    };
                })
            };
            
            return {
                success: true,
                veo3Format: mockFormat,
                rawResponse: formatText
            };
        }

    } catch (error) {
        console.error('‚ùå [generateVeo3Format] L·ªói:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// API endpoint
async function generateVeo3FormatAPI(req, res) {
    try {
        const { detailedAnalysis, videoInfo } = req.body;
        
        if (!detailedAnalysis || !videoInfo) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu detailedAnalysis ho·∫∑c videoInfo'
            });
        }
        
        console.log(`üé¨ [generateVeo3FormatAPI] T·∫°o format JSON cho ${detailedAnalysis.length} gi√¢y`);
        
        const result = await generateVeo3Format(detailedAnalysis, videoInfo);
        
        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ t·∫°o format JSON',
                error: result.error
            });
        }
        
        return res.json({
            success: true,
            message: `ƒê√£ t·∫°o format JSON cho ${detailedAnalysis.length} gi√¢y`,
            veo3Format: result.veo3Format,
            rawResponse: result.rawResponse
        });
        
    } catch (error) {
        console.error('‚ùå [generateVeo3FormatAPI] L·ªói:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói t·∫°o format JSON',
            error: error.message
        });
    }
}

module.exports = {
    generateVeo3Format,
    generateVeo3FormatAPI
};
