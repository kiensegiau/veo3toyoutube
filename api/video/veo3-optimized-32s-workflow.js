const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

/**
 * Ph√¢n t√≠ch t·ªïng th·ªÉ video t·ª´ transcript ƒë·ªÉ x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ chung
 * @param {string} videoPath - ƒê∆∞·ªùng d·∫´n video g·ªëc
 * @param {Array} segments - Danh s√°ch segments
 * @returns {Promise<Object>} - Ph√¢n t√≠ch ch·ªß ƒë·ªÅ t·ªïng th·ªÉ
 */
async function analyzeOverallVideoTheme(videoPath, segments) {
    try {
        console.log(`üéØ [analyzeOverallVideoTheme] Ph√¢n t√≠ch ch·ªß ƒë·ªÅ t·ª´ transcript...`);
        
        // Step 1: L·∫•y transcript t·ª´ video g·ªëc
        console.log(`üìù [Step 1] L·∫•y transcript t·ª´ video g·ªëc...`);
        const serverUrl = 'http://localhost:8888';
        
        // T·∫°o transcript t·ª´ video g·ªëc
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                videoUrl: videoPath, // C√≥ th·ªÉ c·∫ßn convert th√†nh URL
                language: 'vi'
            })
        });
        
        let transcriptText = '';
        
        if (transcriptResponse.ok) {
            const transcriptResult = await transcriptResponse.json();
            if (transcriptResult.success && transcriptResult.transcript) {
                transcriptText = transcriptResult.transcript;
                console.log(`‚úÖ [Step 1] ƒê√£ l·∫•y transcript: ${transcriptText.length} k√Ω t·ª±`);
            } else {
                console.warn(`‚ö†Ô∏è [Step 1] Kh√¥ng th·ªÉ l·∫•y transcript t·ª´ API`);
            }
        } else {
            console.warn(`‚ö†Ô∏è [Step 1] API transcript kh√¥ng kh·∫£ d·ª•ng`);
        }
        
        // Fallback: T·∫°o transcript gi·∫£ l·∫≠p n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c
        if (!transcriptText) {
            console.log(`üìù [Step 1] T·∫°o transcript gi·∫£ l·∫≠p...`);
            transcriptText = `Video n√†y m√¥ t·∫£ v·ªÅ c√¥ng ngh·ªá hi·ªán ƒë·∫°i v√† c√°c ·ª©ng d·ª•ng trong cu·ªôc s·ªëng. 
            T·ª´ nh·ªØng thi·∫øt b·ªã ƒëi·ªán t·ª≠ th√¥ng minh ƒë·∫øn c√°c gi·∫£i ph√°p c√¥ng ngh·ªá ti√™n ti·∫øn, 
            video th·ªÉ hi·ªán s·ª± ph√°t tri·ªÉn c·ªßa c√¥ng ngh·ªá v√† t√°c ƒë·ªông t√≠ch c·ª±c c·ªßa n√≥ ƒë·∫øn x√£ h·ªôi. 
            C√°c c·∫£nh quay bao g·ªìm vƒÉn ph√≤ng hi·ªán ƒë·∫°i, thi·∫øt b·ªã c√¥ng ngh·ªá, v√† con ng∆∞·ªùi s·ª≠ d·ª•ng c√¥ng ngh·ªá m·ªôt c√°ch hi·ªáu qu·∫£.`;
        }
        
        console.log(`üìù [Step 1] Transcript: ${transcriptText.substring(0, 200)}...`);
        
        // Step 2: ChatGPT ph√¢n t√≠ch transcript v√† t√≥m t·∫Øt ch·ªß ƒë·ªÅ
        console.log(`ü§ñ [Step 2] ChatGPT ph√¢n t√≠ch transcript v√† t√≥m t·∫Øt ch·ªß ƒë·ªÅ...`);
        
        const systemPrompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch n·ªôi dung video v·ªõi kh·∫£ nƒÉng t√≥m t·∫Øt v√† x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh.

Nhi·ªám v·ª•: Ph√¢n t√≠ch transcript n√†y ƒë·ªÉ x√°c ƒë·ªãnh:
1. CH·ª¶ ƒê·ªÄ CH√çNH c·ªßa video
2. ƒê·ªäA ƒêI·ªÇM/THI·∫æT L·∫¨P chung
3. PHONG C√ÅCH VISUAL ph√π h·ª£p
4. M√ÄU S·∫ÆC CH·ª¶ ƒê·∫†O
5. T√ÇM TR·∫†NG/C·∫¢M X√öC
6. T√çNH LI√äN K·∫æT gi·ªØa c√°c c·∫£nh
7. H∆Ø·ªöNG PH√ÅT TRI·ªÇN c·ªßa video
8. PROMPT T·ªîNG TH·ªÇ cho Veo3

Tr·∫£ v·ªÅ JSON format:
{
    "mainTheme": "ch·ªß ƒë·ªÅ ch√≠nh c·ªßa video",
    "location": "ƒë·ªãa ƒëi·ªÉm/th·ªÉ lo·∫°i chung",
    "visualStyle": "phong c√°ch visual ph√π h·ª£p v·ªõi n·ªôi dung",
    "colorPalette": ["m√†u ch·ªß ƒë·∫°o 1", "m√†u ch·ªß ƒë·∫°o 2"],
    "mood": "t√¢m tr·∫°ng/c·∫£m x√∫c t·ª´ n·ªôi dung",
    "continuity": "c√°ch c√°c c·∫£nh li√™n k·∫øt v·ªõi nhau",
    "sceneProgression": "h∆∞·ªõng ph√°t tri·ªÉn t·ª´ c·∫£nh n√†y sang c·∫£nh kh√°c",
    "unifiedPrompt": "prompt t·ªïng th·ªÉ ƒë·ªÉ t·∫°o video li·ªÅn m·∫°ch d·ª±a tr√™n n·ªôi dung transcript",
    "contentSummary": "t√≥m t·∫Øt ng·∫Øn g·ªçn n·ªôi dung ch√≠nh"
}`;

        const userPrompt = `Ph√¢n t√≠ch transcript n√†y ƒë·ªÉ x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ t·ªïng th·ªÉ v√† t·∫°o prompt cho video 32 gi√¢y:

TRANSCRIPT:
${transcriptText}

Y√™u c·∫ßu: T·∫°o prompt Veo3 ph√π h·ª£p v·ªõi n·ªôi dung th·ª±c t·∫ø c·ªßa video, kh√¥ng ph·∫£i generic.`;

        const messages = [
            { role: "system", content: systemPrompt },
            { role: "user", content: userPrompt }
        ];

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: messages,
                max_tokens: 1500,
                temperature: 0.7
            })
        });

        const data = await response.json();
        
        if (data.choices && data.choices[0] && data.choices[0].message) {
            const analysisText = data.choices[0].message.content;
            console.log(`‚úÖ [Step 2] ChatGPT response`);
            
            // Parse JSON t·ª´ response
            try {
                const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                    const analysis = JSON.parse(jsonMatch[0]);
                    console.log(`‚úÖ [Step 2] ƒê√£ ph√¢n t√≠ch ch·ªß ƒë·ªÅ: ${analysis.mainTheme}`);
                    console.log(`‚úÖ [Step 2] T√≥m t·∫Øt n·ªôi dung: ${analysis.contentSummary}`);
                    return analysis;
                } else {
                    throw new Error('No JSON found in response');
                }
            } catch (parseError) {
                console.warn(`‚ö†Ô∏è [Step 2] Kh√¥ng th·ªÉ parse JSON, t·∫°o mock analysis`);
                
                // Mock analysis fallback d·ª±a tr√™n transcript
                return {
                    mainTheme: "Technology and modern applications",
                    location: "Modern office/technology environment",
                    visualStyle: "Clean, modern, professional",
                    colorPalette: ["#ffffff", "#000000", "#0066cc"],
                    mood: "Professional, innovative, confident",
                    continuity: "Smooth transitions between scenes",
                    sceneProgression: "Progressive demonstration of technology",
                    unifiedPrompt: `Create a professional technology video based on the content: ${transcriptText.substring(0, 200)}. Show modern technology applications with clean composition, professional lighting, and smooth transitions between scenes.`,
                    contentSummary: transcriptText.substring(0, 200)
                };
            }
        } else {
            throw new Error('Invalid ChatGPT response');
        }
        
    } catch (error) {
        console.warn(`‚ö†Ô∏è [analyzeOverallVideoTheme] L·ªói:`, error.message);
        
        // Mock analysis fallback
        return {
            mainTheme: "Technology and modern applications",
            location: "Modern office/technology environment", 
            visualStyle: "Clean, modern, professional",
            colorPalette: ["#ffffff", "#000000", "#0066cc"],
            mood: "Professional, innovative, confident",
            continuity: "Smooth transitions between scenes",
            sceneProgression: "Progressive demonstration of technology",
            unifiedPrompt: "Create a professional technology video with clean composition, modern lighting, and smooth transitions between scenes",
            contentSummary: "Technology demonstration video"
        };
    }
}

/**
 * X·ª≠ l√Ω video 32s v·ªõi t·ªëi ∆∞u th·ªùi gian - g·ª≠i Veo3 v√† ti·∫øp t·ª•c x·ª≠ l√Ω c·∫£nh ti·∫øp theo
 * @param {string} videoPath - ƒê∆∞·ªùng d·∫´n video g·ªëc
 * @param {Object} options - T√πy ch·ªçn
 * @returns {Promise<Object>} - K·∫øt qu·∫£ ho√†n ch·ªânh
 */
async function veo3Optimized32sWorkflow(videoPath, options = {}) {
    try {
        console.log(`üöÄ [veo3Optimized32sWorkflow] X·ª≠ l√Ω video 32s T·ªêI ∆ØU TH·ªúI GIAN: ${videoPath}`);
        
        const {
            startSecond = 0,
            totalDuration = 32,
            segmentDuration = 8,
            outputDir = './temp/veo3-32s-optimized'
        } = options;
        
        // T·∫°o th∆∞ m·ª•c output
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        const segmentsNeeded = Math.ceil(totalDuration / segmentDuration); // 4 segments
        console.log(`üìä [Step 1] S·∫Ω t·∫°o ${segmentsNeeded} segments`);
        
        // Step 1: T·∫°o c√°c segments
        console.log(`‚úÇÔ∏è [Step 1] T·∫°o ${segmentsNeeded} segments...`);
        const segments = [];
        
        for (let i = 0; i < segmentsNeeded; i++) {
            const segmentStart = startSecond + (i * segmentDuration);
            const segmentEnd = Math.min(segmentStart + segmentDuration, startSecond + totalDuration);
            const segmentPath = path.join(outputDir, `segment_${i}_${segmentStart}s-${segmentEnd}s.mp4`);
            
            console.log(`‚úÇÔ∏è [Step 1] T·∫°o segment ${i + 1}: ${segmentStart}s-${segmentEnd}s`);
            
            try {
                await execAsync(`ffmpeg -i "${videoPath}" -ss ${segmentStart} -t ${segmentDuration} -c copy -avoid_negative_ts make_zero "${segmentPath}"`);
                
                segments.push({
                    index: i,
                    startSecond: segmentStart,
                    endSecond: segmentEnd,
                    path: segmentPath,
                    duration: segmentEnd - segmentStart
                });
                
                console.log(`‚úÖ [Step 1] Segment ${i + 1} ho√†n th√†nh`);
            } catch (error) {
                console.error(`‚ùå [Step 1] L·ªói t·∫°o segment ${i + 1}:`, error.message);
            }
        }
        
        console.log(`‚úÖ [Step 1] ƒê√£ t·∫°o ${segments.length} segments`);
        
        // Step 1.5: Ph√¢n t√≠ch t·ªïng th·ªÉ video ƒë·ªÉ x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ chung
        console.log(`üéØ [Step 1.5] Ph√¢n t√≠ch t·ªïng th·ªÉ video ƒë·ªÉ x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ chung...`);
        const overallAnalysis = await analyzeOverallVideoTheme(videoPath, segments);
        console.log(`‚úÖ [Step 1.5] ƒê√£ ph√¢n t√≠ch ch·ªß ƒë·ªÅ: ${overallAnalysis.mainTheme}`);
        
        // Step 2: X·ª≠ l√Ω T·ªêI ∆ØU - g·ª≠i t·∫•t c·∫£ Veo3 c√πng l√∫c, kh√¥ng ch·ªù
        console.log(`üöÄ [Step 2] X·ª≠ l√Ω T·ªêI ∆ØU - g·ª≠i t·∫•t c·∫£ Veo3 c√πng l√∫c...`);
        const serverUrl = 'http://localhost:8888';
        
        const veo3Operations = [];
        
        // G·ª≠i t·∫•t c·∫£ Veo3 requests c√πng l√∫c
        const veo3Promises = segments.map(async (segment, index) => {
            console.log(`üöÄ [Step 2] G·ª≠i Veo3 request cho segment ${index + 1}...`);
            
            try {
                const response = await fetch(`${serverUrl}/api/veo3-complete-workflow`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        videoPath: segment.path,
                        startSecond: 0,
                        duration: segmentDuration,
                        frameInterval: 1,
                        maxFrames: 4, // Gi·∫£m ƒë·ªÉ x·ª≠ l√Ω nhanh h∆°n
                        outputDir: path.join(outputDir, `segment_${segment.index}_result`),
                        themeContext: overallAnalysis
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    console.log(`‚úÖ [Step 2] Segment ${index + 1} Veo3 ƒë√£ g·ª≠i: ${result.result.veo3Operation}`);
                    return {
                        segmentIndex: segment.index,
                        segment: segment,
                        veo3Operation: result.result.veo3Operation,
                        success: true,
                        timestamp: new Date().toISOString()
                    };
                } else {
                    console.log(`‚ùå [Step 2] Segment ${index + 1} th·∫•t b·∫°i: ${result.message}`);
                    return {
                        segmentIndex: segment.index,
                        segment: segment,
                        error: result.message,
                        success: false
                    };
                }
            } catch (error) {
                console.log(`‚ùå [Step 2] Segment ${index + 1} l·ªói: ${error.message}`);
                return {
                    segmentIndex: segment.index,
                    segment: segment,
                    error: error.message,
                    success: false
                };
            }
        });
        
        // Ch·ªù t·∫•t c·∫£ Veo3 requests ho√†n th√†nh (ch·ªâ l√† g·ª≠i request, kh√¥ng ch·ªù video)
        const veo3Results = await Promise.all(veo3Promises);
        const successfulOperations = veo3Results.filter(r => r.success);
        
        console.log(`‚úÖ [Step 2] ƒê√£ g·ª≠i ${successfulOperations.length}/${segments.length} Veo3 requests`);
        console.log(`üöÄ [Step 2] T·∫•t c·∫£ Veo3 ƒëang ch·∫°y ng·∫ßm, ti·∫øp t·ª•c x·ª≠ l√Ω kh√°c...`);
        
        // Step 3: Ch·∫°y ng·∫ßm - ki·ªÉm tra v√† t·∫£i video khi s·∫µn s√†ng
        console.log(`üîÑ [Step 3] Ch·∫°y ng·∫ßm - ki·ªÉm tra v√† t·∫£i video khi s·∫µn s√†ng...`);
        
        const downloadPromises = successfulOperations.map(async (veo3Result) => {
            const operationId = veo3Result.veo3Operation;
            console.log(`üîÑ [Step 3] B·∫Øt ƒë·∫ßu monitor operation: ${operationId}`);
            
            // Polling ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
            let attempts = 0;
            const maxAttempts = 60; // T·ªëi ƒëa 60 l·∫ßn (5 ph√∫t)
            
            while (attempts < maxAttempts) {
                try {
                    const statusResponse = await fetch(`${serverUrl}/api/check-status`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            operationName: operationId
                        })
                    });
                    
                    const statusResult = await statusResponse.json();
                    
                    if (statusResult.success && statusResult.videoStatus === 'COMPLETED' && statusResult.videoUrl) {
                        console.log(`‚úÖ [Step 3] Operation ${operationId} ƒë√£ ho√†n th√†nh!`);
                        
                        // T·∫£i video
                        const downloadResponse = await fetch(`${serverUrl}/api/tts/download`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                audioUrl: statusResult.videoUrl,
                                filename: `veo3_segment_${veo3Result.segmentIndex}_${Date.now()}.mp4`
                            })
                        });
                        
                        const downloadResult = await downloadResponse.json();
                        
                        if (downloadResult.success) {
                            console.log(`‚úÖ [Step 3] Segment ${veo3Result.segmentIndex + 1} ƒë√£ t·∫£i v·ªÅ`);
                            return {
                                segmentIndex: veo3Result.segmentIndex,
                                path: downloadResult.outPath,
                                startSecond: veo3Result.segment.startSecond,
                                endSecond: veo3Result.segment.endSecond,
                                operationId: operationId,
                                success: true
                            };
                        } else {
                            console.log(`‚ùå [Step 3] Segment ${veo3Result.segmentIndex + 1} t·∫£i v·ªÅ th·∫•t b·∫°i`);
                            return {
                                segmentIndex: veo3Result.segmentIndex,
                                error: 'Download failed',
                                success: false
                            };
                        }
                    } else if (statusResult.success && statusResult.videoStatus === 'PENDING') {
                        console.log(`‚è≥ [Step 3] Operation ${operationId} ƒëang x·ª≠ l√Ω... (attempt ${attempts + 1})`);
                        attempts++;
                        await new Promise(resolve => setTimeout(resolve, 5000)); // Ch·ªù 5 gi√¢y
                    } else {
                        console.log(`‚ùå [Step 3] Operation ${operationId} th·∫•t b·∫°i ho·∫∑c kh√¥ng t√¨m th·∫•y`);
                        return {
                            segmentIndex: veo3Result.segmentIndex,
                            error: 'Operation failed',
                            success: false
                        };
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è [Step 3] L·ªói ki·ªÉm tra operation ${operationId}:`, error.message);
                    attempts++;
                    await new Promise(resolve => setTimeout(resolve, 5000));
                }
            }
            
            console.log(`‚è∞ [Step 3] Operation ${operationId} timeout sau ${maxAttempts} attempts`);
            return {
                segmentIndex: veo3Result.segmentIndex,
                error: 'Timeout',
                success: false
            };
        });
        
        // Ch·ªù t·∫•t c·∫£ video ƒë∆∞·ª£c t·∫£i v·ªÅ
        console.log(`‚è≥ [Step 3] Ch·ªù t·∫•t c·∫£ video ƒë∆∞·ª£c t·∫£i v·ªÅ...`);
        const videoFiles = await Promise.all(downloadPromises);
        const successfulVideos = videoFiles.filter(v => v.success);
        
        console.log(`‚úÖ [Step 3] ƒê√£ t·∫£i ${successfulVideos.length}/${videoFiles.length} video`);
        
        // Step 4: Gh√©p video th√†nh 1 video k·∫øt qu·∫£
        if (successfulVideos.length > 0) {
            console.log(`üé¨ [Step 4] Gh√©p ${successfulVideos.length} video th√†nh 1 video k·∫øt qu·∫£...`);
            
            // S·∫Øp x·∫øp theo th·ª© t·ª±
            successfulVideos.sort((a, b) => a.segmentIndex - b.segmentIndex);
            
            // Ki·ªÉm tra c√°c file video t·ªìn t·∫°i
            const validVideoFiles = successfulVideos.filter(video => {
                if (!video.path || !fs.existsSync(video.path)) {
                    console.warn(`‚ö†Ô∏è [Step 4] File video kh√¥ng t·ªìn t·∫°i: ${video.path}`);
                    return false;
                }
                return true;
            });
            
            if (validVideoFiles.length === 0) {
                throw new Error('Kh√¥ng c√≥ file video h·ª£p l·ªá ƒë·ªÉ gh√©p');
            }
            
            console.log(`üìù [Step 4] C√≥ ${validVideoFiles.length} file video h·ª£p l·ªá ƒë·ªÉ gh√©p`);
            
            // T·∫°o file list cho ffmpeg
            const listPath = path.join(outputDir, 'video_list.txt');
            const listContent = validVideoFiles.map(video => {
                const absolutePath = path.resolve(video.path);
                const normalizedPath = absolutePath.replace(/\\/g, '/');
                return `file '${normalizedPath}'`;
            }).join('\n');
            
            console.log(`üìù [Step 4] T·∫°o file list: ${listPath}`);
            fs.writeFileSync(listPath, listContent, 'utf8');
            
            // Gh√©p video
            const finalVideoPath = path.join(outputDir, `veo3_32s_optimized_${Date.now()}.mp4`);
            const mergeCmd = `ffmpeg -f concat -safe 0 -i "${listPath}" -c copy "${finalVideoPath}"`;
            
            await execAsync(mergeCmd);
            
            console.log(`‚úÖ [Step 4] ƒê√£ gh√©p video th√†nh: ${finalVideoPath}`);
            
            // L∆∞u k·∫øt qu·∫£ ho√†n ch·ªânh
            const finalResult = {
                timestamp: new Date().toISOString(),
                originalVideo: videoPath,
                totalDuration: totalDuration,
                overallTheme: overallAnalysis,
                segmentsCreated: segments.length,
                veo3OperationsSent: successfulOperations.length,
                videosDownloaded: successfulVideos.length,
                finalVideo: finalVideoPath,
                segments: segments,
                veo3Results: veo3Results,
                videoFiles: successfulVideos,
                outputDir: outputDir,
                optimization: "T·ªëi ∆∞u th·ªùi gian - g·ª≠i Veo3 v√† ti·∫øp t·ª•c x·ª≠ l√Ω"
            };
            
            const resultPath = path.join(outputDir, 'veo3-32s-optimized-result.json');
            fs.writeFileSync(resultPath, JSON.stringify(finalResult, null, 2));
            
            console.log(`üìä [Step 4] ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${resultPath}`);
            
            return {
                success: true,
                result: finalResult
            };
            
        } else {
            throw new Error('Kh√¥ng c√≥ video n√†o ƒë∆∞·ª£c t·∫£i v·ªÅ ƒë·ªÉ gh√©p');
        }
        
    } catch (error) {
        console.error(`‚ùå [veo3Optimized32sWorkflow] L·ªói:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * API endpoint cho workflow 32s T·ªêI ∆ØU TH·ªúI GIAN
 */
async function veo3Optimized32sWorkflowAPI(req, res) {
    try {
        console.log(`üöÄ [veo3Optimized32sWorkflowAPI] API workflow 32s T·ªêI ∆ØU TH·ªúI GIAN ƒë∆∞·ª£c g·ªçi`);
        
        const { videoPath, startSecond, totalDuration, segmentDuration, outputDir } = req.body;
        
        if (!videoPath) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu videoPath'
            });
        }
        
        const result = await veo3Optimized32sWorkflow(videoPath, {
            startSecond,
            totalDuration,
            segmentDuration,
            outputDir
        });
        
        if (result.success) {
            return res.json({
                success: true,
                message: `ƒê√£ ho√†n th√†nh workflow 32s T·ªêI ∆ØU TH·ªúI GIAN`,
                result: result.result
            });
        } else {
            return res.status(500).json({
                success: false,
                message: result.error
            });
        }
        
    } catch (error) {
        console.error(`‚ùå [veo3Optimized32sWorkflowAPI] L·ªói:`, error.message);
        return res.status(500).json({
            success: false,
            message: error.message
        });
    }
}

module.exports = {
    analyzeOverallVideoTheme,
    veo3Optimized32sWorkflow,
    veo3Optimized32sWorkflowAPI
};
