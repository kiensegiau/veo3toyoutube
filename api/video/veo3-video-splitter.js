const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs');
const path = require('path');

const execAsync = promisify(exec);

/**
 * T√°ch video th√†nh c√°c ƒëo·∫°n 8 gi√¢y
 * @param {string} videoPath - ƒê∆∞·ªùng d·∫´n video g·ªëc
 * @param {Object} options - T√πy ch·ªçn
 * @returns {Promise<Object>} - K·∫øt qu·∫£ t√°ch video
 */
async function splitVideoInto8sSegments(videoPath, options = {}) {
    try {
        console.log(`üé¨ [splitVideoInto8sSegments] T√°ch video th√†nh c√°c ƒëo·∫°n 8s: ${videoPath}`);
        
        const {
            outputDir = './temp/segments',
            segmentDuration = 8,
            maxSegments = 200
        } = options;
        
        // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        // L·∫•y th√¥ng tin video
        console.log(`üìä [Step 1] L·∫•y th√¥ng tin video...`);
        const ffprobeCmd = `ffprobe -v quiet -print_format json -show_format -show_streams "${videoPath}"`;
        const { stdout } = await execAsync(ffprobeCmd);
        const videoInfo = JSON.parse(stdout);
        
        const duration = parseFloat(videoInfo.format.duration);
        const segmentsNeeded = Math.min(Math.ceil(duration / segmentDuration), maxSegments);
        
        console.log(`üìä [Step 1] Video: ${duration}s, c·∫ßn ${segmentsNeeded} segments`);
        
        // T√°ch video th√†nh c√°c ƒëo·∫°n 8s
        console.log(`‚úÇÔ∏è [Step 2] T√°ch video th√†nh ${segmentsNeeded} segments...`);
        const segments = [];
        
        for (let i = 0; i < segmentsNeeded; i++) {
            const startTime = i * segmentDuration;
            const endTime = Math.min(startTime + segmentDuration, duration);
            const segmentFilename = `segment_${i.toString().padStart(3, '0')}_${startTime}s-${endTime}s.mp4`;
            const segmentPath = path.join(outputDir, segmentFilename);
            
            console.log(`‚úÇÔ∏è [Step 2] T·∫°o segment ${i + 1}/${segmentsNeeded}: ${startTime}s-${endTime}s`);
            
            const ffmpegCmd = `ffmpeg -i "${videoPath}" -ss ${startTime} -t ${segmentDuration} -c copy -avoid_negative_ts make_zero "${segmentPath}"`;
            await execAsync(ffmpegCmd);
            
            segments.push({
                index: i,
                startTime: startTime,
                endTime: endTime,
                duration: endTime - startTime,
                filename: segmentFilename,
                path: segmentPath
            });
        }
        
        console.log(`‚úÖ [Step 2] ƒê√£ t·∫°o ${segments.length} segments`);
        
        return {
            success: true,
            videoInfo: {
                duration: duration,
                width: videoInfo.streams[0].width,
                height: videoInfo.streams[0].height,
                fps: eval(videoInfo.streams[0].r_frame_rate)
            },
            segments: segments,
            outputDir: outputDir
        };
        
    } catch (error) {
        console.error(`‚ùå [splitVideoInto8sSegments] L·ªói:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * API endpoint cho t√°ch video
 */
async function splitVideoAPI(req, res) {
    try {
        console.log(`üé¨ [splitVideoAPI] API t√°ch video ƒë∆∞·ª£c g·ªçi`);
        
        const { videoPath, outputDir, maxSegments } = req.body;
        
        if (!videoPath) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu videoPath'
            });
        }
        
        const result = await splitVideoInto8sSegments(videoPath, {
            outputDir,
            maxSegments
        });
        
        if (result.success) {
            return res.json({
                success: true,
                message: `ƒê√£ t√°ch video th√†nh ${result.segments.length} segments`,
                result: result
            });
        } else {
            return res.status(500).json({
                success: false,
                message: result.error
            });
        }
        
    } catch (error) {
        console.error(`‚ùå [splitVideoAPI] L·ªói:`, error.message);
        return res.status(500).json({
            success: false,
            message: error.message
        });
    }
}

module.exports = {
    splitVideoInto8sSegments,
    splitVideoAPI
};
