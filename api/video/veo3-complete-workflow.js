const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// H√†m t·∫°o video ho√†n ch·ªânh t·ª´ video g·ªëc
async function createVeo3CompleteVideo(videoPath, options = {}) {
    try {
        console.log(`üé¨ [createVeo3CompleteVideo] B·∫Øt ƒë·∫ßu t·∫°o video 2 ph√∫t t·ª´: ${videoPath}`);
        
        const {
            duration = 120, // 2 ph√∫t = 120 gi√¢y
            segmentDuration = 8, // M·ªói segment 8 gi√¢y
            outputFilename = `veo3_complete_${Date.now()}.mp4`
        } = options;
        
        const serverUrl = 'http://localhost:8888';
        const segmentsNeeded = Math.ceil(duration / segmentDuration); // 15 segments cho 2 ph√∫t
        
        console.log(`üìä [Step 1] T√≠nh to√°n: ${segmentsNeeded} segments, m·ªói ${segmentDuration}s`);
        
        // Step 1: L·∫•y th√¥ng tin video
        console.log(`üìä [Step 2] L·∫•y th√¥ng tin video...`);
        const videoInfoResponse = await fetch(`${serverUrl}/api/extract-frames`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                videoPath: videoPath,
                count: 1,
                interval: 1
            })
        });
        
        const videoInfo = await videoInfoResponse.json();
        if (!videoInfo.success) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video: ${videoInfo.message}`);
        }
        
        console.log(`‚úÖ [Step 2] Video info: ${videoInfo.videoInfo.duration}s, ${videoInfo.videoInfo.width}x${videoInfo.videoInfo.height}`);
        
        // Step 2: T·∫°o timeline ƒë∆°n gi·∫£n cho video
        console.log(`üé¨ [Step 3] T·∫°o timeline ƒë∆°n gi·∫£n cho ${duration}s...`);
        const timelineSegments = [];
        
        // T·∫°o timeline ƒë∆°n gi·∫£n kh√¥ng c·∫ßn ChatGPT
        for (let i = 0; i < segmentsNeeded; i++) {
            const startSecond = i * segmentDuration;
            const endSecond = Math.min(startSecond + segmentDuration, duration);
            
            console.log(`üì∏ [Step 3] T·∫°o segment ${i + 1}/${segmentsNeeded}: ${startSecond}s-${endSecond}s`);
            
            // T·∫°o timeline ƒë∆°n gi·∫£n
            const simpleTimeline = [
                {
                    timeStart: 0,
                    timeEnd: 2,
                    action: `Scene ${i + 1} - Professional technology scene with clean composition`,
                    cameraStyle: "medium-shot, static camera",
                    soundFocus: "Professional background sound",
                    visualDetails: "Clean white and black color scheme with bright lighting"
                },
                {
                    timeStart: 2,
                    timeEnd: 4,
                    action: `Scene ${i + 1} - Dynamic movement with modern elements`,
                    cameraStyle: "angled shot, slight panning",
                    soundFocus: "Smooth ambient sound",
                    visualDetails: "Modern color palette with dynamic lighting"
                },
                {
                    timeStart: 4,
                    timeEnd: 6,
                    action: `Scene ${i + 1} - Close-up details with focus on key elements`,
                    cameraStyle: "close-up, focused shot",
                    soundFocus: "Clear, detailed audio",
                    visualDetails: "Sharp focus with professional lighting"
                },
                {
                    timeStart: 6,
                    timeEnd: 8,
                    action: `Scene ${i + 1} - Wide shot revealing full context`,
                    cameraStyle: "wide shot, gradual zoom out",
                    soundFocus: "Full ambient soundscape",
                    visualDetails: "Complete scene with balanced composition"
                }
            ];
            
            // L∆∞u timeline segment
            timelineSegments.push({
                segmentIndex: i,
                startSecond: startSecond,
                endSecond: endSecond,
                timeline: simpleTimeline
            });
            
            console.log(`‚úÖ [Step 3] Segment ${i + 1} timeline ho√†n th√†nh`);
        }
        
        console.log(`‚úÖ [Step 3] ƒê√£ t·∫°o ${timelineSegments.length} timeline segments`);
        
        // Step 3: T·∫°o video Veo3 cho t·ª´ng segment
        console.log(`üé¨ [Step 4] T·∫°o video Veo3 cho ${timelineSegments.length} segments...`);
        const veo3Videos = [];
        
        for (let i = 0; i < timelineSegments.length; i++) {
            const segment = timelineSegments[i];
            console.log(`üé¨ [Step 4] T·∫°o video Veo3 cho segment ${i + 1}/${timelineSegments.length}`);
            
            // T·∫°o video Veo3 cho segment n√†y
            const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    input: segment.timeline[0].action, // S·ª≠ d·ª•ng action ƒë·∫ßu ti√™n
                    prompt: segment.timeline[0].action
                })
            });
            
            const veo3Result = await veo3Response.json();
            if (!veo3Result.success) {
                console.warn(`‚ö†Ô∏è [Step 4] Veo3 segment ${i + 1} th·∫•t b·∫°i, b·ªè qua`);
                continue;
            }
            
            veo3Videos.push({
                segmentIndex: i,
                startSecond: segment.startSecond,
                endSecond: segment.endSecond,
                operationName: veo3Result.operationName,
                requestId: veo3Result.requestId,
                status: 'PENDING'
            });
            
            console.log(`‚úÖ [Step 4] Veo3 segment ${i + 1} t·∫°o th√†nh c√¥ng`);
            
            // Delay ƒë·ªÉ tr√°nh rate limit
            if (i < timelineSegments.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
        
        console.log(`‚úÖ [Step 4] ƒê√£ t·∫°o ${veo3Videos.length} video Veo3`);
        
        // Step 4: Check status v√† download videos
        console.log(`‚è≥ [Step 5] Ch·ªù video Veo3 ho√†n th√†nh...`);
        const completedVideos = [];
        
        for (let i = 0; i < veo3Videos.length; i++) {
            const video = veo3Videos[i];
            console.log(`‚è≥ [Step 5] Ch·ªù video ${i + 1}/${veo3Videos.length} ho√†n th√†nh...`);
            
            // Check status
            const statusResponse = await fetch(`${serverUrl}/api/check-status`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    operationName: video.operationName
                })
            });
            
            const statusResult = await statusResponse.json();
            if (statusResult.success && statusResult.videoStatus === 'COMPLETED') {
                completedVideos.push({
                    ...video,
                    status: 'COMPLETED',
                    videoUrl: statusResult.videoUrl
                });
                console.log(`‚úÖ [Step 5] Video ${i + 1} ho√†n th√†nh`);
            } else {
                console.warn(`‚ö†Ô∏è [Step 5] Video ${i + 1} ch∆∞a ho√†n th√†nh, b·ªè qua`);
            }
        }
        
        console.log(`‚úÖ [Step 5] ƒê√£ ho√†n th√†nh ${completedVideos.length}/${veo3Videos.length} video`);
        
        // Step 5: Merge videos
        if (completedVideos.length > 0) {
            console.log(`üé¨ [Step 6] Merge ${completedVideos.length} video...`);
            
            // T·∫°o output directory
            const outputDir = path.join(__dirname, '../../public/final-videos');
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
            }
            
            const finalOutputPath = path.join(outputDir, outputFilename);
            
            // Merge videos
            const mergeResponse = await fetch(`${serverUrl}/api/merge-videos`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    duration: duration,
                    filename: outputFilename
                })
            });
            
            const mergeResult = await mergeResponse.json();
            if (!mergeResult.success) {
                throw new Error(`Kh√¥ng th·ªÉ merge video: ${mergeResult.message}`);
            }
            
            console.log(`‚úÖ [Step 6] Video cu·ªëi c√πng: ${mergeResult.output.filename}`);
            
            return {
                success: true,
                message: `ƒê√£ t·∫°o video 2 ph√∫t th√†nh c√¥ng`,
                result: {
                    originalVideo: videoPath,
                    duration: duration,
                    segments: timelineSegments.length,
                    veo3Videos: completedVideos.length,
                    finalVideo: {
                        filename: outputFilename,
                        path: finalOutputPath,
                        publicPath: `/final-videos/${outputFilename}`,
                        size: mergeResult.output.size,
                        sizeMB: mergeResult.output.sizeMB
                    }
                }
            };
        } else {
            throw new Error('Kh√¥ng c√≥ video n√†o ho√†n th√†nh');
        }
        
    } catch (error) {
        console.error('‚ùå [createVeo3CompleteVideo] L·ªói:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// API endpoint
async function createVeo3CompleteVideoAPI(req, res) {
    try {
        const { videoPath, duration = 120, segmentDuration = 8, outputFilename } = req.body;
        
        if (!videoPath) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu videoPath'
            });
        }
        
        // Ki·ªÉm tra file t·ªìn t·∫°i
        if (!fs.existsSync(videoPath)) {
            return res.status(404).json({
                success: false,
                message: 'Video file kh√¥ng t·ªìn t·∫°i'
            });
        }
        
        console.log(`üé¨ [createVeo3CompleteVideoAPI] T·∫°o video ${duration}s t·ª´: ${videoPath}`);
        
        const result = await createVeo3CompleteVideo(videoPath, {
            duration,
            segmentDuration,
            outputFilename
        });
        
        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ t·∫°o video ho√†n ch·ªânh',
                error: result.error
            });
        }
        
        return res.json({
            success: true,
            message: `ƒê√£ t·∫°o video ${duration}s th√†nh c√¥ng`,
            result: result.result
        });
        
    } catch (error) {
        console.error('‚ùå [createVeo3CompleteVideoAPI] L·ªói:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói t·∫°o video ho√†n ch·ªânh',
            error: error.message
        });
    }
}

module.exports = {
    createVeo3CompleteVideo,
    createVeo3CompleteVideoAPI
};
