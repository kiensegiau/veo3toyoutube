const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

// H√†m g·ªçi ChatGPT Vision API
async function analyzeVideoWithChatGPT(transcript, frames, videoInfo) {
    try {
        console.log(`ü§ñ [analyzeVideoWithChatGPT] B·∫Øt ƒë·∫ßu ph√¢n t√≠ch video v·ªõi ChatGPT`);
        console.log(`üìù Transcript length: ${transcript.length} characters`);
        console.log(`üñºÔ∏è Frames count: ${frames.length}`);
        
        // Chu·∫©n b·ªã images cho ChatGPT Vision
        const imageContents = [];
        for (const frame of frames) {
            if (fs.existsSync(frame.path)) {
                const imageBuffer = fs.readFileSync(frame.path);
                const base64Image = imageBuffer.toString('base64');
                imageContents.push({
                    type: "image_url",
                    image_url: {
                        url: `data:image/jpeg;base64,${base64Image}`,
                        detail: "high"
                    }
                });
            }
        }
        
        // T·∫°o prompt cho ChatGPT
        const systemPrompt = `B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch video v√† t·∫°o n·ªôi dung cho AI video generation. 
        Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch video v√† t·∫°o prompts cho Veo3 (Google's video AI) ƒë·ªÉ t·∫°o ra video t∆∞∆°ng t·ª±.
        
        M·ªói video Veo3 ch·ªâ c√≥ th·ªÉ t·∫°o ƒë∆∞·ª£c 8 gi√¢y, v√¨ v·∫≠y b·∫°n c·∫ßn t·∫°o 8 prompts kh√°c nhau, m·ªói prompt cho 1 video 8 gi√¢y.
        
        H√£y ph√¢n t√≠ch:
        1. N·ªôi dung ch√≠nh c·ªßa video (t·ª´ transcript)
        2. Visual elements trong t·ª´ng frame
        3. Style, mood, tone c·ªßa video
        4. C·∫•u tr√∫c c√¢u chuy·ªán
        5. Target audience
        
        Tr·∫£ v·ªÅ JSON format ch√≠nh x√°c nh∆∞ sau:
        {
            "analysis": {
                "main_theme": "ch·ªß ƒë·ªÅ ch√≠nh c·ªßa video",
                "style": "cinematic/documentary/animation/educational",
                "mood": "professional/energetic/calm/dramatic",
                "target_audience": "ai enthusiasts/developers/general public",
                "visual_style": "modern/classic/minimalist",
                "color_palette": ["#color1", "#color2", "#color3"],
                "narrative_structure": "linear/storytelling/tutorial"
            },
            "scenes": [
                {
                    "scene_id": 1,
                    "timeframe": "0-8s",
                    "description": "m√¥ t·∫£ scene n√†y",
                    "visual_elements": ["element1", "element2"],
                    "mood": "energetic",
                    "camera_movement": "static/pan/zoom",
                    "lighting": "bright/dim/dramatic",
                    "veo3_prompt": "detailed prompt for Veo3 to create this scene"
                }
            ],
            "overall_consistency": "guidelines ƒë·ªÉ maintain consistency across all scenes"
        }`;

        const userPrompt = `Ph√¢n t√≠ch video n√†y v√† t·∫°o 8 prompts cho Veo3:

VIDEO INFO:
- Duration: ${videoInfo.duration} seconds
- Resolution: ${videoInfo.width}x${videoInfo.height}
- FPS: ${videoInfo.fps}
- Format: ${videoInfo.format}

TRANSCRIPT:
${transcript}

FRAMES: ${frames.length} frames ƒë∆∞·ª£c extract t·ª´ video

H√£y t·∫°o 8 prompts cho Veo3, m·ªói prompt t·∫°o 1 video 8 gi√¢y, t·ªïng c·ªông 64 gi√¢y.
M·ªói prompt ph·∫£i:
1. Chi ti·∫øt v√† c·ª• th·ªÉ v·ªÅ visual elements
2. Ph√π h·ª£p v·ªõi n·ªôi dung transcript
3. Match v·ªõi style c·ªßa video g·ªëc
4. T·∫°o th√†nh c√¢u chuy·ªán li·ªÅn m·∫°ch
5. Bao g·ªìm camera movement, lighting, composition`;

        // G·ªçi ChatGPT Vision API
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: "gpt-4o",
                messages: [
                    {
                        role: "system",
                        content: systemPrompt
                    },
                    {
                        role: "user",
                        content: [
                            {
                                type: "text",
                                text: userPrompt
                            },
                            ...imageContents
                        ]
                    }
                ],
                max_tokens: 4000,
                temperature: 0.7
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`ChatGPT API error: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        const analysisText = data.choices[0].message.content;
        
        console.log(`‚úÖ [analyzeVideoWithChatGPT] ChatGPT ph√¢n t√≠ch th√†nh c√¥ng`);
        
        // Parse JSON response
        try {
            // T√¨m JSON trong response text
            const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const analysis = JSON.parse(jsonMatch[0]);
                return {
                    success: true,
                    analysis,
                    rawResponse: analysisText
                };
            } else {
                throw new Error('No JSON found in response');
            }
        } catch (parseError) {
            console.warn('‚ö†Ô∏è [analyzeVideoWithChatGPT] Kh√¥ng th·ªÉ parse JSON, t·∫°o mock analysis');
            
            // T·∫°o mock analysis n·∫øu kh√¥ng parse ƒë∆∞·ª£c
            const mockAnalysis = {
                analysis: {
                    main_theme: "AI and Technology",
                    style: "educational",
                    mood: "professional",
                    target_audience: "tech enthusiasts",
                    visual_style: "modern",
                    color_palette: ["#1a1a1a", "#ffffff", "#007acc"],
                    narrative_structure: "linear"
                },
                scenes: [
                    {
                        scene_id: 1,
                        timeframe: "0-8s",
                        description: "Introduction to AI technology",
                        visual_elements: ["computer", "AI brain", "data visualization"],
                        mood: "professional",
                        camera_movement: "static",
                        lighting: "bright",
                        veo3_prompt: "A modern computer screen displaying AI technology concepts, with data visualizations and neural network diagrams, professional lighting, clean and minimalist design"
                    },
                    {
                        scene_id: 2,
                        timeframe: "8-16s",
                        description: "Machine learning algorithms in action",
                        visual_elements: ["algorithms", "data processing", "charts"],
                        mood: "educational",
                        camera_movement: "pan",
                        lighting: "bright",
                        veo3_prompt: "Animated machine learning algorithms processing data, with flowing data streams and mathematical equations, educational style, bright lighting"
                    },
                    {
                        scene_id: 3,
                        timeframe: "16-24s",
                        description: "Deep learning neural networks",
                        visual_elements: ["neural network", "brain", "connections"],
                        mood: "scientific",
                        camera_movement: "zoom",
                        lighting: "dramatic",
                        veo3_prompt: "3D visualization of neural networks with interconnected nodes and data flowing through connections, scientific visualization style, dramatic lighting"
                    },
                    {
                        scene_id: 4,
                        timeframe: "24-32s",
                        description: "Computer vision applications",
                        visual_elements: ["camera", "image recognition", "AI eye"],
                        mood: "innovative",
                        camera_movement: "pan",
                        lighting: "bright",
                        veo3_prompt: "Computer vision AI analyzing images and recognizing objects, with camera lens effects and digital overlays, innovative tech style"
                    },
                    {
                        scene_id: 5,
                        timeframe: "32-40s",
                        description: "Natural language processing",
                        visual_elements: ["text", "language", "communication"],
                        mood: "communicative",
                        camera_movement: "static",
                        lighting: "warm",
                        veo3_prompt: "Natural language processing in action, with text flowing and transforming into different languages, warm and communicative atmosphere"
                    },
                    {
                        scene_id: 6,
                        timeframe: "40-48s",
                        description: "Reinforcement learning concepts",
                        visual_elements: ["robot", "learning", "rewards"],
                        mood: "dynamic",
                        camera_movement: "dynamic",
                        lighting: "energetic",
                        veo3_prompt: "Reinforcement learning AI agent learning through trial and error, with dynamic movements and reward signals, energetic and dynamic style"
                    },
                    {
                        scene_id: 7,
                        timeframe: "48-56s",
                        description: "Future of AI technology",
                        visual_elements: ["future", "innovation", "possibilities"],
                        mood: "aspirational",
                        camera_movement: "sweep",
                        lighting: "futuristic",
                        veo3_prompt: "Futuristic AI technology landscape with holographic displays and advanced interfaces, aspirational and forward-looking style"
                    },
                    {
                        scene_id: 8,
                        timeframe: "56-64s",
                        description: "AI integration in daily life",
                        visual_elements: ["daily life", "integration", "smart devices"],
                        mood: "practical",
                        camera_movement: "static",
                        lighting: "natural",
                        veo3_prompt: "AI seamlessly integrated into daily life with smart devices and intelligent assistants, practical and natural lighting, realistic style"
                    }
                ],
                overall_consistency: "Maintain professional, educational tone with modern visual style throughout all scenes"
            };
            
            return {
                success: true,
                analysis: mockAnalysis,
                rawResponse: analysisText
            };
        }

    } catch (error) {
        console.error('‚ùå [analyzeVideoWithChatGPT] L·ªói:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// H√†m t·∫°o transcript gi·∫£ cho video (v√¨ test.mp4 c√≥ th·ªÉ kh√¥ng c√≥ audio)
async function generateMockTranscript(videoInfo) {
    const mockTranscripts = [
        "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi video h∆∞·ªõng d·∫´n v·ªÅ AI v√† machine learning. Trong video n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ c√°c c√¥ng ngh·ªá AI ti√™n ti·∫øn nh·∫•t hi·ªán nay.",
        "AI ƒëang thay ƒë·ªïi c√°ch ch√∫ng ta l√†m vi·ªác v√† s·ªëng. T·ª´ vi·ªác t·ª± ƒë·ªông h√≥a c√°c t√°c v·ª• ƒë∆°n gi·∫£n ƒë·∫øn vi·ªác t·∫°o ra nh·ªØng s·∫£n ph·∫©m s√°ng t·∫°o, AI ƒë√£ tr·ªü th√†nh m·ªôt ph·∫ßn kh√¥ng th·ªÉ thi·∫øu c·ªßa cu·ªôc s·ªëng hi·ªán ƒë·∫°i.",
        "Machine Learning l√† m·ªôt nh√°nh c·ªßa AI cho ph√©p m√°y t√≠nh h·ªçc v√† c·∫£i thi·ªán t·ª´ kinh nghi·ªám m√† kh√¥ng c·∫ßn ƒë∆∞·ª£c l·∫≠p tr√¨nh r√µ r√†ng. ƒê√¢y l√† c√¥ng ngh·ªá ƒë·∫±ng sau nhi·ªÅu ·ª©ng d·ª•ng AI m√† ch√∫ng ta s·ª≠ d·ª•ng h√†ng ng√†y.",
        "Deep Learning s·ª≠ d·ª•ng c√°c m·∫°ng neural nh√¢n t·∫°o ƒë·ªÉ m√¥ ph·ªèng c√°ch n√£o b·ªô con ng∆∞·ªùi x·ª≠ l√Ω th√¥ng tin. C√¥ng ngh·ªá n√†y ƒë√£ t·∫°o ra nh·ªØng ƒë·ªôt ph√° trong nh·∫≠n d·∫°ng h√¨nh ·∫£nh, x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n v√† nhi·ªÅu lƒ©nh v·ª±c kh√°c.",
        "Computer Vision cho ph√©p m√°y t√≠nh hi·ªÉu v√† ph√¢n t√≠ch n·ªôi dung h√¨nh ·∫£nh. T·ª´ vi·ªác nh·∫≠n d·∫°ng khu√¥n m·∫∑t ƒë·∫øn vi·ªác ph√¢n t√≠ch video, computer vision ƒëang m·ªü ra nh·ªØng kh·∫£ nƒÉng m·ªõi trong nhi·ªÅu ng√†nh c√¥ng nghi·ªáp.",
        "Natural Language Processing gi√∫p m√°y t√≠nh hi·ªÉu v√† x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n c·ªßa con ng∆∞·ªùi. T·ª´ chatbot ƒë·∫øn d·ªãch thu·∫≠t t·ª± ƒë·ªông, NLP ƒëang c√°ch m·∫°ng h√≥a c√°ch ch√∫ng ta giao ti·∫øp v·ªõi m√°y t√≠nh.",
        "Reinforcement Learning l√† m·ªôt ph∆∞∆°ng ph√°p h·ªçc m√°y trong ƒë√≥ agent h·ªçc c√°ch th·ª±c hi·ªán c√°c h√†nh ƒë·ªông trong m√¥i tr∆∞·ªùng ƒë·ªÉ t·ªëi ƒëa h√≥a ph·∫ßn th∆∞·ªüng. C√¥ng ngh·ªá n√†y ƒë√£ t·∫°o ra nh·ªØng AI c√≥ th·ªÉ ch∆°i game v√† th·ª±c hi·ªán c√°c t√°c v·ª• ph·ª©c t·∫°p.",
        "T∆∞∆°ng lai c·ªßa AI r·∫•t s√°ng l·∫°n. V·ªõi s·ª± ph√°t tri·ªÉn kh√¥ng ng·ª´ng c·ªßa c√¥ng ngh·ªá, ch√∫ng ta c√≥ th·ªÉ mong ƒë·ª£i nh·ªØng ƒë·ªôt ph√° m·ªõi trong lƒ©nh v·ª±c n√†y, t·ª´ AI t·ªïng qu√°t ƒë·∫øn vi·ªác t√≠ch h·ª£p AI v√†o m·ªçi kh√≠a c·∫°nh c·ªßa cu·ªôc s·ªëng."
    ];
    
    // T·∫°o transcript d·ª±a tr√™n duration c·ªßa video
    const segments = Math.ceil(videoInfo.duration / 8); // M·ªói 8 gi√¢y 1 segment
    let fullTranscript = "";
    
    for (let i = 0; i < Math.min(segments, mockTranscripts.length); i++) {
        fullTranscript += mockTranscripts[i] + " ";
    }
    
    return fullTranscript.trim();
}

// API endpoint
async function analyzeVideoAPI(req, res) {
    try {
        const { videoPath, transcript = null, frames = [] } = req.body;
        
        if (!videoPath) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu videoPath'
            });
        }
        
        // Ki·ªÉm tra file t·ªìn t·∫°i
        if (!fs.existsSync(videoPath)) {
            return res.status(404).json({
                success: false,
                message: 'Video file kh√¥ng t·ªìn t·∫°i'
            });
        }
        
        // L·∫•y th√¥ng tin video
        const { getVideoInfo } = require('./extract-frames');
        const videoInfo = await getVideoInfo(videoPath);
        if (!videoInfo.success) {
            return res.status(500).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video',
                error: videoInfo.error
            });
        }
        
        // S·ª≠ d·ª•ng transcript c√≥ s·∫µn ho·∫∑c t·∫°o mock transcript
        let finalTranscript = transcript;
        if (!finalTranscript) {
            console.log('üìù [analyzeVideoAPI] T·∫°o mock transcript cho video');
            finalTranscript = await generateMockTranscript(videoInfo);
        }
        
        // Ph√¢n t√≠ch v·ªõi ChatGPT
        const analysis = await analyzeVideoWithChatGPT(finalTranscript, frames, videoInfo);
        
        if (!analysis.success) {
            return res.status(500).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch video v·ªõi ChatGPT',
                error: analysis.error
            });
        }
        
        return res.json({
            success: true,
            message: 'Ph√¢n t√≠ch video th√†nh c√¥ng',
            videoInfo,
            transcript: finalTranscript,
            analysis: analysis.analysis,
            rawResponse: analysis.rawResponse
        });
        
    } catch (error) {
        console.error('‚ùå [analyzeVideoAPI] L·ªói:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói ph√¢n t√≠ch video',
            error: error.message
        });
    }
}

module.exports = {
    analyzeVideoWithChatGPT,
    generateMockTranscript,
    analyzeVideoAPI
};
