const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

console.log('üî• [veo3-simple-workflow] Module ƒë∆∞·ª£c load l√∫c:', new Date().toISOString());

// H√†m t·∫°o video 8s ƒë∆°n gi·∫£n
async function createSimple8sVideo(videoPath, options = {}) {
    try {
        console.log(`üé¨ [createSimple8sVideo] T·∫°o video 8s ƒë∆°n gi·∫£n t·ª´: ${videoPath}`);
        
        const {
            outputFilename = `veo3_simple_8s_${Date.now()}.mp4`
        } = options;
        
        const serverUrl = 'http://localhost:8888';
        
        // Step 1: Ph√¢n t√≠ch n·ªôi dung video g·ªëc
        console.log(`üîç [Step 1] Ph√¢n t√≠ch n·ªôi dung video g·ªëc...`);
        const analyzeResponse = await fetch(`${serverUrl}/api/analyze-second-by-second`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                videoPath: videoPath,
                startSecond: 0,
                duration: 8
            })
        });
        
        const analyzeResult = await analyzeResponse.json();
        if (!analyzeResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ ph√¢n t√≠ch video: ${analyzeResult.message}`);
        }
        
        console.log(`‚úÖ [Step 1] ƒê√£ ph√¢n t√≠ch video g·ªëc`);
        
        // Step 2: T·∫°o timeline t·ª´ ph√¢n t√≠ch
        console.log(`üé¨ [Step 2] T·∫°o timeline t·ª´ ph√¢n t√≠ch...`);
        const timelineResponse = await fetch(`${serverUrl}/api/generate-veo3-timeline`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                detailedAnalysis: analyzeResult.detailedAnalysis,
                videoInfo: analyzeResult.videoInfo
            })
        });
        
        const timelineResult = await timelineResponse.json();
        if (!timelineResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ t·∫°o timeline: ${timelineResult.message}`);
        }
        
        console.log(`‚úÖ [Step 2] ƒê√£ t·∫°o timeline t·ª´ n·ªôi dung video g·ªëc`);
        
        // Step 3: T√¨m prompt t·ªët nh·∫•t t·ª´ ph√¢n t√≠ch th·ª±c t·∫ø
        console.log(`üé¨ [Step 3] T√¨m prompt t·ªët nh·∫•t t·ª´ ph√¢n t√≠ch th·ª±c t·∫ø...`);
        let bestPrompt = null;
        
        // Debug: In ra t·∫•t c·∫£ prompts c√≥ s·∫µn
        console.log(`üîç [Step 3] Debug - T·∫•t c·∫£ prompts c√≥ s·∫µn:`);
        for (let i = 0; i < analyzeResult.detailedAnalysis.length; i++) {
            const analysis = analyzeResult.detailedAnalysis[i];
            if (analysis.analysis && analysis.analysis.veo3_prompt) {
                console.log(`üîç [Step 3] Gi√¢y ${analysis.second}: ${analysis.analysis.veo3_prompt.substring(0, 100)}...`);
            }
        }
        
        // T√¨m prompt c√≥ n·ªôi dung th·ª±c t·∫ø nh·∫•t (kh√¥ng ph·∫£i mock)
        for (let i = 0; i < analyzeResult.detailedAnalysis.length; i++) {
            const analysis = analyzeResult.detailedAnalysis[i];
            if (analysis.analysis && analysis.analysis.veo3_prompt && 
                !analysis.analysis.veo3_prompt.includes('Create a professional video scene') &&
                !analysis.analysis.veo3_prompt.includes('technology and AI concepts') &&
                analysis.analysis.veo3_prompt.length > 50) { // ƒê·∫£m b·∫£o prompt ƒë·ªß d√†i
                bestPrompt = analysis.analysis.veo3_prompt;
                console.log(`‚úÖ [Step 3] T√¨m th·∫•y prompt t·ªët t·ª´ gi√¢y ${analysis.second}: ${bestPrompt.substring(0, 100)}...`);
                break;
            }
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y prompt t·ªët, d√πng prompt t·ª´ timeline
        if (!bestPrompt) {
            console.log(`‚ö†Ô∏è [Step 3] Kh√¥ng t√¨m th·∫•y prompt t·ªët, d√πng prompt t·ª´ timeline...`);
            bestPrompt = timelineResult.timeline[0].action;
        }
        
        console.log(`üé¨ [Step 3] S·ª≠ d·ª•ng prompt: ${bestPrompt.substring(0, 100)}...`);
        
        // Step 4: T·∫°o video Veo3 d·ª±a tr√™n n·ªôi dung th·ª±c t·∫ø
        console.log(`üé¨ [Step 4] T·∫°o video Veo3 d·ª±a tr√™n n·ªôi dung th·ª±c t·∫ø...`);
        console.log(`üé¨ [Step 4] Prompt s·∫Ω g·ª≠i cho Veo3: "${bestPrompt}"`);
        const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                input: bestPrompt,
                prompt: bestPrompt
            })
        });
        
        const veo3Result = await veo3Response.json();
        if (!veo3Result.success) {
            throw new Error(`Kh√¥ng th·ªÉ t·∫°o video Veo3: ${veo3Result.message}`);
        }
        
        console.log(`‚úÖ [Step 4] Veo3 video t·∫°o th√†nh c√¥ng: ${veo3Result.operationName}`);
        console.log(`üìù [Step 4] Prompt d·ª±a tr√™n n·ªôi dung th·ª±c t·∫ø: ${bestPrompt.substring(0, 100)}...`);
        
        // Step 5: Ch·ªù video ho√†n th√†nh
        console.log(`‚è≥ [Step 5] Ch·ªù video Veo3 ho√†n th√†nh...`);
        let attempts = 0;
        const maxAttempts = 30; // 5 ph√∫t
        
        while (attempts < maxAttempts) {
            console.log(`‚è≥ [Step 5] Check status l·∫ßn ${attempts + 1}/${maxAttempts}...`);
            
            const statusResponse = await fetch(`${serverUrl}/api/check-status`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    operationName: veo3Result.operationName
                })
            });
            
            const statusResult = await statusResponse.json();
            if (!statusResult.success) {
                throw new Error(`Kh√¥ng th·ªÉ check status: ${statusResult.message}`);
            }
            
            console.log(`‚è≥ [Step 5] Status: ${statusResult.videoStatus}`);
            
            if (statusResult.videoStatus === 'COMPLETED') {
                console.log(`‚úÖ [Step 5] Video ho√†n th√†nh!`);
                console.log(`‚úÖ [Step 5] Video URL: ${statusResult.videoUrl}`);
                
                // Step 6: Download video
                console.log(`üì• [Step 6] Download video...`);
                const downloadResponse = await fetch(`${serverUrl}/api/tts/download`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        audioUrl: statusResult.videoUrl,
                        filename: outputFilename
                    })
                });
                
                const downloadResult = await downloadResponse.json();
                if (!downloadResult.success) {
                    throw new Error(`Kh√¥ng th·ªÉ download video: ${downloadResult.message}`);
                }
                
                console.log(`‚úÖ [Step 6] Video ƒë√£ download: ${downloadResult.filename}`);
                
                return {
                    success: true,
                    message: `ƒê√£ t·∫°o video 8s th√†nh c√¥ng`,
                    result: {
                        originalVideo: videoPath,
                        duration: 8,
                        veo3Operation: veo3Result.operationName,
                        videoUrl: statusResult.videoUrl,
                        downloadedFile: downloadResult.filename,
                        outputPath: downloadResult.path
                    }
                };
            }
            
            if (statusResult.videoStatus === 'FAILED') {
                throw new Error('Video Veo3 t·∫°o th·∫•t b·∫°i');
            }
            
            // Ch·ªù 10 gi√¢y tr∆∞·ªõc khi check l·∫°i
            await new Promise(resolve => setTimeout(resolve, 10000));
            attempts++;
        }
        
        throw new Error('Timeout: Video Veo3 kh√¥ng ho√†n th√†nh trong th·ªùi gian cho ph√©p');
        
    } catch (error) {
        console.error('‚ùå [createSimple8sVideo] L·ªói:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// API endpoint
async function createSimple8sVideoAPI(req, res) {
    try {
        console.log(`üé¨ [createSimple8sVideoAPI] B·∫Øt ƒë·∫ßu t·∫°o video 8s ƒë∆°n gi·∫£n...`);
        console.log(`üé¨ [createSimple8sVideoAPI] Request body:`, JSON.stringify(req.body, null, 2));
        console.log(`üé¨ [createSimple8sVideoAPI] ===== DEBUG START =====`);
        console.log(`üé¨ [createSimple8sVideoAPI] Function ƒë∆∞·ª£c g·ªçi!`);
        
        const { videoPath, outputFilename } = req.body;
        
        if (!videoPath) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu videoPath'
            });
        }
        
        // Ki·ªÉm tra file t·ªìn t·∫°i
        if (!fs.existsSync(videoPath)) {
            return res.status(404).json({
                success: false,
                message: 'Video file kh√¥ng t·ªìn t·∫°i'
            });
        }
        
        console.log(`üé¨ [createSimple8sVideoAPI] T·∫°o video 8s t·ª´: ${videoPath}`);
        
        const result = await createSimple8sVideo(videoPath, {
            outputFilename
        });
        
        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ t·∫°o video 8s',
                error: result.error
            });
        }
        
        return res.json({
            success: true,
            message: `ƒê√£ t·∫°o video 8s th√†nh c√¥ng`,
            result: {
                ...result.result,
                _debug: {
                    functionCalled: 'createSimple8sVideoAPI from veo3-simple-workflow.js - NEW VERSION WITH DEBUG',
                    timestamp: new Date().toISOString()
                }
            }
        });
        
    } catch (error) {
        console.error('‚ùå [createSimple8sVideoAPI] L·ªói:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói t·∫°o video 8s',
            error: error.message
        });
    }
}

module.exports = {
    createSimple8sVideo,
    createSimple8sVideoAPI
};
