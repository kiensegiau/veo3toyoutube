const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// Import c√°c function tr·ª±c ti·∫øp thay v√¨ qua API
const { getTranscript } = require('../transcript/transcript-management');
const { unifiedTTS } = require('../tts/vibee-tts');
const { mergeVideos } = require('./merge-videos');

// M·ªói video d√†i 8 gi√¢y
const VIDEO_DURATION = 8;

function ensureTempDir() {
    const tempDir = path.join(__dirname, '../../temp');
    if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
    }
    return tempDir;
}

function ensureOutputDir() {
    const outputDir = path.join(__dirname, '../../public/final-videos');
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }
    return outputDir;
}

async function getAudioDuration(audioPath) {
    try {
        const command = `ffprobe -v quiet -show_entries format=duration -of csv="p=0" "${audioPath}"`;
        const { stdout } = await execAsync(command);
        const duration = parseFloat(stdout.trim());
        return Math.ceil(duration); // L√†m tr√≤n l√™n
    } catch (error) {
        console.error('‚ùå [getAudioDuration] L·ªói:', error);
        throw new Error(`Kh√¥ng th·ªÉ l·∫•y th·ªùi l∆∞·ª£ng audio: ${error.message}`);
    }
}

async function muteVideo(inputPath, outputPath) {
    try {
        console.log(`üîá [muteVideo] T·∫Øt ti·∫øng video: ${inputPath} ‚Üí ${outputPath}`);
        const command = `ffmpeg -i "${inputPath}" -c:v copy -an "${outputPath}" -y`;
        const { stdout, stderr } = await execAsync(command);
        console.log(`‚úÖ [muteVideo] Ho√†n th√†nh t·∫Øt ti·∫øng`);
        return outputPath;
    } catch (error) {
        console.error('‚ùå [muteVideo] L·ªói:', error);
        throw new Error(`Kh√¥ng th·ªÉ t·∫Øt ti·∫øng video: ${error.message}`);
    }
}

async function replaceAudio(videoPath, audioPath, outputPath) {
    try {
        console.log(`üéµ [replaceAudio] Thay th·∫ø audio: ${videoPath} + ${audioPath} ‚Üí ${outputPath}`);
        const command = `ffmpeg -i "${videoPath}" -i "${audioPath}" -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 -shortest "${outputPath}" -y`;
        const { stdout, stderr } = await execAsync(command);
        console.log(`‚úÖ [replaceAudio] Ho√†n th√†nh thay th·∫ø audio`);
        return outputPath;
    } catch (error) {
        console.error('‚ùå [replaceAudio] L·ªói:', error);
        throw new Error(`Kh√¥ng th·ªÉ thay th·∫ø audio: ${error.message}`);
    }
}

async function createVideoFromYouTube(req, res) {
    try {
        const body = req.body || {};
        const youtubeUrl = body.youtubeUrl;
        const voice = body.voice || 'hn_female_ngochuyen_full_48k-fhg';
        const outputFilename = body.filename || `final_video_${Date.now()}.mp4`;
        
        if (!youtubeUrl) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu YouTube URL'
            });
        }
        
        console.log(`üé¨ [createVideoFromYouTube] B·∫Øt ƒë·∫ßu workflow cho: ${youtubeUrl}`);
        
        const tempDir = ensureTempDir();
        const outputDir = ensureOutputDir();
        const finalOutputPath = path.join(outputDir, outputFilename);
        
        const workflow = {
            youtubeUrl,
            voice,
            outputFilename,
            steps: {
                transcript: false,
                rewrite: false,
                audio: false,
                videoMerge: false,
                mute: false,
                final: false
            },
            files: {
                transcript: null,
                rewritten: null,
                audio: null,
                mergedVideo: null,
                mutedVideo: null,
                final: null
            },
            durations: {
                audio: 0,
                videoCount: 0
            }
        };
        
        // B∆∞·ªõc 1: L·∫•y transcript t·ª´ YouTube
        console.log(`üìù [Step 1] L·∫•y transcript t·ª´ YouTube...`);
        const transcriptReq = {
            body: { url: youtubeUrl }
        };
        const mockRes = {
            json: (data) => data,
            status: (code) => ({ json: (data) => data })
        };
        const transcriptResult = await getTranscript(transcriptReq, mockRes);
        if (!transcriptResult.success) {
            throw new Error('Kh√¥ng th·ªÉ l·∫•y transcript t·ª´ YouTube');
        }
        workflow.steps.transcript = true;
        workflow.files.transcript = transcriptResult.transcript;
        console.log(`‚úÖ [Step 1] ƒê√£ l·∫•y transcript (${transcriptResult.transcript.length} k√Ω t·ª±)`);
        
        // B∆∞·ªõc 2: Vi·∫øt l·∫°i transcript b·∫±ng ChatGPT
        console.log(`ü§ñ [Step 2] Vi·∫øt l·∫°i transcript b·∫±ng ChatGPT...`);
        // S·ª≠ d·ª•ng transcript tr·ª±c ti·∫øp thay v√¨ rewrite v√¨ kh√¥ng c√≥ OpenAI key
        // Gi·ªõi h·∫°n ƒë·ªô d√†i transcript ƒë·ªÉ tr√°nh l·ªói TTS v√† l√†m s·∫°ch k√Ω t·ª± ƒë·∫∑c bi·ªát
        let transcriptText = workflow.files.transcript;
        // Ki·ªÉm tra n·∫øu transcript l√† object th√¨ l·∫•y content
        if (typeof transcriptText === 'object' && transcriptText.content) {
            transcriptText = transcriptText.content;
        }
        // ƒê·∫£m b·∫£o transcriptText l√† string
        transcriptText = String(transcriptText || '');
        if (transcriptText.length > 200) {
            transcriptText = transcriptText.substring(0, 200) + '...';
            console.log(`‚ö†Ô∏è [Step 2] Gi·ªõi h·∫°n transcript t·ª´ ${workflow.files.transcript.length} xu·ªëng ${transcriptText.length} k√Ω t·ª±`);
        }
        // L√†m s·∫°ch k√Ω t·ª± ƒë·∫∑c bi·ªát c√≥ th·ªÉ g√¢y l·ªói TTS
        transcriptText = transcriptText.replace(/[^\w\s.,!?√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/gi, ' ');
        transcriptText = transcriptText.replace(/\s+/g, ' ').trim();
        workflow.steps.rewrite = true;
        workflow.files.rewritten = transcriptText; // S·ª≠ d·ª•ng transcript g·ªëc ƒë√£ gi·ªõi h·∫°n
        console.log(`‚úÖ [Step 2] S·ª≠ d·ª•ng transcript g·ªëc (${workflow.files.rewritten.length} k√Ω t·ª±)`);
        
        // B∆∞·ªõc 3: T·∫°o √¢m thanh b·∫±ng Vibee TTS
        console.log(`üéµ [Step 3] T·∫°o √¢m thanh b·∫±ng Vibee TTS...`);
        const ttsReq = {
            body: {
                text: workflow.files.rewritten,
                voice: voice,
                format: 'mp3',
                waitForCompletion: true,
                filename: `workflow_audio_${Date.now()}.mp3`
            }
        };
        const ttsResult = await unifiedTTS(ttsReq, mockRes);
        if (!ttsResult.success || !ttsResult.downloaded) {
            throw new Error('Kh√¥ng th·ªÉ t·∫°o √¢m thanh TTS');
        }
        workflow.steps.audio = true;
        workflow.files.audio = ttsResult.downloaded.path;
        console.log(`‚úÖ [Step 3] ƒê√£ t·∫°o √¢m thanh: ${ttsResult.downloaded.filename}`);
        
        // B∆∞·ªõc 4: L·∫•y th·ªùi l∆∞·ª£ng √¢m thanh v√† t√≠nh s·ªë video c·∫ßn
        console.log(`‚è±Ô∏è [Step 4] T√≠nh to√°n th·ªùi l∆∞·ª£ng v√† s·ªë video c·∫ßn...`);
        workflow.durations.audio = await getAudioDuration(workflow.files.audio);
        workflow.durations.videoCount = Math.ceil(workflow.durations.audio / VIDEO_DURATION);
        console.log(`üìä [Step 4] √Çm thanh: ${workflow.durations.audio}s, C·∫ßn ${workflow.durations.videoCount} video`);
        
        // B∆∞·ªõc 5: Gh√©p video ng·∫´u nhi√™n
        console.log(`üé¨ [Step 5] Gh√©p ${workflow.durations.videoCount} video ng·∫´u nhi√™n...`);
        const mergeReq = {
            body: {
                duration: workflow.durations.audio,
                filename: `workflow_merged_${Date.now()}.mp4`
            }
        };
        const mergeResult = await mergeVideos(mergeReq, mockRes);
        if (!mergeResult.success) {
            throw new Error('Kh√¥ng th·ªÉ gh√©p video');
        }
        workflow.steps.videoMerge = true;
        workflow.files.mergedVideo = mergeResult.output.path;
        console.log(`‚úÖ [Step 5] ƒê√£ gh√©p video: ${mergeResult.output.filename}`);
        
        // B∆∞·ªõc 6: T·∫Øt ti·∫øng video ƒë√£ gh√©p
        console.log(`üîá [Step 6] T·∫Øt ti·∫øng video...`);
        const mutedVideoPath = path.join(tempDir, `muted_${Date.now()}.mp4`);
        await muteVideo(workflow.files.mergedVideo, mutedVideoPath);
        workflow.steps.mute = true;
        workflow.files.mutedVideo = mutedVideoPath;
        console.log(`‚úÖ [Step 6] ƒê√£ t·∫Øt ti·∫øng video`);
        
        // B∆∞·ªõc 7: Thay th·∫ø audio b·∫±ng gi·ªçng Vibee
        console.log(`üéµ [Step 7] Thay th·∫ø audio b·∫±ng gi·ªçng Vibee...`);
        await replaceAudio(workflow.files.mutedVideo, workflow.files.audio, finalOutputPath);
        workflow.steps.final = true;
        workflow.files.final = finalOutputPath;
        console.log(`‚úÖ [Step 7] Ho√†n th√†nh video cu·ªëi c√πng!`);
        
        // D·ªçn d·∫πp file t·∫°m
        try {
            if (fs.existsSync(workflow.files.mutedVideo)) {
                fs.unlinkSync(workflow.files.mutedVideo);
            }
        } catch (err) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file t·∫°m:', err.message);
        }
        
        const finalStats = fs.statSync(finalOutputPath);
        const finalSizeMB = (finalStats.size / (1024 * 1024)).toFixed(2);
        
        console.log(`üéâ [createVideoFromYouTube] Ho√†n th√†nh workflow!`);
        console.log(`üìÅ File cu·ªëi: ${outputFilename} (${finalSizeMB}MB)`);
        
        return res.json({
            success: true,
            message: 'Ho√†n th√†nh t·∫°o video t·ª´ YouTube',
            workflow: {
                youtubeUrl,
                voice,
                outputFilename,
                steps: workflow.steps,
                durations: workflow.durations,
                files: {
                    final: {
                        filename: outputFilename,
                        path: finalOutputPath,
                        publicPath: `/final-videos/${outputFilename}`,
                        size: finalStats.size,
                        sizeMB: finalSizeMB
                    }
                }
            }
        });
        
    } catch (error) {
        console.error('‚ùå [createVideoFromYouTube] L·ªói:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói t·∫°o video t·ª´ YouTube: ' + error.message,
            error: error.message
        });
    }
}

module.exports = {
    createVideoFromYouTube
};
