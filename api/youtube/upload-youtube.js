const puppeteer = require('puppeteer-core');
const path = require('path');
const ChromeProfileManager = require('../../chrome-profile-manager');

// YouTube Upload Function
async function uploadToYouTube({
    videoPath,
    title = 'AI Generated Video',
    description = 'Generated by AI Video Generator',
    visibility = 'UNLISTED',
    debugMode = false,
    profileName = 'Default',
    customUserAgent,
    customViewport
}) {
    const logs = [];
    
    try {
        logs.push('üöÄ Starting YouTube upload process...');
        
        // T√¨m Chrome executable
        const chromeManager = new ChromeProfileManager();
        const chromePath = await chromeManager.findChromeExecutable();
        
        if (!chromePath) {
            throw new Error('Chrome executable not found');
        }
        
        logs.push(`üîç Using Chrome: ${chromePath}`);
        
        // Kh·ªüi ƒë·ªông browser v·ªõi profile s·∫°ch
        const profilePath = path.join(__dirname, '../../chrome-profile', profileName);
        const browser = await puppeteer.launch({
            executablePath: chromePath,
            userDataDir: profilePath,
            headless: false,
            args: [
                '--start-maximized',
                '--disable-blink-features=AutomationControlled',
                '--disable-features=VizDisplayCompositor',
                '--disable-extensions',
                '--no-first-run',
                '--disable-default-apps',
                '--disable-popup-blocking',
                '--disable-translate',
                '--disable-background-timer-throttling',
                '--disable-renderer-backgrounding',
                '--disable-backgrounding-occluded-windows',
                '--disable-client-side-phishing-detection',
                '--disable-sync',
                '--allow-running-insecure-content',
                '--disable-features=TranslateUI',
                '--disable-ipc-flooding-protection'
            ]
        });
        
        const page = await browser.newPage();
        
        // ·∫®n automation detection
        await page.evaluateOnNewDocument(() => {
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
            
            // Remove automation indicators
            delete window.navigator.__proto__.webdriver;
            
            // Mock plugins
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
            
            // Mock languages
            Object.defineProperty(navigator, 'languages', {
                get: () => ['en-US', 'en'],
            });
            
            // Mock permissions
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                    Promise.resolve({ state: Notification.permission }) :
                    originalQuery(parameters)
            );
        });
        
        // Set viewport
        if (customViewport) {
            await page.setViewport(customViewport);
        } else {
            await page.setViewport({ width: 1920, height: 1080 });
        }
        
        // Set user agent
        if (customUserAgent) {
            await page.setUserAgent(customUserAgent);
        }
        
        logs.push('üåê Navigating to YouTube Studio...');
        await page.goto('https://studio.youtube.com', { waitUntil: 'networkidle2' });
        
        // Wait for upload button
        logs.push('‚è≥ Waiting for upload button...');
        await page.waitForSelector('[aria-label="Create"]', { timeout: 10000 });
        await page.click('[aria-label="Create"]');
        
        // Wait for upload option
        await page.waitForSelector('text/Upload video', { timeout: 5000 });
        await page.click('text/Upload video');
        
        // Handle file input
        logs.push('üìÅ Selecting video file...');
        const fileInput = await page.waitForSelector('input[type="file"]', { timeout: 10000 });
        await fileInput.uploadFile(videoPath);
        
        // Wait for upload to start
        logs.push('‚è≥ Waiting for upload to start...');
        await page.waitForSelector('[aria-label="Title"]', { timeout: 30000 });
        
        // Fill title
        logs.push('üìù Setting video title...');
        await page.type('[aria-label="Title"]', title);
        
        // Fill description
        logs.push('üìù Setting video description...');
        const descriptionSelector = '[aria-label="Tell viewers about your video"]';
        await page.waitForSelector(descriptionSelector, { timeout: 5000 });
        await page.type(descriptionSelector, description);
        
        // Set visibility
        logs.push('üîí Setting video visibility...');
        await page.waitForSelector('[aria-label="Visibility"]', { timeout: 5000 });
        await page.click('[aria-label="Visibility"]');
        
        // Select visibility option
        const visibilityMap = {
            'PUBLIC': 'Public',
            'UNLISTED': 'Unlisted', 
            'PRIVATE': 'Private'
        };
        
        await page.waitForSelector(`text/${visibilityMap[visibility]}`, { timeout: 5000 });
        await page.click(`text/${visibilityMap[visibility]}`);
        
        // Publish video
        logs.push('üöÄ Publishing video...');
        await page.waitForSelector('[aria-label="Publish"]', { timeout: 5000 });
        await page.click('[aria-label="Publish"]');
        
        // Wait for success
        logs.push('‚è≥ Waiting for upload to complete...');
        await page.waitForSelector('text/Video published', { timeout: 60000 });
        
        // Get video URL
        const videoUrl = await page.url();
        const videoId = videoUrl.match(/\/watch\?v=([^&]+)/)?.[1];
        
        logs.push(`‚úÖ Video uploaded successfully!`);
        logs.push(`üîó Video URL: ${videoUrl}`);
        
        await browser.close();
        
        return {
            success: true,
            videoId: videoId,
            url: videoUrl,
            status: 'UPLOADED',
            logs: logs
        };
        
    } catch (error) {
        logs.push(`‚ùå Upload failed: ${error.message}`);
        return {
            success: false,
            error: error.message,
            logs: logs
        };
    }
}

// API endpoint handler
async function uploadYouTube(req, res) {
    try {
        const { 
            videoPath, 
            title, 
            description, 
            visibility, 
            debug, 
            profileName,
            customUserAgent,
            customViewport 
        } = req.body || {};
        
        if (!videoPath) {
            return res.status(400).json({ success: false, message: 'videoPath is required' });
        }
        
        const absPath = path.isAbsolute(videoPath) ? videoPath : path.join(__dirname, '../../', videoPath);
        const result = await uploadToYouTube({
            videoPath: absPath,
            title,
            description,
            visibility: visibility || 'UNLISTED',
            debugMode: Boolean(debug),
            profileName: profileName || 'Default',
            customUserAgent,
            customViewport
        });
        
        if (result.success) {
            return res.json({ 
                success: true, 
                videoId: result.videoId, 
                url: result.url, 
                status: result.status,
                logs: result.logs 
            });
        }
        
        return res.status(500).json({ success: false, error: result.error, logs: result.logs });
    } catch (e) {
        console.error('‚ùå Upload YouTube error:', e);
        res.status(500).json({ success: false, message: 'Upload failed', error: e.message });
    }
}

module.exports = { uploadYouTube };
