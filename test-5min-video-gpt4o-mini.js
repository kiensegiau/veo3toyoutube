const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// C·∫•u h√¨nh
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';
const VIDEO_PATH = './public/videos/mh370-5min-video.mp4'; // ƒê∆∞·ªùng d·∫´n video 5 ph√∫t
const OUTPUT_DIR = './temp/mh370-5min-test';
const SEGMENT_DURATION = 8; // 8 gi√¢y m·ªói segment

// T·∫°o th∆∞ m·ª•c output
if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

async function testVideoAnalysis() {
    console.log('üé¨ B·∫Øt ƒë·∫ßu test video 5 ph√∫t v·ªõi GPT-4o-mini...');
    console.log(`üìÅ Video: ${VIDEO_PATH}`);
    console.log(`üìÅ Output: ${OUTPUT_DIR}`);
    console.log(`‚è±Ô∏è  Chia th√†nh segments 8s m·ªói ƒëo·∫°n\n`);

    try {
        // B∆∞·ªõc 1: Ki·ªÉm tra video t·ªìn t·∫°i
        if (!fs.existsSync(VIDEO_PATH)) {
            console.error('‚ùå Video kh√¥ng t·ªìn t·∫°i:', VIDEO_PATH);
            return;
        }

        // B∆∞·ªõc 2: L·∫•y th√¥ng tin video
        console.log('üìä L·∫•y th√¥ng tin video...');
        const videoInfo = await getVideoInfo(VIDEO_PATH);
        console.log(`‚úÖ Video info: ${videoInfo.duration}s, ${videoInfo.width}x${videoInfo.height}, ${videoInfo.fps}fps`);

        // B∆∞·ªõc 3: Chia video th√†nh segments 8s
        console.log('\n‚úÇÔ∏è  Chia video th√†nh segments 8s...');
        const segments = await splitVideoIntoSegments(VIDEO_PATH, OUTPUT_DIR, SEGMENT_DURATION);
        console.log(`‚úÖ ƒê√£ t·∫°o ${segments.length} segments`);

        // B∆∞·ªõc 4: Ph√¢n t√≠ch t·ª´ng segment v·ªõi GPT-4o-mini
        console.log('\nüîç Ph√¢n t√≠ch t·ª´ng segment v·ªõi GPT-4o-mini...');
        const analysisResults = [];
        
        for (let i = 0; i < Math.min(segments.length, 5); i++) { // Test 5 segments ƒë·∫ßu ti√™n
            const segment = segments[i];
            console.log(`\nüìπ Ph√¢n t√≠ch segment ${i + 1}/${Math.min(segments.length, 5)}: ${segment.filename}`);
            
            try {
                const analysis = await analyzeSegmentWithGPT4oMini(segment.path, i);
                analysisResults.push({
                    segmentIndex: i,
                    segmentPath: segment.path,
                    analysis: analysis
                });
                console.log(`‚úÖ Ho√†n th√†nh ph√¢n t√≠ch segment ${i + 1}`);
            } catch (error) {
                console.error(`‚ùå L·ªói ph√¢n t√≠ch segment ${i + 1}:`, error.message);
                analysisResults.push({
                    segmentIndex: i,
                    segmentPath: segment.path,
                    error: error.message
                });
            }
        }

        // B∆∞·ªõc 5: L∆∞u k·∫øt qu·∫£
        const resultPath = path.join(OUTPUT_DIR, 'analysis-results.json');
        fs.writeFileSync(resultPath, JSON.stringify({
            videoInfo,
            segments: segments.slice(0, 5),
            analysisResults,
            timestamp: new Date().toISOString(),
            model: 'gpt-4o-mini'
        }, null, 2));

        console.log(`\n‚úÖ Ho√†n th√†nh test! K·∫øt qu·∫£ l∆∞u t·∫°i: ${resultPath}`);
        console.log(`üìä T·ªïng k·∫øt:`);
        console.log(`   - Video: ${videoInfo.duration}s`);
        console.log(`   - Segments: ${segments.length}`);
        console.log(`   - Ph√¢n t√≠ch: ${analysisResults.filter(r => !r.error).length}/${analysisResults.length}`);
        console.log(`   - Model: GPT-4o-mini`);

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
    }
}

async function getVideoInfo(videoPath) {
    return new Promise((resolve, reject) => {
        const ffprobe = spawn('ffprobe', [
            '-v', 'quiet',
            '-print_format', 'json',
            '-show_format',
            '-show_streams',
            videoPath
        ]);

        let output = '';
        ffprobe.stdout.on('data', (data) => {
            output += data.toString();
        });

        ffprobe.on('close', (code) => {
            if (code === 0) {
                try {
                    const info = JSON.parse(output);
                    const videoStream = info.streams.find(s => s.codec_type === 'video');
                    resolve({
                        duration: parseFloat(info.format.duration),
                        width: videoStream.width,
                        height: videoStream.height,
                        fps: eval(videoStream.r_frame_rate)
                    });
                } catch (error) {
                    reject(error);
                }
            } else {
                reject(new Error(`FFprobe failed with code ${code}`));
            }
        });
    });
}

async function splitVideoIntoSegments(videoPath, outputDir, segmentDuration) {
    return new Promise((resolve, reject) => {
        const segments = [];
        const totalDuration = 300; // 5 ph√∫t = 300 gi√¢y
        const numSegments = Math.ceil(totalDuration / segmentDuration);

        let completedSegments = 0;

        for (let i = 0; i < numSegments; i++) {
            const startTime = i * segmentDuration;
            const endTime = Math.min(startTime + segmentDuration, totalDuration);
            const filename = `segment_${i.toString().padStart(3, '0')}_${startTime}s-${endTime}s.mp4`;
            const segmentPath = path.join(outputDir, filename);

            const ffmpeg = spawn('ffmpeg', [
                '-i', videoPath,
                '-ss', startTime.toString(),
                '-t', (endTime - startTime).toString(),
                '-c', 'copy',
                '-avoid_negative_ts', 'make_zero',
                segmentPath
            ]);

            ffmpeg.on('close', (code) => {
                if (code === 0) {
                    segments.push({
                        index: i,
                        startTime,
                        endTime,
                        duration: endTime - startTime,
                        filename,
                        path: segmentPath
                    });
                    completedSegments++;

                    if (completedSegments === numSegments) {
                        resolve(segments);
                    }
                } else {
                    reject(new Error(`FFmpeg failed for segment ${i}`));
                }
            });
        }
    });
}

async function analyzeSegmentWithGPT4oMini(segmentPath, segmentIndex) {
    // Tr√≠ch xu·∫•t frames t·ª´ segment
    const framesDir = path.join(OUTPUT_DIR, `frames_${segmentIndex}`);
    if (!fs.existsSync(framesDir)) {
        fs.mkdirSync(framesDir, { recursive: true });
    }

    // Tr√≠ch xu·∫•t 8 frames (1 frame m·ªói gi√¢y)
    await extractFrames(segmentPath, framesDir, 1);

    // L·∫•y danh s√°ch frames
    const frameFiles = fs.readdirSync(framesDir)
        .filter(f => f.endsWith('.jpg'))
        .sort()
        .slice(0, 8); // Ch·ªâ l·∫•y 8 frames ƒë·∫ßu

    // Chu·∫©n b·ªã messages cho GPT-4o-mini
    const messages = [
        {
            role: 'system',
            content: `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch video cho Veo3. Ph√¢n t√≠ch c√°c frames t·ª´ video segment v√† t·∫°o m√¥ t·∫£ chi ti·∫øt cho vi·ªác t·∫°o video m·ªõi.

Nhi·ªám v·ª•:
1. Ph√¢n t√≠ch n·ªôi dung visual c·ªßa t·ª´ng frame
2. X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ, c·∫£m x√∫c, v√† phong c√°ch
3. M√¥ t·∫£ chi ti·∫øt v·ªÅ camera movement, lighting, composition
4. T·∫°o prompt JSON cho Veo3 ƒë·ªÉ t·∫°o video t∆∞∆°ng t·ª±

Format output:
{
    "overallTheme": "ch·ªß ƒë·ªÅ t·ªïng th·ªÉ",
    "visualStyle": "phong c√°ch visual",
    "cameraMovement": "chuy·ªÉn ƒë·ªông camera",
    "lighting": "√°nh s√°ng",
    "composition": "b·ªë c·ª•c",
    "emotion": "c·∫£m x√∫c",
    "veo3Prompt": "prompt chi ti·∫øt cho Veo3",
    "timeline": [
        {
            "timeStart": 0,
            "timeEnd": 2,
            "action": "m√¥ t·∫£ h√†nh ƒë·ªông",
            "cameraStyle": "g√≥c m√°y quay",
            "soundFocus": "√¢m thanh",
            "visualDetails": "chi ti·∫øt visual"
        }
    ]
}`
        },
        {
            role: 'user',
            content: `Ph√¢n t√≠ch ${frameFiles.length} frames t·ª´ video segment ${segmentIndex}. M·ªói frame ƒë·∫°i di·ªán cho 1 gi√¢y c·ªßa video 8 gi√¢y.`
        }
    ];

    // Th√™m frames v√†o messages
    for (const frameFile of frameFiles) {
        const framePath = path.join(framesDir, frameFile);
        const frameData = fs.readFileSync(framePath);
        const base64 = frameData.toString('base64');
        
        messages.push({
            role: 'user',
            content: [
                {
                    type: 'text',
                    text: `Frame ${frameFile} (gi√¢y ${frameFiles.indexOf(frameFile) + 1}):`
                },
                {
                    type: 'image_url',
                    image_url: {
                        url: `data:image/jpeg;base64,${base64}`
                    }
                }
            ]
        });
    }

    // G·ªçi API GPT-4o-mini
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: messages,
            max_tokens: 2000,
            temperature: 0.7
        })
    });

    const data = await response.json();
    
    if (data.choices && data.choices[0] && data.choices[0].message) {
        const analysisText = data.choices[0].message.content;
        
        try {
            // Th·ª≠ parse JSON t·ª´ response
            const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                return JSON.parse(jsonMatch[0]);
            } else {
                return { rawAnalysis: analysisText };
            }
        } catch (error) {
            return { rawAnalysis: analysisText, parseError: error.message };
        }
    } else {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response t·ª´ GPT-4o-mini');
    }
}

async function extractFrames(videoPath, outputDir, interval) {
    return new Promise((resolve, reject) => {
        const ffmpeg = spawn('ffmpeg', [
            '-i', videoPath,
            '-vf', `fps=1/${interval}`,
            '-q:v', '2',
            path.join(outputDir, 'frame_%03d.jpg')
        ]);

        ffmpeg.on('close', (code) => {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error(`FFmpeg frame extraction failed with code ${code}`));
            }
        });
    });
}

// Ch·∫°y test
if (require.main === module) {
    testVideoAnalysis().catch(console.error);
}

module.exports = { testVideoAnalysis };
















