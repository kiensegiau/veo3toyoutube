const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

/**
 * T·∫°o video ho√†n thi·ªán MH370 v·ªõi ƒë·∫ßy ƒë·ªß th·ªùi gian
 */
async function createMH370CompleteVideo() {
    try {
        console.log('üöÄ [MH370] T·∫°o video ho√†n thi·ªán MH370...');
        
        const serverUrl = 'http://localhost:8888';
        const youtubeUrl = 'https://youtu.be/52ru0qDc0LQ?si=zahSVRyDiQy7Jd6H';
        const outputDir = './temp/mh370-complete-video';
        
        // T·∫°o th∆∞ m·ª•c output
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        // Step 1: L·∫•y transcript t·ª´ YouTube
        console.log('üìù [Step 1] L·∫•y transcript t·ª´ YouTube MH370...');
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                url: youtubeUrl,
                lang: 'vi'
            })
        });
        
        const transcriptResult = await transcriptResponse.json();
        console.log('üìù [Step 1] Transcript result:', transcriptResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!transcriptResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y transcript: ${transcriptResult.message}`);
        }
        
        const transcriptText = typeof transcriptResult.transcript === 'string' ? 
            transcriptResult.transcript : 
            JSON.stringify(transcriptResult.transcript);
        
        console.log(`üìù [Step 1] Transcript: ${transcriptText.substring(0, 300)}...`);
        
        // Step 2: ChatGPT t·∫°o prompt cho video ho√†n thi·ªán
        console.log('ü§ñ [Step 2] ChatGPT t·∫°o prompt cho video ho√†n thi·ªán...');
        
        const chatGPTResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    { 
                        role: "system", 
                        content: `B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3 v·ªõi kh·∫£ nƒÉng t·∫°o h√¨nh ·∫£nh ƒë·ªìng nh·∫•t v√† li·ªÅn m·∫°ch.

QUAN TR·ªåNG: KH√îNG BAO GI·ªú th√™m b·∫•t c·ª© ch·ªØ, text, subtitle, ho·∫∑c vƒÉn b·∫£n n√†o v√†o video. Ch·ªâ t·∫°o video thu·∫ßn t√∫y v·ªõi h√¨nh ·∫£nh.

Nhi·ªám v·ª•: Ph√¢n t√≠ch chi ti·∫øt transcript v·ªÅ MH370 v√† t·∫°o 1 prompt duy nh·∫•t cho video ho√†n thi·ªán v·ªõi:

Y√äU C·∫¶U CHI TI·∫æT:
1. PH√ÇN T√çCH TRANSCRIPT: ƒê·ªçc k·ªπ t·ª´ng c√¢u, x√°c ƒë·ªãnh:
   - S·ª± ki·ªán ch√≠nh theo th·ªùi gian
   - ƒê·ªãa ƒëi·ªÉm, nh√¢n v·∫≠t, t√¨nh hu·ªëng
   - C·∫£m x√∫c, t√¥ng ƒëi·ªáu c·ªßa c√¢u chuy·ªán
   - Chi ti·∫øt k·ªπ thu·∫≠t, d·ªØ li·ªáu

2. T·∫†O C√ÇU CHUY·ªÜN LOGIC V·ªÄ MH370:
   - M·ªü ƒë·∫ßu: MH370 c·∫•t c√°nh t·ª´ Kuala Lumpur, m·∫•t t√≠ch
   - Ph√°t tri·ªÉn: ƒêi·ªÅu tra radar, d·ªØ li·ªáu v·ªá tinh MH370
   - Cao tr√†o: T√¨m ki·∫øm MH370 ·ªü ·∫§n ƒê·ªô D∆∞∆°ng, Ocean Infinity
   - K·∫øt th√∫c: Hi·ªán tr·∫°ng t√¨m ki·∫øm MH370, hy v·ªçng

3. H√åNH ·∫¢NH C·ª§ TH·ªÇ V·ªÄ MH370:
   - Video PH·∫¢I li√™n quan tr·ª±c ti·∫øp ƒë·∫øn MH370
   - Boeing 777-200ER (lo·∫°i m√°y bay MH370)
   - S√¢n bay Kuala Lumpur (n∆°i MH370 c·∫•t c√°nh)
   - ·∫§n ƒê·ªô D∆∞∆°ng (n∆°i t√¨m ki·∫øm MH370)
   - D·ªØ li·ªáu radar, v·ªá tinh v·ªÅ MH370
   - Camera work: angles, movements, transitions
   - Lighting: mood, atmosphere, color temperature

4. T√çNH NH·∫§T QU√ÅN:
   - M√†u s·∫Øc: Xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng, x√°m
   - Phong c√°ch: T√†i li·ªáu ƒëi·ªÅu tra chuy√™n nghi·ªáp v·ªÅ MH370
   - Chuy·ªÉn ti·∫øp: Logic t·ª´ m·ªü ƒë·∫ßu ƒë·∫øn k·∫øt th√∫c

5. TUY·ªÜT ƒê·ªêI KH√îNG C√ì CH·ªÆ, TEXT, SUBTITLE, VƒÇN B·∫¢N N√ÄO

QUAN TR·ªåNG: T·∫†O 1 PROMPT DUY NH·∫§T CHO VIDEO HO√ÄN THI·ªÜN - KH√îNG PH·∫¢I SEGMENTS!

Tr·∫£ v·ªÅ JSON format:
{
    "overallTheme": "Ch·ªß ƒë·ªÅ t·ªïng th·ªÉ d·ª±a tr√™n transcript",
    "colorScheme": "B·∫£ng m√†u ch√≠nh",
    "visualStyle": "Phong c√°ch visual",
    "storyline": "C·ªët truy·ªán logic d·ª±a tr√™n transcript",
    "videoPrompt": "Prompt chi ti·∫øt cho Veo3 t·∫°o video ho√†n thi·ªán - KH√îNG C√ì CH·ªÆ"
}` 
                    },
                    { 
                        role: "user", 
                        content: `Ph√¢n t√≠ch chi ti·∫øt transcript v·ªÅ MH370 v√† t·∫°o 1 prompt cho video ho√†n thi·ªán:

TRANSCRIPT:
${transcriptText}

Y√äU C·∫¶U CHI TI·∫æT:
1. PH√ÇN T√çCH TRANSCRIPT: ƒê·ªçc k·ªπ t·ª´ng c√¢u, x√°c ƒë·ªãnh:
   - S·ª± ki·ªán ch√≠nh theo th·ªùi gian
   - ƒê·ªãa ƒëi·ªÉm, nh√¢n v·∫≠t, t√¨nh hu·ªëng
   - C·∫£m x√∫c, t√¥ng ƒëi·ªáu c·ªßa c√¢u chuy·ªán
   - Chi ti·∫øt k·ªπ thu·∫≠t, d·ªØ li·ªáu

2. T·∫†O C√ÇU CHUY·ªÜN LOGIC V·ªÄ MH370:
   - M·ªü ƒë·∫ßu: MH370 c·∫•t c√°nh t·ª´ Kuala Lumpur, m·∫•t t√≠ch
   - Ph√°t tri·ªÉn: ƒêi·ªÅu tra radar, d·ªØ li·ªáu v·ªá tinh MH370
   - Cao tr√†o: T√¨m ki·∫øm MH370 ·ªü ·∫§n ƒê·ªô D∆∞∆°ng, Ocean Infinity
   - K·∫øt th√∫c: Hi·ªán tr·∫°ng t√¨m ki·∫øm MH370, hy v·ªçng

3. H√åNH ·∫¢NH C·ª§ TH·ªÇ V·ªÄ MH370:
   - Video PH·∫¢I li√™n quan tr·ª±c ti·∫øp ƒë·∫øn MH370
   - Boeing 777-200ER (lo·∫°i m√°y bay MH370)
   - S√¢n bay Kuala Lumpur (n∆°i MH370 c·∫•t c√°nh)
   - ·∫§n ƒê·ªô D∆∞∆°ng (n∆°i t√¨m ki·∫øm MH370)
   - D·ªØ li·ªáu radar, v·ªá tinh v·ªÅ MH370
   - Camera work: angles, movements, transitions
   - Lighting: mood, atmosphere, color temperature

4. T√çNH NH·∫§T QU√ÅN:
   - M√†u s·∫Øc: Xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng, x√°m
   - Phong c√°ch: T√†i li·ªáu ƒëi·ªÅu tra chuy√™n nghi·ªáp v·ªÅ MH370
   - Chuy·ªÉn ti·∫øp: Logic t·ª´ m·ªü ƒë·∫ßu ƒë·∫øn k·∫øt th√∫c

5. TUY·ªÜT ƒê·ªêI KH√îNG C√ì CH·ªÆ, TEXT, SUBTITLE, VƒÇN B·∫¢N N√ÄO

QUAN TR·ªåNG: T·∫†O 1 PROMPT DUY NH·∫§T CHO VIDEO HO√ÄN THI·ªÜN - KH√îNG PH·∫¢I SEGMENTS!

H√£y ph√¢n t√≠ch transcript v√† t·∫°o 1 prompt chi ti·∫øt cho video ho√†n thi·ªán v·ªÅ MH370.` 
                    }
                ],
                max_tokens: 3000,
                temperature: 0.7
            })
        });
        
        const chatGPTResult = await chatGPTResponse.json();
        console.log('ü§ñ [Step 2] ChatGPT result:', chatGPTResult.choices ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!chatGPTResult.choices) {
            console.error('‚ùå [Step 2] ChatGPT API Error:', chatGPTResult);
            throw new Error('ChatGPT kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£');
        }
        
        if (chatGPTResult.error) {
            console.error('‚ùå [Step 2] ChatGPT API Error:', chatGPTResult.error);
            throw new Error(`ChatGPT API Error: ${chatGPTResult.error.message}`);
        }
        
        const analysisText = chatGPTResult.choices[0].message.content;
        console.log(`ü§ñ [Step 2] Ph√¢n t√≠ch ho√†n ch·ªânh:`);
        console.log(analysisText);
        
        // Parse JSON t·ª´ response
        let analysis;
        try {
            console.log(`üîç [Step 2] ƒêang ph√¢n t√≠ch response t·ª´ ChatGPT...`);
            
            const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const jsonString = jsonMatch[0];
                console.log(`üîç [Step 2] T√¨m th·∫•y JSON, ƒëang parse...`);
                
                analysis = JSON.parse(jsonString);
                console.log(`‚úÖ [Step 2] ChatGPT ph√¢n t√≠ch th√†nh c√¥ng!`);
                console.log(`‚úÖ [Step 2] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
                console.log(`‚úÖ [Step 2] M√†u s·∫Øc: ${analysis.colorScheme}`);
                console.log(`‚úÖ [Step 2] Phong c√°ch: ${analysis.visualStyle}`);
                console.log(`‚úÖ [Step 2] C·ªët truy·ªán: ${analysis.storyline || 'N/A'}`);
                console.log(`‚úÖ [Step 2] Video prompt: ${analysis.videoPrompt ? analysis.videoPrompt.substring(0, 200) + '...' : 'N/A'}`);
            } else {
                console.warn(`‚ö†Ô∏è [Step 2] Kh√¥ng t√¨m th·∫•y JSON trong response ChatGPT`);
                console.warn(`‚ö†Ô∏è [Step 2] Response content: ${analysisText.substring(0, 200)}...`);
                throw new Error('No JSON found in ChatGPT response');
            }
        } catch (parseError) {
            console.error(`‚ùå [Step 2] L·ªói parse ChatGPT response: ${parseError.message}`);
            console.error(`‚ùå [Step 2] ChatGPT response: ${analysisText.substring(0, 300)}...`);
            
            // Th·ª≠ l·∫°i ChatGPT l·∫ßn n·ªØa v·ªõi prompt ƒë∆°n gi·∫£n h∆°n
            console.log(`üîÑ [Step 2] Th·ª≠ l·∫°i ChatGPT v·ªõi prompt ƒë∆°n gi·∫£n h∆°n...`);
            
            try {
                const retryResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${OPENAI_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o-mini',
                        messages: [
                            { 
                                role: "system", 
                                content: `T·∫°o 1 prompt video ho√†n thi·ªán v·ªÅ MH370 d·ª±a tr√™n transcript. Tr·∫£ v·ªÅ JSON format:
{
    "overallTheme": "Ch·ªß ƒë·ªÅ",
    "colorScheme": "M√†u s·∫Øc", 
    "visualStyle": "Phong c√°ch",
    "videoPrompt": "Prompt cho Veo3 - KH√îNG C√ì CH·ªÆ"
}` 
                            },
                            { 
                                role: "user", 
                                content: `D·ª±a tr√™n transcript n√†y, t·∫°o 1 prompt video ho√†n thi·ªán v·ªÅ MH370:

TRANSCRIPT:
${transcriptText}

Y√™u c·∫ßu: Video t√†i li·ªáu ƒëi·ªÅu tra MH370, m√†u xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng. KH√îNG C√ì CH·ªÆ, TEXT, SUBTITLE.` 
                            }
                        ],
                        max_tokens: 2000,
                        temperature: 0.5
                    })
                });
                
                const retryResult = await retryResponse.json();
                
                if (retryResult.choices && !retryResult.error) {
                    const retryText = retryResult.choices[0].message.content;
                    console.log(`üîÑ [Step 2] ChatGPT retry response: ${retryText.substring(0, 200)}...`);
                    
                    const retryJsonMatch = retryText.match(/\{[\s\S]*\}/);
                    if (retryJsonMatch) {
                        analysis = JSON.parse(retryJsonMatch[0]);
                        console.log(`‚úÖ [Step 2] ChatGPT retry th√†nh c√¥ng!`);
                        console.log(`‚úÖ [Step 2] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
                        console.log(`‚úÖ [Step 2] Video prompt: ${analysis.videoPrompt ? analysis.videoPrompt.substring(0, 200) + '...' : 'N/A'}`);
                    } else {
                        throw new Error('Retry response kh√¥ng c√≥ JSON');
                    }
                } else {
                    throw new Error('ChatGPT retry th·∫•t b·∫°i');
                }
                
            } catch (retryError) {
                console.error(`‚ùå [Step 2] ChatGPT retry c≈©ng th·∫•t b·∫°i: ${retryError.message}`);
                throw new Error(`ChatGPT kh√¥ng th·ªÉ x·ª≠ l√Ω transcript sau 2 l·∫ßn th·ª≠: ${parseError.message}`);
            }
        }
        
        // Step 3: T·∫°o video Veo3 ho√†n thi·ªán
        console.log('üé¨ [Step 3] T·∫°o video Veo3 ho√†n thi·ªán...');
        
        // T·∫°o prompt chi ti·∫øt h∆°n v·ªõi th√¥ng tin t·ª´ analysis
        const enhancedPrompt = `MH370 INVESTIGATION DOCUMENTARY - ${analysis.videoPrompt}

MH370 SPECIFIC REQUIREMENTS:
- MUST be about Malaysia Airlines flight MH370 disappearance
- MUST show Boeing 777-200ER aircraft (MH370's aircraft type)
- MUST relate to the 2014 disappearance and ongoing investigation
- MUST include MH370-specific elements: Kuala Lumpur airport, Indian Ocean search, satellite data, Ocean Infinity search
- MUST be a complete documentary video with smooth transitions
- MUST tell the complete story from takeoff to current search status

VIDEO DETAILS:
- Theme: ${analysis.overallTheme}
- Color Scheme: ${analysis.colorScheme}
- Visual Style: ${analysis.visualStyle}
- Storyline: ${analysis.storyline}

CRITICAL: NO TEXT, NO SUBTITLES, NO WORDS - PURE VISUAL STORYTELLING ONLY - MUST BE ABOUT MH370`;

        console.log(`üé¨ [Step 3] Enhanced prompt: ${enhancedPrompt.substring(0, 300)}...`);
        
        try {
            const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    input: enhancedPrompt,
                    prompt: enhancedPrompt
                })
            });
            
            const veo3Result = await veo3Response.json();
            
            if (veo3Result.success) {
                console.log(`‚úÖ [Step 3] Video Veo3: ${veo3Result.operationName}`);
                
                // L∆∞u k·∫øt qu·∫£ ho√†n ch·ªânh
                const finalResult = {
                    timestamp: new Date().toISOString(),
                    youtubeUrl: youtubeUrl,
                    transcript: transcriptText,
                    overallTheme: analysis.overallTheme,
                    colorScheme: analysis.colorScheme,
                    visualStyle: analysis.visualStyle,
                    storyline: analysis.storyline,
                    videoPrompt: analysis.videoPrompt,
                    enhancedPrompt: enhancedPrompt,
                    operationId: veo3Result.operationName,
                    outputDir: outputDir,
                    note: "VIDEO HO√ÄN THI·ªÜN - KH√îNG C√ì CH·ªÆ - CH·ªà VIDEO THU·∫¶N T√öY"
                };
                
                const resultPath = path.join(outputDir, 'mh370-complete-video-result.json');
                fs.writeFileSync(resultPath, JSON.stringify(finalResult, null, 2));
                
                console.log(`üìä [Step 3] ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${resultPath}`);
                
                console.log('üéâ [MH370] Ho√†n th√†nh t·∫°o video ho√†n thi·ªán!');
                console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
                console.log(`üéâ [MH370] M√†u s·∫Øc: ${analysis.colorScheme}`);
                console.log(`üéâ [MH370] Operation ID: ${veo3Result.operationName}`);
                console.log(`‚è≥ [MH370] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
                console.log(`üìù [MH370] L∆ØU √ù: Video n√†y KH√îNG C√ì CH·ªÆ, ch·ªâ c√≥ h√¨nh ·∫£nh thu·∫ßn t√∫y`);
                
                return {
                    success: true,
                    result: finalResult
                };
                
            } else {
                throw new Error(`Veo3 th·∫•t b·∫°i: ${veo3Result.message}`);
            }
            
        } catch (error) {
            console.log(`‚ùå [Step 3] Veo3 l·ªói: ${error.message}`);
            throw error;
        }
        
    } catch (error) {
        console.error(`‚ùå [MH370] L·ªói:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

console.log('üöÄ [START] T·∫°o video ho√†n thi·ªán MH370...');
createMH370CompleteVideo().then(result => {
    if (result.success) {
        console.log('üéâ [MH370] Ho√†n th√†nh th√†nh c√¥ng!');
        console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${result.result.overallTheme}`);
        console.log(`üéâ [MH370] Operation ID: ${result.result.operationId}`);
        console.log(`üìù [MH370] L∆ØU √ù: Video n√†y KH√îNG C√ì CH·ªÆ, ch·ªâ c√≥ h√¨nh ·∫£nh thu·∫ßn t√∫y`);
    } else {
        console.log(`‚ùå [MH370] Th·∫•t b·∫°i: ${result.error}`);
    }
});



