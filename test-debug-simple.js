const fetch = require('node-fetch');

async function testDebugSimple() {
    try {
        console.log('üîç [testDebugSimple] Test debug simple workflow...');
        
        const serverUrl = 'http://localhost:8888';
        
        // Test ph√¢n t√≠ch video tr∆∞·ªõc
        console.log('\nüîç [Step 1] Test ph√¢n t√≠ch video...');
        const analyzeResponse = await fetch(`${serverUrl}/api/analyze-second-by-second`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                videoPath: './test.mp4',
                startSecond: 0,
                duration: 8
            })
        });
        
        const analyzeResult = await analyzeResponse.json();
        console.log('üîç [Step 1] Analyze result:', analyzeResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (analyzeResult.success) {
            console.log('üîç [Step 1] Detailed analysis length:', analyzeResult.detailedAnalysis.length);
            
            // T√¨m prompt t·ªët nh·∫•t
            let bestPrompt = null;
            console.log('üîç [Step 1] Debug - T·∫•t c·∫£ prompts c√≥ s·∫µn:');
            for (let i = 0; i < analyzeResult.detailedAnalysis.length; i++) {
                const analysis = analyzeResult.detailedAnalysis[i];
                if (analysis.analysis && analysis.analysis.veo3_prompt) {
                    console.log(`üîç [Step 1] Gi√¢y ${analysis.second}: ${analysis.analysis.veo3_prompt.substring(0, 100)}...`);
                    
                    if (!bestPrompt && 
                        !analysis.analysis.veo3_prompt.includes('Create a professional video scene') &&
                        !analysis.analysis.veo3_prompt.includes('technology and AI concepts') &&
                        analysis.analysis.veo3_prompt.length > 50) {
                        bestPrompt = analysis.analysis.veo3_prompt;
                        console.log(`‚úÖ [Step 1] T√¨m th·∫•y prompt t·ªët t·ª´ gi√¢y ${analysis.second}`);
                    }
                }
            }
            
            if (bestPrompt) {
                console.log(`üé¨ [Step 1] Prompt t·ªët nh·∫•t: ${bestPrompt.substring(0, 100)}...`);
            } else {
                console.log(`‚ö†Ô∏è [Step 1] Kh√¥ng t√¨m th·∫•y prompt t·ªët`);
            }
        }
        
    } catch (error) {
        console.error('\n‚ùå [EXCEPTION] L·ªói:', error.message);
    }
}

console.log('üöÄ [START] B·∫Øt ƒë·∫ßu debug simple workflow...');
testDebugSimple();
