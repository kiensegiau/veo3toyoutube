const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

// Video Configuration
const SEGMENT_DURATION = 8; // M·ªói segment 8 gi√¢y
const WORDS_PER_SEGMENT = 50; // S·ªë t·ª´ ∆∞·ªõc t√≠nh cho 8 gi√¢y (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)

// Cache cookie
let cachedCookie = null;
let cookieCacheTime = 0;
const COOKIE_CACHE_DURATION = 30 * 60 * 1000; // 30 ph√∫t

/**
 * ƒê·ªçc cookie t·ª´ file labs-cookies.txt
 */
function readCookieFromFile() {
    try {
        const cookieFilePath = path.join(__dirname, 'labs-cookies.txt');
        if (!fs.existsSync(cookieFilePath)) {
            console.log('‚ùå File labs-cookies.txt kh√¥ng t·ªìn t·∫°i');
            return null;
        }
        const content = fs.readFileSync(cookieFilePath, 'utf8');
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            if (line.trim() && !line.startsWith('#')) {
                console.log(`‚úÖ ƒê·ªçc cookie t·ª´ file labs-cookies.txt`);
                return line.trim();
            }
        }
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y cookies trong file');
        return null;
    } catch (error) {
        console.error('‚ùå L·ªói ƒë·ªçc cookie t·ª´ file:', error.message);
        return null;
    }
}

/**
 * L·∫•y cookie t·ª´ cache ho·∫∑c fetch m·ªõi
 */
async function getCachedOrFreshCookie(serverUrl) {
    const now = Date.now();
    if (cachedCookie && (now - cookieCacheTime) < COOKIE_CACHE_DURATION) {
        console.log(`üç™ S·ª≠ d·ª•ng cached cookie (c√≤n ${Math.floor((COOKIE_CACHE_DURATION - (now - cookieCacheTime)) / 1000 / 60)} ph√∫t)`);
        return cachedCookie;
    }
    console.log(`üîÑ L·∫•y cookie m·ªõi t·ª´ server...`);
    try {
        const response = await fetch(`${serverUrl}/api/labs/get-cookies`, { method: 'GET' });
        const result = await response.json();
        if (result.success && result.cookies) {
            cachedCookie = result.cookies;
            cookieCacheTime = now;
            console.log(`‚úÖ ƒê√£ cache cookie m·ªõi t·ª´ server`);
            return cachedCookie;
        } else {
            throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c cookie t·ª´ server');
        }
    } catch (error) {
        console.error(`‚ùå L·ªói l·∫•y cookie t·ª´ server:`, error.message);
        console.log(`üîÑ Th·ª≠ l·∫•y cookie t·ª´ file labs-cookies.txt...`);
        const cookieFromFile = readCookieFromFile();
        if (cookieFromFile) {
            cachedCookie = cookieFromFile;
            cookieCacheTime = now;
            console.log(`‚úÖ S·ª≠ d·ª•ng cookie t·ª´ file labs-cookies.txt`);
            return cachedCookie;
        } else {
            console.error(`‚ùå Kh√¥ng th·ªÉ l·∫•y cookie t·ª´ c·∫£ server v√† file txt`);
            return null;
        }
    }
}

/**
 * Chia transcript th√†nh c√°c ƒëo·∫°n theo s·ªë t·ª´
 */
function splitTranscriptIntoSegments(transcriptText, wordsPerSegment = WORDS_PER_SEGMENT) {
    // T√°ch th√†nh c√°c t·ª´
    const words = transcriptText.trim().split(/\s+/);
    const segments = [];
    
    for (let i = 0; i < words.length; i += wordsPerSegment) {
        const segmentWords = words.slice(i, i + wordsPerSegment);
        const segmentText = segmentWords.join(' ');
        
        segments.push({
            index: segments.length,
            text: segmentText,
            wordCount: segmentWords.length,
            startWord: i,
            endWord: Math.min(i + wordsPerSegment, words.length)
        });
    }
    
    console.log(`üìù ƒê√£ chia transcript th√†nh ${segments.length} segments (${wordsPerSegment} t·ª´/segment)`);
    return segments;
}

/**
 * T·∫°o prompt v·ªõi voice-over cho Veo3
 */
function createPromptWithVoiceOver(visualPrompt, voiceOverText, theme, colorScheme, style) {
    // Format: [Voice-over: "text"] + Visual description
    const voiceOverSection = `[Voice-over in Vietnamese: "${voiceOverText}"]`;
    const contextSection = `[Context: ${theme}. Style: ${style}. Colors: ${colorScheme}]`;
    const visualSection = visualPrompt;

    return `${voiceOverSection} ${contextSection} ${visualSection}`;
}

/**
 * T·∫°o video t·ª´ transcript v·ªõi voice-over
 */
async function createVideoFromTranscript() {
    try {
        const serverUrl = 'http://localhost:8888';
        const youtubeUrl = 'https://youtu.be/52ru0qDc0LQ?si=zahSVRyDiQy7Jd6H';

        // Extract video ID
        const videoIdMatch = youtubeUrl.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/);
        const videoId = videoIdMatch ? videoIdMatch[1] : null;

        if (!videoId) {
            throw new Error('Kh√¥ng th·ªÉ extract video ID t·ª´ URL');
        }

        const outputDir = `./temp/youtube-transcript-video`;
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }

        // Step 1: L·∫•y transcript t·ª´ YouTube
        console.log('üìù [Step 1] L·∫•y transcript t·ª´ YouTube...');
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                url: youtubeUrl,
                lang: 'vi'
            })
        });
        
        const transcriptResult = await transcriptResponse.json();
        console.log('üìù [Step 1] Transcript result:', transcriptResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!transcriptResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y transcript: ${transcriptResult.message}`);
        }
        
        const transcriptText = typeof transcriptResult.transcript === 'string' ? 
            transcriptResult.transcript : 
            JSON.stringify(transcriptResult.transcript);
        
        console.log(`üìù [Step 1] Transcript length: ${transcriptText.length} k√Ω t·ª±`);
        console.log(`üìù [Step 1] Preview: ${transcriptText.substring(0, 200)}...`);

        // Step 2: Chia transcript th√†nh c√°c segments
        console.log('\nüìä [Step 2] Chia transcript th√†nh segments...');
        const transcriptSegments = splitTranscriptIntoSegments(transcriptText, WORDS_PER_SEGMENT);
        
        console.log(`üìä [Step 2] T·ªïng s·ªë segments: ${transcriptSegments.length}`);
        console.log(`üìä [Step 2] ∆Ø·ªõc t√≠nh th·ªùi l∆∞·ª£ng video: ${transcriptSegments.length * SEGMENT_DURATION}s (${Math.floor(transcriptSegments.length * SEGMENT_DURATION / 60)}:${(transcriptSegments.length * SEGMENT_DURATION % 60).toString().padStart(2, '0')})`);

        // Step 3: Ph√¢n t√≠ch v√† t·∫°o prompts v·ªõi ChatGPT
        console.log('\nü§ñ [Step 3] ChatGPT ph√¢n t√≠ch v√† t·∫°o prompts...');
        
        const chatGPTResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    {
                        role: "system",
                        content: `B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3 v·ªõi kh·∫£ nƒÉng t·∫°o voice-over.

‚ö†Ô∏è QUAN TR·ªåNG: Veo3 c√≥ th·ªÉ t·∫°o video C√ì GI·ªåNG N√ìI n·∫øu y√™u c·∫ßu trong prompt!

Nhi·ªám v·ª•: Ph√¢n t√≠ch transcript v√† t·∫°o visual prompt cho ${transcriptSegments.length} segments (m·ªói segment 8 gi√¢y).

Tr·∫£ v·ªÅ JSON format:
{
    "overallTheme": "Ch·ªß ƒë·ªÅ ch√≠nh xuy√™n su·ªët video",
    "colorScheme": "B·∫£ng m√†u ƒë·ªìng nh·∫•t",
    "visualStyle": "Phong c√°ch (documentary/cinematic/artistic)",
    "voiceGender": "male ho·∫∑c female",
    "voiceTone": "Gi·ªçng ƒëi·ªáu (calm/dramatic/energetic)",
    "segments": [
        {
            "index": 0,
            "voiceOverText": "L·ªùi tho·∫°i ti·∫øng Vi·ªát cho segment n√†y (t·ª´ transcript)",
            "visualPrompt": "M√¥ t·∫£ visual t∆∞∆°ng ·ª©ng v·ªõi l·ªùi tho·∫°i (KH√îNG text/ch·ªØ tr√™n m√†n h√¨nh)",
            "focus": "Tr·ªçng t√¢m c·ªßa segment"
        }
    ]
}

‚ö†Ô∏è Y√äU C·∫¶U:
1. voiceOverText: L·∫•y CH√çNH X√ÅC t·ª´ transcript, KH√îNG s√°ng t·∫°o th√™m
2. visualPrompt: M√¥ t·∫£ visual ph√π h·ª£p v·ªõi n·ªôi dung l·ªùi tho·∫°i
3. KH√îNG c√≥ text/ch·ªØ/caption hi·ªÉn th·ªã tr√™n video
4. T·∫•t c·∫£ segments c√πng ch·ªß ƒë·ªÅ, m√†u s·∫Øc, phong c√°ch
5. Visual ph·∫£i li√™n k·∫øt m∆∞·ª£t m√† gi·ªØa c√°c segments`
                    },
                    {
                        role: "user",
                        content: `T·∫°o ${transcriptSegments.length} prompts (c√≥ voice-over) cho transcript n√†y:

TRANSCRIPT SEGMENTS:
${transcriptSegments.map((seg, idx) => `
[Segment ${idx + 1}/${transcriptSegments.length}]:
Text: ${seg.text}
`).join('\n')}`
                    }
                ],
                max_tokens: Math.min(16384, transcriptSegments.length * 150),
                temperature: 0.3
            })
        });

        const chatGPTResult = await chatGPTResponse.json();
        console.log(`ü§ñ [Step 3] ChatGPT result:`, chatGPTResult.choices ? '‚úÖ Success' : '‚ùå Failed');

        if (!chatGPTResult.choices) {
            throw new Error('ChatGPT kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£');
        }

        const analysisText = chatGPTResult.choices[0].message.content;

        // Parse JSON
        let analysis;
        try {
            const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                analysis = JSON.parse(jsonMatch[0]);
                console.log(`‚úÖ [Step 3] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
                console.log(`‚úÖ [Step 3] M√†u s·∫Øc: ${analysis.colorScheme}`);
                console.log(`‚úÖ [Step 3] Phong c√°ch: ${analysis.visualStyle}`);
            } else {
                throw new Error('No JSON found');
            }
        } catch (parseError) {
            console.error(`‚ùå [Step 3] Kh√¥ng parse ƒë∆∞·ª£c JSON:`, parseError.message);
            throw new Error('ChatGPT kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá');
        }

        // L·∫•y cookie tr∆∞·ªõc
        console.log('\nüç™ [Step 4] L·∫•y cookie...');
        await getCachedOrFreshCookie(serverUrl);

        // Step 4: T·∫°o Video v·ªõi Voice-over cho t·ª´ng segment
        console.log('\nüé¨ [Step 4] T·∫°o Video v·ªõi Voice-over cho t·ª´ng segment...');

        const segmentPromises = transcriptSegments.map(async (segment, index) => {
            // Delay ƒë·ªÉ tr√°nh overload
            await new Promise(resolve => setTimeout(resolve, index * 3000));

            console.log(`\n--- Segment ${index + 1}/${transcriptSegments.length} ---`);
            console.log(`üìù Text: ${segment.text.substring(0, 100)}...`);

            // L·∫•y data t·ª´ analysis
            const visualData = analysis.segments[index] || {};
            const voiceOverText = visualData.voiceOverText || segment.text;
            const visualPrompt = visualData.visualPrompt || segment.text;

            console.log(`üéôÔ∏è Voice-over: ${voiceOverText.substring(0, 100)}...`);
            console.log(`üé® Visual: ${visualPrompt.substring(0, 100)}...`);

            // T·∫°o prompt k·∫øt h·ª£p voice-over + visual cho Veo3
            const fullPrompt = createPromptWithVoiceOver(
                visualPrompt,
                voiceOverText,
                analysis.overallTheme,
                analysis.colorScheme,
                analysis.visualStyle
            );

            console.log(`üìã Full prompt: ${fullPrompt.substring(0, 150)}...`);

            // T·∫°o video v·ªõi Veo3 (c√≥ voice-over)
            let veo3Result = null;
            let retryCount = 0;
            const maxRetries = 10;

            while (retryCount < maxRetries) {
                try {
                    const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            input: fullPrompt,
                            prompt: fullPrompt
                        })
                    });

                    veo3Result = await veo3Response.json();

                    if (veo3Result.success) {
                        break;
                    } else {
                        throw new Error(veo3Result.message || 'Create video failed');
                    }
                } catch (error) {
                    retryCount++;
                    console.log(`‚ö†Ô∏è Segment ${index + 1} th·∫•t b·∫°i l·∫ßn ${retryCount}/${maxRetries}: ${error.message}`);

                    if (retryCount < maxRetries) {
                        const waitTime = Math.pow(2, retryCount) * 2000;
                        const waitSeconds = Math.floor(waitTime / 1000);
                        console.log(`‚è≥ ƒê·ª£i ${waitSeconds}s tr∆∞·ªõc khi retry...`);
                        await new Promise(resolve => setTimeout(resolve, waitTime));

                        if (error.message.includes('cookie') || error.message.includes('429')) {
                            console.log(`üîÑ Refresh cookie...`);
                            cachedCookie = null;
                            await getCachedOrFreshCookie(serverUrl);
                        }
                    }
                }
            }

            if (veo3Result && veo3Result.success) {
                console.log(`‚úÖ Segment ${index + 1} Veo3: ${veo3Result.operationName}`);
                return {
                    segmentIndex: index,
                    text: segment.text,
                    voiceOverText: voiceOverText,
                    visualPrompt: visualPrompt,
                    fullPrompt: fullPrompt,
                    operationId: veo3Result.operationName,
                    success: true
                };
            } else {
                console.log(`‚ùå Segment ${index + 1} th·∫•t b·∫°i sau ${maxRetries} l·∫ßn th·ª≠`);
                return {
                    segmentIndex: index,
                    text: segment.text,
                    error: 'Failed after retries',
                    success: false
                };
            }
        });

        // Ch·ªù t·∫•t c·∫£ segments
        const segmentResults = await Promise.all(segmentPromises);
        const successfulSegments = segmentResults.filter(r => r.success);

        console.log(`\n‚úÖ [Step 4] ƒê√£ t·∫°o ${successfulSegments.length}/${transcriptSegments.length} segments`);

        // Step 5: Monitor v√† download videos
        console.log('\nüîÑ [Step 5] Monitor v√† download videos...');

        const downloadPromises = successfulSegments.map(async (segment) => {
            const operationId = segment.operationId;
            console.log(`üîÑ Monitor operation: ${operationId}`);

            let attempts = 0;
            const maxAttempts = 60;

            while (attempts < maxAttempts) {
                try {
                    const statusResponse = await fetch(`${serverUrl}/api/check-status`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ operationName: operationId })
                    });

                    const statusResult = await statusResponse.json();

                    if (statusResult.success && statusResult.videoStatus === 'COMPLETED' && statusResult.videoUrl) {
                        console.log(`‚úÖ Operation ${operationId} ho√†n th√†nh!`);

                        // Download video
                        const downloadResponse = await fetch(`${serverUrl}/api/tts/download`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                audioUrl: statusResult.videoUrl,
                                filename: `segment_${segment.segmentIndex}_${Date.now()}.mp4`
                            })
                        });

                        const downloadResult = await downloadResponse.json();

                        if (downloadResult.success) {
                            const videoPath = downloadResult.savedTo || downloadResult.outPath;
                            console.log(`‚úÖ Segment ${segment.segmentIndex + 1} ƒë√£ t·∫£i v·ªÅ: ${videoPath}`);

                            return {
                                segmentIndex: segment.segmentIndex,
                                text: segment.text,
                                voiceOverText: segment.voiceOverText,
                                videoPath: videoPath,
                                success: true
                            };
                        }
                    } else if (statusResult.success && statusResult.videoStatus === 'PENDING') {
                        attempts++;
                        await new Promise(resolve => setTimeout(resolve, 5000));
                    } else {
                        return { segmentIndex: segment.segmentIndex, error: 'Failed', success: false };
                    }
                } catch (error) {
                    attempts++;
                    await new Promise(resolve => setTimeout(resolve, 5000));
                }
            }

            return { segmentIndex: segment.segmentIndex, error: 'Timeout', success: false };
        });

        const videoFiles = await Promise.all(downloadPromises);
        const successfulVideos = videoFiles.filter(v => v.success);

        console.log(`\n‚úÖ [Step 5] ƒê√£ t·∫£i ${successfulVideos.length}/${successfulSegments.length} videos`);

        // Step 6: Gh√©p t·∫•t c·∫£ videos th√†nh 1 (videos ƒë√£ c√≥ voice-over t·ª´ Veo3)
        if (successfulVideos.length > 0) {
            console.log(`\nüé¨ [Step 6] Gh√©p ${successfulVideos.length} videos th√†nh 1...`);

            successfulVideos.sort((a, b) => a.segmentIndex - b.segmentIndex);

            // T·∫°o file list
            const listPath = path.join(outputDir, 'video_list.txt');
            const listContent = successfulVideos.map(video => {
                const absolutePath = path.resolve(video.videoPath);
                return `file '${absolutePath.replace(/\\/g, '/')}'`;
            }).join('\n');

            fs.writeFileSync(listPath, listContent, 'utf8');

            // Gh√©p video
            const finalVideoPath = path.join(outputDir, `final_video_${Date.now()}.mp4`);
            const mergeCmd = `ffmpeg -f concat -safe 0 -i "${listPath}" -c copy "${finalVideoPath}"`;

            await execAsync(mergeCmd);

            console.log(`‚úÖ [Step 6] Video cu·ªëi: ${finalVideoPath}`);

            // L∆∞u k·∫øt qu·∫£
            const result = {
                timestamp: new Date().toISOString(),
                youtubeUrl: youtubeUrl,
                transcriptLength: transcriptText.length,
                wordsPerSegment: WORDS_PER_SEGMENT,
                segmentDuration: SEGMENT_DURATION,
                totalSegments: transcriptSegments.length,
                videosDownloaded: successfulVideos.length,
                estimatedDuration: `${successfulVideos.length * SEGMENT_DURATION}s`,
                finalVideo: finalVideoPath,
                overallTheme: analysis.overallTheme,
                colorScheme: analysis.colorScheme,
                visualStyle: analysis.visualStyle,
                voiceGender: analysis.voiceGender,
                voiceTone: analysis.voiceTone,
                segments: successfulVideos.map(v => ({
                    index: v.segmentIndex,
                    text: v.text,
                    voiceOver: v.voiceOverText,
                    videoPath: v.videoPath
                }))
            };

            const resultPath = path.join(outputDir, 'result.json');
            fs.writeFileSync(resultPath, JSON.stringify(result, null, 2));

            console.log(`\nüéâ Ho√†n th√†nh!`);
            console.log(`üéâ Video cu·ªëi: ${finalVideoPath}`);
            console.log(`üéâ T·ªïng segments: ${successfulVideos.length}`);
            console.log(`üéâ Th·ªùi l∆∞·ª£ng: ${successfulVideos.length * SEGMENT_DURATION}s (~${Math.floor(successfulVideos.length * SEGMENT_DURATION / 60)} ph√∫t)`);
            console.log(`üéâ Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
            console.log(`üéâ Gi·ªçng n√≥i: ${analysis.voiceGender} - ${analysis.voiceTone}`);

            return { success: true, result };
        } else {
            throw new Error('Kh√¥ng c√≥ video n√†o ƒë∆∞·ª£c t·∫£i v·ªÅ');
        }

    } catch (error) {
        console.error(`‚ùå L·ªói:`, error.message);
        return { success: false, error: error.message };
    }
}

console.log(`üöÄ [START] T·∫°o video t·ª´ transcript YouTube...`);
createVideoFromTranscript().then(result => {
    if (result.success) {
        console.log('üéâ Ho√†n th√†nh th√†nh c√¥ng!');
    } else {
        console.log(`‚ùå Th·∫•t b·∫°i: ${result.error}`);
    }
});

