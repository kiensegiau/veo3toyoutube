const RequestLogger = require('./index.js');

// V√≠ d·ª• s·ª≠ d·ª•ng RequestLogger v·ªõi stealth mode v√† session
async function example() {
    const options = {
        stealthMode: true,
        cookiesFile: 'demo-cookies.json',
        userDataDir: './demo-chrome-data'
    };
    
    const logger = new RequestLogger(options);
    
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu demo RequestLogger v·ªõi Stealth Mode...');
        
        // Kh·ªüi t·∫°o logger
        await logger.init();
        
        // Truy c·∫≠p m·ªôt s·ªë trang web ƒë·ªÉ demo
        const urls = [
            'https://www.google.com',
            'https://httpbin.org/get',
            'https://httpbin.org/post'
        ];
        
        for (const url of urls) {
            console.log(`\nüì± ƒêang truy c·∫≠p: ${url}`);
            await logger.navigateToUrl(url);
            
            // Random delay gi·ªØa c√°c requests
            await logger.randomDelay(3000, 5000);
        }
        
        // L∆∞u t·∫•t c·∫£ requests
        await logger.saveRequestsToFile('demo-requests.json');
        
        console.log('\n‚úÖ Demo ho√†n th√†nh!');
        console.log('üìÅ Ki·ªÉm tra c√°c file:');
        console.log('   - demo-requests.json (t·∫•t c·∫£ requests)');
        console.log('   - demo-cookies.json (cookies v√† session)');
        console.log('   - ./demo-chrome-data/ (th∆∞ m·ª•c Chrome user data)');
        
    } catch (error) {
        console.error('‚ùå L·ªói trong demo:', error.message);
    } finally {
        await logger.close();
    }
}

// Ch·∫°y demo
if (require.main === module) {
    example().catch(console.error);
}

module.exports = example;
