const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

/**
 * T·∫°o video 32s MH370 kh√¥ng c√≥ ch·ªØ - ch·ªâ video thu·∫ßn t√∫y
 */
async function createMH370VideoNoText() {
    try {
        console.log('üöÄ [MH370] T·∫°o video 32s MH370 kh√¥ng c√≥ ch·ªØ...');
        
        const serverUrl = 'http://localhost:8888';
        const youtubeUrl = 'https://youtu.be/52ru0qDc0LQ?si=zahSVRyDiQy7Jd6H';
        const outputDir = './temp/mh370-no-text-32s';
        
        // T·∫°o th∆∞ m·ª•c output
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        // Step 1: L·∫•y transcript t·ª´ YouTube
        console.log('üìù [Step 1] L·∫•y transcript t·ª´ YouTube MH370...');
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                url: youtubeUrl,
                lang: 'vi'
            })
        });
        
        const transcriptResult = await transcriptResponse.json();
        console.log('üìù [Step 1] Transcript result:', transcriptResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!transcriptResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y transcript: ${transcriptResult.message}`);
        }
        
        const transcriptText = typeof transcriptResult.transcript === 'string' ? 
            transcriptResult.transcript : 
            JSON.stringify(transcriptResult.transcript);
        
        console.log(`üìù [Step 1] Transcript: ${transcriptText.substring(0, 300)}...`);
        
        // Step 2: ChatGPT t·∫°o prompt KH√îNG C√ì CH·ªÆ - ch·ªâ video thu·∫ßn t√∫y
        console.log('ü§ñ [Step 2] ChatGPT t·∫°o prompt KH√îNG C√ì CH·ªÆ cho 4 segments...');
        
        const chatGPTResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o',
                messages: [
                    { 
                        role: "system", 
                        content: `B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3 v·ªõi kh·∫£ nƒÉng t·∫°o h√¨nh ·∫£nh ƒë·ªìng nh·∫•t v√† li·ªÅn m·∫°ch.

QUAN TR·ªåNG: KH√îNG BAO GI·ªú th√™m b·∫•t c·ª© ch·ªØ, text, subtitle, ho·∫∑c vƒÉn b·∫£n n√†o v√†o video. Ch·ªâ t·∫°o video thu·∫ßn t√∫y v·ªõi h√¨nh ·∫£nh.

Nhi·ªám v·ª•: Ph√¢n t√≠ch chi ti·∫øt transcript v·ªÅ MH370 v√† t·∫°o 4 prompts cho 4 segments 8s (t·ªïng 32s) v·ªõi:

Y√äU C·∫¶U CHI TI·∫æT:
1. PH√ÇN T√çCH TRANSCRIPT: ƒê·ªçc k·ªπ transcript, x√°c ƒë·ªãnh c√°c s·ª± ki·ªán ch√≠nh, th·ªùi gian, ƒë·ªãa ƒëi·ªÉm, nh√¢n v·∫≠t
2. T·∫†O C√ÇU CHUY·ªÜN LOGIC: X√¢y d·ª±ng c√¢u chuy·ªán c√≥ ƒë·∫ßu, gi·ªØa, cu·ªëi d·ª±a tr√™n n·ªôi dung transcript
3. H√åNH ·∫¢NH ƒê·ªíNG NH·∫§T: M·ªói segment ph·∫£i li√™n quan tr·ª±c ti·∫øp ƒë·∫øn n·ªôi dung transcript
4. M√ÄU S·∫ÆC NH·∫§T QU√ÅN: Xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng, x√°m - phong c√°ch ƒëi·ªÅu tra chuy√™n nghi·ªáp
5. PHONG C√ÅCH T√ÄI LI·ªÜU: Nh∆∞ phim t√†i li·ªáu ƒëi·ªÅu tra, nghi√™m t√∫c, chuy√™n nghi·ªáp
6. CHUY·ªÇN TI·∫æP M∆Ø·ª¢T M√Ä: Segment sau ph·∫£i ti·∫øp n·ªëi logic t·ª´ segment tr∆∞·ªõc
7. CHI TI·∫æT C·ª§ TH·ªÇ: M√¥ t·∫£ r√µ r√†ng camera angle, lighting, objects, movements
8. TUY·ªÜT ƒê·ªêI KH√îNG C√ì CH·ªÆ, TEXT, SUBTITLE

C·∫§U TR√öC LOGIC:
- Segment 1 (0-8s): M·ªü ƒë·∫ßu - B·ªëi c·∫£nh, s·ª± ki·ªán ban ƒë·∫ßu
- Segment 2 (8-16s): Ph√°t tri·ªÉn - Chi ti·∫øt ƒëi·ªÅu tra, d·ªØ li·ªáu
- Segment 3 (16-24s): Cao tr√†o - T√¨m ki·∫øm, kh√°m ph√°
- Segment 4 (24-32s): K·∫øt th√∫c - Hi·ªán tr·∫°ng, t∆∞∆°ng lai

Tr·∫£ v·ªÅ JSON format:
{
    "overallTheme": "Ch·ªß ƒë·ªÅ t·ªïng th·ªÉ d·ª±a tr√™n transcript",
    "colorScheme": "B·∫£ng m√†u ch√≠nh",
    "visualStyle": "Phong c√°ch visual",
    "storyline": "C·ªët truy·ªán logic d·ª±a tr√™n transcript",
    "segments": [
        {
            "timeRange": "0-8s",
            "focus": "N·ªôi dung ch√≠nh c·ªßa segment d·ª±a tr√™n transcript",
            "transcriptContent": "Ph·∫ßn transcript t∆∞∆°ng ·ª©ng",
            "visualElements": "C√°c y·∫øu t·ªë h√¨nh ·∫£nh c·ª• th·ªÉ",
            "cameraWork": "G√≥c quay, chuy·ªÉn ƒë·ªông camera",
            "lighting": "√Ånh s√°ng, t√¥ng m√†u",
            "prompt": "Prompt chi ti·∫øt cho Veo3 v·ªõi h√¨nh ·∫£nh c·ª• th·ªÉ - KH√îNG C√ì CH·ªÆ"
        },
        {
            "timeRange": "8-16s", 
            "focus": "N·ªôi dung ch√≠nh c·ªßa segment d·ª±a tr√™n transcript",
            "transcriptContent": "Ph·∫ßn transcript t∆∞∆°ng ·ª©ng",
            "visualElements": "C√°c y·∫øu t·ªë h√¨nh ·∫£nh c·ª• th·ªÉ",
            "cameraWork": "G√≥c quay, chuy·ªÉn ƒë·ªông camera",
            "lighting": "√Ånh s√°ng, t√¥ng m√†u",
            "prompt": "Prompt chi ti·∫øt cho Veo3 v·ªõi h√¨nh ·∫£nh c·ª• th·ªÉ - KH√îNG C√ì CH·ªÆ"
        },
        {
            "timeRange": "16-24s",
            "focus": "N·ªôi dung ch√≠nh c·ªßa segment d·ª±a tr√™n transcript", 
            "transcriptContent": "Ph·∫ßn transcript t∆∞∆°ng ·ª©ng",
            "visualElements": "C√°c y·∫øu t·ªë h√¨nh ·∫£nh c·ª• th·ªÉ",
            "cameraWork": "G√≥c quay, chuy·ªÉn ƒë·ªông camera",
            "lighting": "√Ånh s√°ng, t√¥ng m√†u",
            "prompt": "Prompt chi ti·∫øt cho Veo3 v·ªõi h√¨nh ·∫£nh c·ª• th·ªÉ - KH√îNG C√ì CH·ªÆ"
        },
        {
            "timeRange": "24-32s",
            "focus": "N·ªôi dung ch√≠nh c·ªßa segment d·ª±a tr√™n transcript",
            "transcriptContent": "Ph·∫ßn transcript t∆∞∆°ng ·ª©ng",
            "visualElements": "C√°c y·∫øu t·ªë h√¨nh ·∫£nh c·ª• th·ªÉ",
            "cameraWork": "G√≥c quay, chuy·ªÉn ƒë·ªông camera",
            "lighting": "√Ånh s√°ng, t√¥ng m√†u",
            "prompt": "Prompt chi ti·∫øt cho Veo3 v·ªõi h√¨nh ·∫£nh c·ª• th·ªÉ - KH√îNG C√ì CH·ªÆ"
        }
    ]
}` 
                    },
                    { 
                        role: "user", 
                        content: `Ph√¢n t√≠ch chi ti·∫øt transcript v·ªÅ MH370 v√† t·∫°o 4 prompts logic cho video 32s:

TRANSCRIPT:
${transcriptText}

Y√äU C·∫¶U CHI TI·∫æT:
1. PH√ÇN T√çCH TRANSCRIPT: ƒê·ªçc k·ªπ t·ª´ng c√¢u, x√°c ƒë·ªãnh:
   - S·ª± ki·ªán ch√≠nh theo th·ªùi gian
   - ƒê·ªãa ƒëi·ªÉm, nh√¢n v·∫≠t, t√¨nh hu·ªëng
   - C·∫£m x√∫c, t√¥ng ƒëi·ªáu c·ªßa c√¢u chuy·ªán
   - Chi ti·∫øt k·ªπ thu·∫≠t, d·ªØ li·ªáu

2. T·∫†O C√ÇU CHUY·ªÜN LOGIC V·ªÄ MH370:
   - Segment 1: M·ªü ƒë·∫ßu - MH370 c·∫•t c√°nh t·ª´ Kuala Lumpur, m·∫•t t√≠ch
   - Segment 2: Ph√°t tri·ªÉn - ƒêi·ªÅu tra radar, d·ªØ li·ªáu v·ªá tinh MH370
   - Segment 3: Cao tr√†o - T√¨m ki·∫øm MH370 ·ªü ·∫§n ƒê·ªô D∆∞∆°ng, Ocean Infinity
   - Segment 4: K·∫øt th√∫c - Hi·ªán tr·∫°ng t√¨m ki·∫øm MH370, hy v·ªçng

3. H√åNH ·∫¢NH C·ª§ TH·ªÇ V·ªÄ MH370:
   - M·ªói segment PH·∫¢I li√™n quan tr·ª±c ti·∫øp ƒë·∫øn MH370
   - Boeing 777-200ER (lo·∫°i m√°y bay MH370)
   - S√¢n bay Kuala Lumpur (n∆°i MH370 c·∫•t c√°nh)
   - ·∫§n ƒê·ªô D∆∞∆°ng (n∆°i t√¨m ki·∫øm MH370)
   - D·ªØ li·ªáu radar, v·ªá tinh v·ªÅ MH370
   - Camera work: angles, movements, transitions
   - Lighting: mood, atmosphere, color temperature

4. T√çNH NH·∫§T QU√ÅN:
   - M√†u s·∫Øc: Xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng, x√°m
   - Phong c√°ch: T√†i li·ªáu ƒëi·ªÅu tra chuy√™n nghi·ªáp v·ªÅ MH370
   - Chuy·ªÉn ti·∫øp: Logic t·ª´ segment tr∆∞·ªõc sang segment sau

5. TUY·ªÜT ƒê·ªêI KH√îNG C√ì CH·ªÆ, TEXT, SUBTITLE, VƒÇN B·∫¢N N√ÄO

QUAN TR·ªåNG: T·∫§T C·∫¢ 4 SEGMENTS PH·∫¢I LI√äN QUAN ƒê·∫æN MH370 - KH√îNG ƒê∆Ø·ª¢C T·∫†O VIDEO KH√ÅC CH·ª¶ ƒê·ªÄ!

H√£y ph√¢n t√≠ch transcript v√† t·∫°o c√¢u chuy·ªán logic v·ªÅ MH370, sau ƒë√≥ t·∫°o 4 prompts chi ti·∫øt cho Veo3.` 
                    }
                ],
                max_tokens: 3000,
                temperature: 0.7
            })
        });
        
        const chatGPTResult = await chatGPTResponse.json();
        console.log('ü§ñ [Step 2] ChatGPT result:', chatGPTResult.choices ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!chatGPTResult.choices) {
            console.error('‚ùå [Step 2] ChatGPT API Error:', chatGPTResult);
            throw new Error('ChatGPT kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£');
        }
        
        if (chatGPTResult.error) {
            console.error('‚ùå [Step 2] ChatGPT API Error:', chatGPTResult.error);
            throw new Error(`ChatGPT API Error: ${chatGPTResult.error.message}`);
        }
        
        const analysisText = chatGPTResult.choices[0].message.content;
        console.log(`ü§ñ [Step 2] Ph√¢n t√≠ch ho√†n ch·ªânh:`);
        console.log(analysisText);
        
        // Parse JSON t·ª´ response - C·∫£i thi·ªán ƒë·ªÉ s·ª≠ d·ª•ng ChatGPT hi·ªáu qu·∫£ h∆°n
        let analysis;
        try {
            console.log(`üîç [Step 2] ƒêang ph√¢n t√≠ch response t·ª´ ChatGPT...`);
            
            // T√¨m JSON trong response - c·∫£i thi·ªán regex ƒë·ªÉ t√¨m JSON t·ªët h∆°n
            const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const jsonString = jsonMatch[0];
                console.log(`üîç [Step 2] T√¨m th·∫•y JSON, ƒëang parse...`);
                
                analysis = JSON.parse(jsonString);
                console.log(`‚úÖ [Step 2] ChatGPT ph√¢n t√≠ch th√†nh c√¥ng!`);
                console.log(`‚úÖ [Step 2] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
                console.log(`‚úÖ [Step 2] M√†u s·∫Øc: ${analysis.colorScheme}`);
                console.log(`‚úÖ [Step 2] Phong c√°ch: ${analysis.visualStyle}`);
                console.log(`‚úÖ [Step 2] C·ªët truy·ªán: ${analysis.storyline || 'N/A'}`);
                
                // Validate segments c√≥ ƒë·ªß th√¥ng tin
                if (analysis.segments && analysis.segments.length === 4) {
                    console.log(`‚úÖ [Step 2] ƒê√£ t·∫°o ${analysis.segments.length} segments t·ª´ ChatGPT:`);
                    analysis.segments.forEach((segment, index) => {
                        console.log(`‚úÖ [Step 2] Segment ${index + 1}: ${segment.focus}`);
                        console.log(`‚úÖ [Step 2] - Transcript: ${segment.transcriptContent ? segment.transcriptContent.substring(0, 100) + '...' : 'N/A'}`);
                        console.log(`‚úÖ [Step 2] - Visual: ${segment.visualElements || 'N/A'}`);
                        console.log(`‚úÖ [Step 2] - Camera: ${segment.cameraWork || 'N/A'}`);
                    });
                } else {
                    console.warn(`‚ö†Ô∏è [Step 2] ChatGPT tr·∫£ v·ªÅ segments kh√¥ng ƒë√∫ng format, ƒëang s·ª≠a...`);
                    // S·ª≠a segments n·∫øu ChatGPT tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng format
                    if (!analysis.segments || analysis.segments.length !== 4) {
                        analysis.segments = analysis.segments || [];
                        while (analysis.segments.length < 4) {
                            analysis.segments.push({
                                timeRange: `${analysis.segments.length * 8}-${(analysis.segments.length + 1) * 8}s`,
                                focus: `Segment ${analysis.segments.length + 1} from ChatGPT`,
                                transcriptContent: "Content from ChatGPT analysis",
                                visualElements: "Professional documentary visuals",
                                cameraWork: "Professional documentary camera work",
                                lighting: "Professional documentary lighting",
                                prompt: segment.prompt || "Professional documentary video"
                            });
                        }
                    }
                }
            } else {
                console.warn(`‚ö†Ô∏è [Step 2] Kh√¥ng t√¨m th·∫•y JSON trong response ChatGPT`);
                console.warn(`‚ö†Ô∏è [Step 2] Response content: ${analysisText.substring(0, 200)}...`);
                throw new Error('No JSON found in ChatGPT response');
            }
        } catch (parseError) {
            console.error(`‚ùå [Step 2] L·ªói parse ChatGPT response: ${parseError.message}`);
            console.error(`‚ùå [Step 2] ChatGPT response: ${analysisText.substring(0, 300)}...`);
            
            // Th·ª≠ l·∫°i ChatGPT l·∫ßn n·ªØa v·ªõi prompt ƒë∆°n gi·∫£n h∆°n
            console.log(`üîÑ [Step 2] Th·ª≠ l·∫°i ChatGPT v·ªõi prompt ƒë∆°n gi·∫£n h∆°n...`);
            
            try {
                const retryResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${OPENAI_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o',
                        messages: [
                            { 
                                role: "system", 
                                content: `T·∫°o 4 segments video 32s v·ªÅ MH370 d·ª±a tr√™n transcript. Tr·∫£ v·ªÅ JSON format:
{
    "overallTheme": "Ch·ªß ƒë·ªÅ",
    "colorScheme": "M√†u s·∫Øc", 
    "visualStyle": "Phong c√°ch",
    "segments": [
        {"timeRange": "0-8s", "focus": "N·ªôi dung", "prompt": "Prompt cho Veo3 - KH√îNG C√ì CH·ªÆ"},
        {"timeRange": "8-16s", "focus": "N·ªôi dung", "prompt": "Prompt cho Veo3 - KH√îNG C√ì CH·ªÆ"},
        {"timeRange": "16-24s", "focus": "N·ªôi dung", "prompt": "Prompt cho Veo3 - KH√îNG C√ì CH·ªÆ"},
        {"timeRange": "24-32s", "focus": "N·ªôi dung", "prompt": "Prompt cho Veo3 - KH√îNG C√ì CH·ªÆ"}
    ]
}` 
                            },
                            { 
                                role: "user", 
                                content: `D·ª±a tr√™n transcript n√†y, t·∫°o 4 segments video MH370:

TRANSCRIPT:
${transcriptText}

Y√™u c·∫ßu: Video t√†i li·ªáu ƒëi·ªÅu tra MH370, m√†u xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng. KH√îNG C√ì CH·ªÆ, TEXT, SUBTITLE.` 
                            }
                        ],
                        max_tokens: 2000,
                        temperature: 0.5
                    })
                });
                
                const retryResult = await retryResponse.json();
                
                if (retryResult.choices && !retryResult.error) {
                    const retryText = retryResult.choices[0].message.content;
                    console.log(`üîÑ [Step 2] ChatGPT retry response: ${retryText.substring(0, 200)}...`);
                    
                    const retryJsonMatch = retryText.match(/\{[\s\S]*\}/);
                    if (retryJsonMatch) {
                        analysis = JSON.parse(retryJsonMatch[0]);
                        console.log(`‚úÖ [Step 2] ChatGPT retry th√†nh c√¥ng!`);
                        console.log(`‚úÖ [Step 2] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
                        console.log(`‚úÖ [Step 2] ƒê√£ t·∫°o ${analysis.segments?.length || 0} segments`);
                    } else {
                        throw new Error('Retry response kh√¥ng c√≥ JSON');
                    }
                } else {
                    throw new Error('ChatGPT retry th·∫•t b·∫°i');
                }
                
            } catch (retryError) {
                console.error(`‚ùå [Step 2] ChatGPT retry c≈©ng th·∫•t b·∫°i: ${retryError.message}`);
                throw new Error(`ChatGPT kh√¥ng th·ªÉ x·ª≠ l√Ω transcript sau 2 l·∫ßn th·ª≠: ${parseError.message}`);
            }
        }
        
        // Step 3: T·∫°o 4 video Veo3 tu·∫ßn t·ª± v·ªõi prompts KH√îNG C√ì CH·ªÆ
        console.log('üé¨ [Step 3] T·∫°o 4 video Veo3 tu·∫ßn t·ª± v·ªõi prompts KH√îNG C√ì CH·ªÆ...');
        
        const veo3Results = [];
        
        for (let i = 0; i < analysis.segments.length; i++) {
            const segment = analysis.segments[i];
            console.log(`üé¨ [Step 3] T·∫°o video segment ${i + 1}: ${segment.timeRange}`);
            console.log(`üé¨ [Step 3] Focus: ${segment.focus}`);
            console.log(`üé¨ [Step 3] Transcript: ${segment.transcriptContent ? segment.transcriptContent.substring(0, 100) + '...' : 'N/A'}`);
            console.log(`üé¨ [Step 3] Visual: ${segment.visualElements || 'N/A'}`);
            console.log(`üé¨ [Step 3] Camera: ${segment.cameraWork || 'N/A'}`);
            console.log(`üé¨ [Step 3] Prompt: ${segment.prompt.substring(0, 150)}...`);
            
            try {
                // T·∫°o prompt chi ti·∫øt h∆°n v·ªõi th√¥ng tin t·ª´ segment - ƒê·∫¢M B·∫¢O LI√äN QUAN ƒê·∫æN MH370
                const enhancedPrompt = `MH370 INVESTIGATION DOCUMENTARY - ${segment.prompt}

MH370 SPECIFIC REQUIREMENTS:
- MUST be about Malaysia Airlines flight MH370 disappearance
- MUST show Boeing 777-200ER aircraft (MH370's aircraft type)
- MUST relate to the 2014 disappearance and ongoing investigation
- MUST include MH370-specific elements: Kuala Lumpur airport, Indian Ocean search, satellite data, Ocean Infinity search

SEGMENT DETAILS:
- Time Range: ${segment.timeRange}
- Focus: ${segment.focus}
- Visual Elements: ${segment.visualElements || 'MH370 investigation visuals'}
- Camera Work: ${segment.cameraWork || 'Professional documentary camera work'}
- Lighting: ${segment.lighting || 'Professional documentary lighting'}

CRITICAL: NO TEXT, NO SUBTITLES, NO WORDS - PURE VISUAL STORYTELLING ONLY - MUST BE ABOUT MH370`;

                const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        input: enhancedPrompt,
                        prompt: enhancedPrompt
                    })
                });
                
                const veo3Result = await veo3Response.json();
                
                if (veo3Result.success) {
                    console.log(`‚úÖ [Step 3] Segment ${i + 1} Veo3: ${veo3Result.operationName}`);
                    veo3Results.push({
                        segmentIndex: i,
                        timeRange: segment.timeRange,
                        focus: segment.focus,
                        transcriptContent: segment.transcriptContent,
                        visualElements: segment.visualElements,
                        cameraWork: segment.cameraWork,
                        lighting: segment.lighting,
                        prompt: enhancedPrompt,
                        operationId: veo3Result.operationName,
                        success: true
                    });
                } else {
                    console.log(`‚ùå [Step 3] Segment ${i + 1} th·∫•t b·∫°i: ${veo3Result.message}`);
                    veo3Results.push({
                        segmentIndex: i,
                        timeRange: segment.timeRange,
                        focus: segment.focus,
                        error: veo3Result.message,
                        success: false
                    });
                }
                
                // Ch·ªù gi·ªØa c√°c requests ƒë·ªÉ tr√°nh spam v√† ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng
                if (i < analysis.segments.length - 1) {
                    console.log(`‚è≥ [Step 3] Ch·ªù 8 gi√¢y tr∆∞·ªõc khi t·∫°o segment ti·∫øp theo ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng...`);
                    await new Promise(resolve => setTimeout(resolve, 8000));
                }
                
            } catch (error) {
                console.log(`‚ùå [Step 3] Segment ${i + 1} l·ªói: ${error.message}`);
                veo3Results.push({
                    segmentIndex: i,
                    timeRange: segment.timeRange,
                    focus: segment.focus,
                    error: error.message,
                    success: false
                });
            }
        }
        
        const successfulOperations = veo3Results.filter(r => r.success);
        console.log(`‚úÖ [Step 3] ƒê√£ g·ª≠i ${successfulOperations.length}/4 Veo3 requests`);
        
        if (successfulOperations.length > 0) {
            console.log(`üöÄ [Step 3] T·∫•t c·∫£ Veo3 ƒëang ch·∫°y ng·∫ßm...`);
            console.log(`üöÄ [Step 3] C√°c operation IDs:`);
            successfulOperations.forEach(op => {
                console.log(`üöÄ [Step 3] - Segment ${op.segmentIndex + 1}: ${op.operationId}`);
            });
            
            console.log(`‚è≥ [Step 3] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
            console.log(`‚è≥ [Step 3] Ki·ªÉm tra th∆∞ m·ª•c public/audio/ ƒë·ªÉ xem video m·ªõi`);
            
            // L∆∞u k·∫øt qu·∫£ ho√†n ch·ªânh
            const finalResult = {
                timestamp: new Date().toISOString(),
                youtubeUrl: youtubeUrl,
                transcript: transcriptText,
                overallTheme: analysis.overallTheme,
                colorScheme: analysis.colorScheme,
                visualStyle: analysis.visualStyle,
                segmentsCreated: analysis.segments.length,
                veo3OperationsSent: successfulOperations.length,
                segments: analysis.segments,
                veo3Results: veo3Results,
                outputDir: outputDir,
                note: "KH√îNG C√ì CH·ªÆ - CH·ªà VIDEO THU·∫¶N T√öY"
            };
            
            const resultPath = path.join(outputDir, 'mh370-no-text-32s-result.json');
            fs.writeFileSync(resultPath, JSON.stringify(finalResult, null, 2));
            
            console.log(`üìä [Step 3] ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${resultPath}`);
            
            console.log('üéâ [MH370] Ho√†n th√†nh t·∫°o video 32s KH√îNG C√ì CH·ªÆ!');
            console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
            console.log(`üéâ [MH370] M√†u s·∫Øc: ${analysis.colorScheme}`);
            console.log(`üéâ [MH370] ƒê√£ g·ª≠i ${successfulOperations.length} Veo3 requests`);
            console.log(`‚è≥ [MH370] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
            console.log(`üìù [MH370] L∆ØU √ù: Video n√†y KH√îNG C√ì CH·ªÆ, ch·ªâ c√≥ h√¨nh ·∫£nh thu·∫ßn t√∫y`);
            
            return {
                success: true,
                result: finalResult
            };
            
        } else {
            throw new Error('Kh√¥ng c√≥ video Veo3 n√†o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng');
        }
        
    } catch (error) {
        console.error(`‚ùå [MH370] L·ªói:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

console.log('üöÄ [START] T·∫°o video 32s MH370 KH√îNG C√ì CH·ªÆ...');
createMH370VideoNoText().then(result => {
    if (result.success) {
        console.log('üéâ [MH370] Ho√†n th√†nh th√†nh c√¥ng!');
        console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${result.result.overallTheme}`);
        console.log(`üéâ [MH370] ƒê√£ g·ª≠i ${result.result.veo3OperationsSent} Veo3 requests`);
        console.log(`üìù [MH370] L∆ØU √ù: Video n√†y KH√îNG C√ì CH·ªÆ, ch·ªâ c√≥ h√¨nh ·∫£nh thu·∫ßn t√∫y`);
    } else {
        console.log(`‚ùå [MH370] Th·∫•t b·∫°i: ${result.error}`);
    }
});
