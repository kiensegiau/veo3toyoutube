const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

/**
 * T·∫°o video 5 ph√∫t ho√†n ch·ªânh v·ªõi transcript MH370
 */
async function createCompleteMH370Video5min() {
    try {
        console.log('üöÄ [MH370] T·∫°o video 5 ph√∫t ho√†n ch·ªânh v·ªõi transcript MH370...');
        
        const serverUrl = 'http://localhost:8888';
        const youtubeUrl = 'https://youtu.be/52ru0qDc0LQ?si=zahSVRyDiQy7Jd6H';
        const outputDir = './temp/mh370-complete-5min';
        
        // 5 ph√∫t = 300 gi√¢y, chia th√†nh 36 segments 8s (288 gi√¢y ‚âà 4.8 ph√∫t)
        const TOTAL_SEGMENTS = 36;
        const SEGMENT_DURATION = 8;
        
        // T·∫°o th∆∞ m·ª•c output
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        // Step 1: L·∫•y transcript t·ª´ YouTube
        console.log('üìù [Step 1] L·∫•y transcript t·ª´ YouTube MH370...');
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                url: youtubeUrl,
                lang: 'vi'
            })
        });
        
        const transcriptResult = await transcriptResponse.json();
        console.log('üìù [Step 1] Transcript result:', transcriptResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!transcriptResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y transcript: ${transcriptResult.message}`);
        }
        
        const transcriptText = typeof transcriptResult.transcript === 'string' ? 
            transcriptResult.transcript : 
            JSON.stringify(transcriptResult.transcript);
        
        console.log(`üìù [Step 1] Transcript: ${transcriptText.substring(0, 300)}...`);
        
        // Step 2: ChatGPT ph√¢n t√≠ch v√† t·∫°o prompt ƒë·ªìng nh·∫•t cho 36 segments
        console.log('ü§ñ [Step 2] ChatGPT t·∫°o prompt ƒë·ªìng nh·∫•t cho 36 segments (5 ph√∫t)...');
        
        const chatGPTResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    { 
                        role: "system", 
                        content: `B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3 v·ªõi kh·∫£ nƒÉng t·∫°o h√¨nh ·∫£nh ƒë·ªìng nh·∫•t v√† li·ªÅn m·∫°ch.

Nhi·ªám v·ª•: D·ª±a tr√™n transcript v·ªÅ MH370, t·∫°o 36 prompts cho 36 segments 8s (t·ªïng 288s ‚âà 5 ph√∫t) v·ªõi:
1. H√åNH ·∫¢NH ƒê·ªíNG NH·∫§T v·ªÅ ch·ªß ƒë·ªÅ MH370
2. M√ÄU S·∫ÆC NH·∫§T QU√ÅN (xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng)
3. PHONG C√ÅCH T√ÄI LI·ªÜU ƒêI·ªÄU TRA
4. CHUY·ªÇN TI·∫æP M∆Ø·ª¢T M√Ä gi·ªØa c√°c segments
5. CHI TI·∫æT C·ª§ TH·ªÇ cho t·ª´ng segment

Tr·∫£ v·ªÅ JSON format:
{
    "overallTheme": "Ch·ªß ƒë·ªÅ t·ªïng th·ªÉ",
    "colorScheme": "B·∫£ng m√†u ch√≠nh",
    "visualStyle": "Phong c√°ch visual",
    "segments": [
        {
            "timeRange": "0-8s",
            "focus": "N·ªôi dung ch√≠nh c·ªßa segment",
            "prompt": "Prompt chi ti·∫øt cho Veo3 v·ªõi h√¨nh ·∫£nh c·ª• th·ªÉ"
        },
        ... (t·∫•t c·∫£ 36 segments)
    ]
}

Ch√∫ √Ω: T·∫°o ƒë·ªß 36 segments, m·ªói segment 8s. Ph√¢n chia n·ªôi dung transcript ƒë·ªÉ cover to√†n b·ªô c√¢u chuy·ªán MH370.` 
                    },
                    { 
                        role: "user", 
                        content: `D·ª±a tr√™n transcript v·ªÅ MH370 n√†y, t·∫°o 36 prompts ƒë·ªìng nh·∫•t cho video 5 ph√∫t:

TRANSCRIPT:
${transcriptText}

Y√äU C·∫¶U:
- M·ªói segment 8s ph·∫£i c√≥ h√¨nh ·∫£nh c·ª• th·ªÉ v·ªÅ MH370
- ƒê·ªìng nh·∫•t v·ªÅ m√†u s·∫Øc v√† phong c√°ch
- Chuy·ªÉn ti·∫øp m∆∞·ª£t m√† gi·ªØa c√°c segments
- Chi ti·∫øt c·ª• th·ªÉ: m√°y bay, bi·ªÉn, v·ªá tinh, ƒë·ªì h·ªça ƒëi·ªÅu tra
- Ph√¢n chia n·ªôi dung transcript ƒë·ªÅu nhau cho 36 segments` 
                    }
                ],
                max_tokens: 8000,
                temperature: 0.7
            })
        });
        
        const chatGPTResult = await chatGPTResponse.json();
        console.log('ü§ñ [Step 2] ChatGPT result:', chatGPTResult.choices ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!chatGPTResult.choices) {
            throw new Error('ChatGPT kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£');
        }
        
        const analysisText = chatGPTResult.choices[0].message.content;
        console.log(`ü§ñ [Step 2] Ph√¢n t√≠ch ho√†n ch·ªânh:`);
        console.log(analysisText);
        
        // Parse JSON t·ª´ response
        let analysis;
        try {
            const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                analysis = JSON.parse(jsonMatch[0]);
                console.log(`‚úÖ [Step 2] ƒê√£ ph√¢n t√≠ch: ${analysis.overallTheme}`);
                console.log(`‚úÖ [Step 2] M√†u s·∫Øc: ${analysis.colorScheme}`);
                console.log(`‚úÖ [Step 2] Phong c√°ch: ${analysis.visualStyle}`);
            } else {
                throw new Error('No JSON found in response');
            }
        } catch (parseError) {
            console.warn(`‚ö†Ô∏è [Step 2] Kh√¥ng th·ªÉ parse JSON, t·∫°o mock analysis`);
            
            // Mock analysis fallback - T·∫°o 36 segments t·ª± ƒë·ªông
            const topics = [
                "MH370 disappearance and passenger perspective",
                "Flight path deviation over Malaysian peninsula", 
                "Radar tracking the aircraft",
                "Last transmission and communication",
                "Satellite pings in Indian Ocean",
                "Initial search operations in South China Sea",
                "Malaysian authorities investigation",
                "International search coordination",
                "Oceanic search in Southern Indian Ocean",
                "Deep sea search technology",
                "Underwater vehicle deployment",
                "Satellite data analysis",
                "Radar and military tracking",
                "Passenger manifest and investigation",
                "Debris field discoveries",
                "Flight recorder search",
                "Black box detection technology",
                "Wave and current analysis",
                "Ocean depth mapping",
                "Search vessel operations",
                "Underwater vehicles deployment",
                "Sonar scanning operations",
                "Deep ocean exploration",
                "Technical search equipment",
                "International cooperation",
                "Search timeline and milestones",
                "Debris identification process",
                "Ocean current modeling",
                "Search area calculations",
                "Technology advances in search",
                "Continued investigation efforts",
                "Family perspectives and impact",
                "Media coverage and documentation",
                "Scientific analysis",
                "Current search status",
                "Future investigation plans"
            ];
            
            const segments = [];
            for (let i = 0; i < 36; i++) {
                const startTime = i * 8;
                const endTime = (i + 1) * 8;
                segments.push({
                    timeRange: `${startTime}-${endTime}s`,
                    focus: topics[i] || `MH370 investigation segment ${i + 1}`,
                    prompt: `Create a professional documentary-style video about ${topics[i] || 'MH370 investigation'}. Deep blue and black color scheme with white text overlays. Professional investigation graphics showing detailed information about Malaysia Airlines MH370 investigation. Cinematic camera movements with ocean imagery, satellite graphics, and investigation equipment.`
                });
            }
            
            analysis = {
                overallTheme: "MH370 Investigation Documentary - 5 Minutes",
                colorScheme: "Deep blue, black, white",
                visualStyle: "Documentary investigation style",
                segments: segments
            };
        }
        
        // Step 3: T·∫°o 36 video Veo3 tu·∫ßn t·ª± v·ªõi prompts ƒë·ªìng nh·∫•t
        console.log('üé¨ [Step 3] T·∫°o 36 video Veo3 tu·∫ßn t·ª± v·ªõi prompts ƒë·ªìng nh·∫•t (5 ph√∫t)...');
        
        const veo3Results = [];
        
        for (let i = 0; i < analysis.segments.length; i++) {
            const segment = analysis.segments[i];
            console.log(`üé¨ [Step 3] T·∫°o video segment ${i + 1}: ${segment.timeRange}`);
            console.log(`üé¨ [Step 3] Focus: ${segment.focus}`);
            console.log(`üé¨ [Step 3] Prompt: ${segment.prompt.substring(0, 100)}...`);
            
            try {
                const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        input: segment.prompt,
                        prompt: segment.prompt
                    })
                });
                
                const veo3Result = await veo3Response.json();
                
                if (veo3Result.success) {
                    console.log(`‚úÖ [Step 3] Segment ${i + 1} Veo3: ${veo3Result.operationName}`);
                    veo3Results.push({
                        segmentIndex: i,
                        timeRange: segment.timeRange,
                        focus: segment.focus,
                        prompt: segment.prompt,
                        operationId: veo3Result.operationName,
                        success: true
                    });
                } else {
                    console.log(`‚ùå [Step 3] Segment ${i + 1} th·∫•t b·∫°i: ${veo3Result.message}`);
                    veo3Results.push({
                        segmentIndex: i,
                        timeRange: segment.timeRange,
                        error: veo3Result.message,
                        success: false
                    });
                }
                
                // Ch·ªù gi·ªØa c√°c requests ƒë·ªÉ tr√°nh spam
                if (i < analysis.segments.length - 1) {
                    console.log(`‚è≥ [Step 3] Ch·ªù 5 gi√¢y tr∆∞·ªõc khi t·∫°o segment ti·∫øp theo...`);
                    await new Promise(resolve => setTimeout(resolve, 5000));
                }
                
            } catch (error) {
                console.log(`‚ùå [Step 3] Segment ${i + 1} l·ªói: ${error.message}`);
                veo3Results.push({
                    segmentIndex: i,
                    timeRange: segment.timeRange,
                    error: error.message,
                    success: false
                });
            }
        }
        
        const successfulOperations = veo3Results.filter(r => r.success);
        console.log(`‚úÖ [Step 3] ƒê√£ g·ª≠i ${successfulOperations.length}/36 Veo3 requests`);
        
        if (successfulOperations.length > 0) {
            console.log(`üöÄ [Step 3] T·∫•t c·∫£ Veo3 ƒëang ch·∫°y ng·∫ßm...`);
            console.log(`üöÄ [Step 3] C√°c operation IDs:`);
            successfulOperations.forEach(op => {
                console.log(`üöÄ [Step 3] - Segment ${op.segmentIndex + 1}: ${op.operationId}`);
            });
            
            console.log(`‚è≥ [Step 3] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
            console.log(`‚è≥ [Step 3] Ki·ªÉm tra th∆∞ m·ª•c public/audio/ ƒë·ªÉ xem video m·ªõi`);
            
            // L∆∞u k·∫øt qu·∫£ ho√†n ch·ªânh
            const finalResult = {
                timestamp: new Date().toISOString(),
                youtubeUrl: youtubeUrl,
                transcript: transcriptText,
                overallTheme: analysis.overallTheme,
                colorScheme: analysis.colorScheme,
                visualStyle: analysis.visualStyle,
                segmentsCreated: analysis.segments.length,
                veo3OperationsSent: successfulOperations.length,
                segments: analysis.segments,
                veo3Results: veo3Results,
                outputDir: outputDir
            };
            
            const resultPath = path.join(outputDir, 'mh370-complete-5min-result.json');
            fs.writeFileSync(resultPath, JSON.stringify(finalResult, null, 2));
            
            console.log(`üìä [Step 3] ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${resultPath}`);
            
            console.log('üéâ [MH370] Ho√†n th√†nh t·∫°o video 5 ph√∫t v·ªõi transcript MH370!');
            console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
            console.log(`üéâ [MH370] M√†u s·∫Øc: ${analysis.colorScheme}`);
            console.log(`üéâ [MH370] ƒê√£ g·ª≠i ${successfulOperations.length} Veo3 requests`);
            console.log(`‚è≥ [MH370] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
            
            return {
                success: true,
                result: finalResult
            };
            
        } else {
            throw new Error('Kh√¥ng c√≥ video Veo3 n√†o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng');
        }
        
    } catch (error) {
        console.error(`‚ùå [MH370] L·ªói:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

console.log('üöÄ [START] T·∫°o video 5 ph√∫t ho√†n ch·ªânh v·ªõi transcript MH370...');
createCompleteMH370Video5min().then(result => {
    if (result.success) {
        console.log('üéâ [MH370] Ho√†n th√†nh th√†nh c√¥ng!');
        console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${result.result.overallTheme}`);
        console.log(`üéâ [MH370] ƒê√£ g·ª≠i ${result.result.veo3OperationsSent} Veo3 requests`);
    } else {
        console.log(`‚ùå [MH370] Th·∫•t b·∫°i: ${result.error}`);
    }
});
