const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

/**
 * T·∫°o video 5 ph√∫t ho√†n ch·ªânh v·ªõi transcript MH370
 */
async function createCompleteMH370Video5min() {
    try {
        console.log('üöÄ [MH370] T·∫°o video 1 ph√∫t ho√†n ch·ªânh v·ªõi transcript MH370...');
        
        const serverUrl = 'http://localhost:8888';
        const youtubeUrl = 'https://www.youtube.com/watch?v=52ru0qDc0LQ';
        const outputDir = './temp/mh370-complete';
        const MAX_DURATION = 30; // Test v·ªõi 30 gi√¢y
        
        // Validate URL
        const validUrl = youtubeUrl.match(/^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/.+$/);
        if (!validUrl) {
            throw new Error('URL YouTube kh√¥ng h·ª£p l·ªá');
        }
        
        // Validate URL
        if (!youtubeUrl.match(/^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/.+$/)) {
            throw new Error('URL YouTube kh√¥ng h·ª£p l·ªá');
        }
        
        // Th√¥ng s·ªë segments
        const SEGMENT_DURATION = 8; // M·ªói segment d√†i 8 gi√¢y

        // S·ª≠ d·ª•ng gi·ªõi h·∫°n 5 ph√∫t c·ªë ƒë·ªãnh
        const videoDuration = MAX_DURATION; // 5 ph√∫t = 300 gi√¢y
        const TOTAL_SEGMENTS = Math.ceil(videoDuration / SEGMENT_DURATION);
        
        console.log(`üìä [Info] Th·ªùi l∆∞·ª£ng s·∫Ω x·ª≠ l√Ω: ${videoDuration} gi√¢y (gi·ªõi h·∫°n ${MAX_DURATION} gi√¢y)`);
        console.log(`üìä [Info] S·ªë l∆∞·ª£ng segments: ${TOTAL_SEGMENTS} (${SEGMENT_DURATION}s/segment)`);
        
        // T·∫°o th∆∞ m·ª•c output
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        // Step 1: L·∫•y transcript t·ª´ YouTube
        console.log('üìù [Step 1] L·∫•y transcript t·ª´ YouTube MH370...');
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                url: youtubeUrl,
                lang: 'vi'
            })
        });
        
        const transcriptResult = await transcriptResponse.json();
        console.log('üìù [Step 1] Transcript result:', transcriptResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!transcriptResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y transcript: ${transcriptResult.message}`);
        }
        
        const transcriptText = typeof transcriptResult.transcript === 'string' ? 
            transcriptResult.transcript : 
            JSON.stringify(transcriptResult.transcript);
        
        console.log(`üìù [Step 1] Transcript: ${transcriptText.substring(0, 300)}...`);
        
        // Step 2: ChatGPT ph√¢n t√≠ch v√† t·∫°o prompt ƒë·ªìng nh·∫•t cho 36 segments
        console.log(`ü§ñ [Step 2] ChatGPT t·∫°o prompt ƒë·ªìng nh·∫•t cho ${TOTAL_SEGMENTS} segments (1 ph√∫t)...`);
        
        const chatGPTResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    { 
                        role: "system", 
                        content: `B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3 v·ªõi kh·∫£ nƒÉng t·∫°o h√¨nh ·∫£nh ƒë·ªìng nh·∫•t v√† li·ªÅn m·∫°ch.

Nhi·ªám v·ª•: D·ª±a tr√™n transcript v·ªÅ MH370, t·∫°o k·ªãch b·∫£n chi ti·∫øt cho ${TOTAL_SEGMENTS} segments video, m·ªói segment ${SEGMENT_DURATION}s (t·ªïng ${TOTAL_SEGMENTS * SEGMENT_DURATION}s = ${Math.floor((TOTAL_SEGMENTS * SEGMENT_DURATION) / 60)} ph√∫t ${(TOTAL_SEGMENTS * SEGMENT_DURATION) % 60} gi√¢y).

M·ªñI SEGMENT 8 GI√ÇY C·∫¶N:
1. T·∫≠p trung v√†o M·ªòT ch·ªß ƒë·ªÅ/n·ªôi dung ch√≠nh
2. Chi ti·∫øt timeline theo t·ª´ng 2 gi√¢y:
   {
     "timeStart": 0,
     "timeEnd": 2,
     "action": "M√¥ t·∫£ h√†nh ƒë·ªông/c·∫£nh quay c·ª• th·ªÉ",
     "cameraStyle": "G√≥c m√°y v√† phong c√°ch quay",
     "soundFocus": "Focus √¢m thanh ch√≠nh",
     "visualDetails": "Chi ti·∫øt v·ªÅ √°nh s√°ng v√† kh√¥ng kh√≠"
   }

2. ƒê·∫∑c ƒëi·ªÉm chung cho m·ªói segment:
1. H√åNH ·∫¢NH ƒê·ªíNG NH·∫§T v·ªÅ ch·ªß ƒë·ªÅ MH370
2. M√ÄU S·∫ÆC NH·∫§T QU√ÅN (xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng)
3. PHONG C√ÅCH T√ÄI LI·ªÜU ƒêI·ªÄU TRA
4. CHUY·ªÇN TI·∫æP M∆Ø·ª¢T M√Ä gi·ªØa c√°c segments
5. CHI TI·∫æT C·ª§ TH·ªÇ cho t·ª´ng segment

Tr·∫£ v·ªÅ JSON format:
{
    "overallTheme": "Ch·ªß ƒë·ªÅ t·ªïng th·ªÉ",
    "colorScheme": "B·∫£ng m√†u ch√≠nh",
    "visualStyle": "Phong c√°ch visual",
    "segments": [
        {
            "timeRange": "0-8s",
            "focus": "N·ªôi dung ch√≠nh c·ªßa segment",
            "prompt": "Prompt t·ªïng qu√°t",
            "detailedTimeline": [
                {
                    "timeStart": 0,
                    "timeEnd": 2,
                    "action": "M√¥ t·∫£ chi ti·∫øt h√†nh ƒë·ªông/c·∫£nh quay (v√≠ d·ª•: Close-up of radar screen showing MH370's last known position)",
                    "cameraStyle": "G√≥c m√°y v√† k·ªπ thu·∫≠t quay c·ª• th·ªÉ (v√≠ d·ª•: Macro close-up, slow push in)",
                    "visualStyle": "Chi ti·∫øt v·ªÅ √°nh s√°ng v√† kh√¥ng kh√≠ (v√≠ d·ª•: Low-key lighting, blue tint)",
                    "transitionEffect": "Hi·ªáu ·ª©ng chuy·ªÉn c·∫£nh (v√≠ d·ª•: Subtle fade through)",
                    "graphicElements": "ƒê·ªì h·ªça overlay (v√≠ d·ª•: Flight path overlay, timestamp)",
                    "soundFocus": "Focus √¢m thanh (v√≠ d·ª•: Radar beeping, muffled radio chatter)"
                },
                ... // Chi ti·∫øt cho t·ª´ng 2 gi√¢y
            ]
        },
        ... (t·∫•t c·∫£ ${TOTAL_SEGMENTS} segments)
    ]
}

Ch√∫ √Ω: 
1. T·∫°o ƒë·ªß ${TOTAL_SEGMENTS} segments, m·ªói segment ${SEGMENT_DURATION}s
2. Ph√¢n chia n·ªôi dung transcript ƒë·ªÉ cover to√†n b·ªô c√¢u chuy·ªán MH370 theo th·ªùi l∆∞·ª£ng video g·ªëc ${Math.floor(videoDuration / 60)} ph√∫t ${videoDuration % 60} gi√¢y
3. ƒê·∫£m b·∫£o n·ªôi dung ƒë∆∞·ª£c ph√¢n b·ªï ƒë·ªÅu v√† h·ª£p l√Ω theo timeline c·ªßa video` 
                    },
                    { 
                        role: "user", 
                        content: `D·ª±a tr√™n transcript v·ªÅ MH370 n√†y, t·∫°o 36 prompts ƒë·ªìng nh·∫•t cho video 5 ph√∫t:

TRANSCRIPT:
${transcriptText}

Y√äU C·∫¶U:
- M·ªói segment 8s ph·∫£i c√≥ h√¨nh ·∫£nh c·ª• th·ªÉ v·ªÅ MH370
- ƒê·ªìng nh·∫•t v·ªÅ m√†u s·∫Øc v√† phong c√°ch
- Chuy·ªÉn ti·∫øp m∆∞·ª£t m√† gi·ªØa c√°c segments
- Chi ti·∫øt c·ª• th·ªÉ: m√°y bay, bi·ªÉn, v·ªá tinh, ƒë·ªì h·ªça ƒëi·ªÅu tra
- Ph√¢n chia n·ªôi dung transcript ƒë·ªÅu nhau cho 36 segments` 
                    }
                ],
                max_tokens: 8000,
                temperature: 0.7
            })
        });
        
        const chatGPTResult = await chatGPTResponse.json();
        console.log('ü§ñ [Step 2] ChatGPT result:', chatGPTResult.choices ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!chatGPTResult.choices) {
            throw new Error('ChatGPT kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£');
        }
        
        const analysisText = chatGPTResult.choices[0].message.content;
        console.log(`ü§ñ [Step 2] Ph√¢n t√≠ch ho√†n ch·ªânh:`);
        console.log(analysisText);
        
        // Parse JSON t·ª´ response
        let analysis;
        try {
            const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                analysis = JSON.parse(jsonMatch[0]);
                console.log(`‚úÖ [Step 2] ƒê√£ ph√¢n t√≠ch: ${analysis.overallTheme}`);
                console.log(`‚úÖ [Step 2] M√†u s·∫Øc: ${analysis.colorScheme}`);
                console.log(`‚úÖ [Step 2] Phong c√°ch: ${analysis.visualStyle}`);
            } else {
                throw new Error('No JSON found in response');
            }
        } catch (parseError) {
            console.error(`‚ùå [Step 2] L·ªói khi parse JSON response: ${parseError.message}`);
            throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£ t·ª´ ChatGPT. Vui l√≤ng th·ª≠ l·∫°i.');
        }
        
        // Step 3: T·ªëi ∆∞u prompt cho t·ª´ng segment b·∫±ng ChatGPT
        console.log('ü§ñ [Step 3] T·ªëi ∆∞u prompt cho t·ª´ng segment b·∫±ng ChatGPT...');
        
        const optimizedSegments = [];
        for (let i = 0; i < analysis.segments.length; i++) {
            const segment = analysis.segments[i];
            console.log(`ü§ñ [Step 3] T·ªëi ∆∞u prompt cho segment ${i + 1}: ${segment.timeRange}`);
            
            try {
                const optimizationResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${OPENAI_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o-mini',
                        messages: [
                            {
                                role: "system",
                                content: `B·∫°n l√† chuy√™n gia t·ªëi ∆∞u prompt cho Veo3 AI.
Nhi·ªám v·ª•: T·ªëi ∆∞u prompt cho segment video 8 gi√¢y ƒë·ªÉ t·∫°o video m∆∞·ª£t m√† v√† chuy√™n nghi·ªáp.

Y√äU C·∫¶U:
1. T·∫≠p trung v√†o M·ªòT ch·ªß ƒë·ªÅ ch√≠nh trong 8 gi√¢y
2. Ph√¢n t√≠ch chi ti·∫øt t·ª´ng 2 gi√¢y theo format:
   {
     "timeStart": 0,
     "timeEnd": 2,
     "action": "M√¥ t·∫£ h√†nh ƒë·ªông/c·∫£nh quay chi ti·∫øt",
     "cameraStyle": "G√≥c m√°y v√† phong c√°ch quay c·ª• th·ªÉ",
     "soundFocus": "Focus √¢m thanh ch√≠nh c·ªßa c·∫£nh",
     "visualDetails": "Chi ti·∫øt v·ªÅ √°nh s√°ng v√† kh√¥ng kh√≠"
   }
3. ƒê·∫£m b·∫£o m·ªói ƒëo·∫°n 2 gi√¢y c√≥:
   - M·ªôt h√†nh ƒë·ªông r√µ r√†ng, c·ª• th·ªÉ
   - G√≥c m√°y v√† chuy·ªÉn ƒë·ªông camera chuy√™n nghi·ªáp
   - √Çm thanh ph√π h·ª£p v·ªõi c·∫£nh
   - Visual v√† √°nh s√°ng ƒë·∫∑c tr∆∞ng
4. Chuy·ªÉn c·∫£nh m∆∞·ª£t m√† gi·ªØa c√°c ƒëo·∫°n 2 gi√¢y
5. Tr·∫£ v·ªÅ JSON format:
{
    "segmentTheme": "Ch·ªß ƒë·ªÅ ch√≠nh c·ªßa segment 8 gi√¢y",
    "timeline": [
        {
            "timeStart": 0,
            "timeEnd": 2,
            "action": "M√¥ t·∫£ h√†nh ƒë·ªông/c·∫£nh quay c·ª• th·ªÉ",
            "cameraStyle": "G√≥c m√°y v√† phong c√°ch quay",
            "soundFocus": "Focus √¢m thanh ch√≠nh",
            "visualDetails": "Chi ti·∫øt v·ªÅ √°nh s√°ng v√† kh√¥ng kh√≠"
        },
        ... // Chi ti·∫øt cho m·ªói 2-3 gi√¢y
    ],
    "visualNotes": {
        "cameraMovement": "Ghi ch√∫ v·ªÅ chuy·ªÉn ƒë·ªông camera",
        "lightingSetup": "Thi·∫øt l·∫≠p √°nh s√°ng",
        "graphicsStyle": "Phong c√°ch ƒë·ªì h·ªça",
        "colorPalette": "B·∫£ng m√†u chi ti·∫øt"
    },
    "transitionNotes": {
        "fromPrevious": "Chuy·ªÉn c·∫£nh t·ª´ segment tr∆∞·ªõc",
        "toNext": "Chuy·ªÉn c·∫£nh sang segment sau"
    }
}`
                            },
                            {
                                role: "user",
                                content: `T·ªëi ∆∞u prompt sau cho segment ${segment.timeRange}:
Focus: ${segment.focus}
Original prompt: ${segment.prompt}

H√£y t·ªëi ∆∞u ƒë·ªÉ t·∫°o video 8 gi√¢y ƒë·∫πp v√† chuy√™n nghi·ªáp nh·∫•t.`
                            }
                        ],
                        max_tokens: 1000,
                        temperature: 0.7
                    })
                });

                const optimizationResult = await optimizationResponse.json();
                
                if (optimizationResult.choices) {
                    const content = optimizationResult.choices[0].message.content;
                    console.log('\nüîç [DEBUG] Raw ChatGPT Response for segment ' + (i + 1) + ':');
                    console.log(content);
                    
                    // T√¨m v√† parse ph·∫ßn JSON trong response
                    const jsonMatch = content.match(/\{[\s\S]*\}/);
                    if (jsonMatch) {
                        try {
                            const optimization = JSON.parse(jsonMatch[0]);
                            console.log('\n‚úÖ [DEBUG] Parsed optimization object:');
                            console.log(JSON.stringify(optimization, null, 2));
                            
                            // Ki·ªÉm tra c·∫•u tr√∫c JSON tr∆∞·ªõc khi s·ª≠ d·ª•ng
                            if (!optimization.segmentTheme || !optimization.timeline || !optimization.visualNotes || !optimization.transitionNotes) {
                                throw new Error('JSON response thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc');
                            }

                            // Ki·ªÉm tra timeline array
                            if (!Array.isArray(optimization.timeline) || optimization.timeline.length === 0) {
                                throw new Error('Timeline kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng');
                            }

                            console.log(`‚úÖ [Step 3] ƒê√£ t·ªëi ∆∞u segment ${i + 1}`);
                            optimizedSegments.push({
                                ...segment,
                                originalPrompt: segment.prompt,
                                segmentTheme: optimization.segmentTheme,
                                prompt: {
                                    theme: optimization.segmentTheme,
                                    timeline: optimization.timeline,
                                    visualNotes: optimization.visualNotes,
                                    transitionNotes: optimization.transitionNotes
                                }
                            });
                        } catch (jsonError) {
                            console.error(`‚ùå [DEBUG] JSON Parse error: ${jsonError.message}`);
                            console.error('‚ùå [DEBUG] Problem JSON:', jsonMatch[0]);
                            throw new Error(`Kh√¥ng th·ªÉ parse JSON t·ª´ response: ${jsonError.message}`);
                        }
                    } else {
                        console.error('‚ùå [DEBUG] No JSON found in response');
                        console.error('‚ùå [DEBUG] Full response:', content);
                        throw new Error('Kh√¥ng t√¨m th·∫•y JSON trong response c·ªßa ChatGPT');
                    }
                } else {
                    console.log(`‚ö†Ô∏è [Step 3] Kh√¥ng th·ªÉ t·ªëi ∆∞u segment ${i + 1}, gi·ªØ nguy√™n prompt g·ªëc`);
                    optimizedSegments.push(segment);
                }

                // Ch·ªù gi·ªØa c√°c requests ƒë·ªÉ tr√°nh rate limit
                if (i < analysis.segments.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }

            } catch (error) {
                console.log(`‚ùå [Step 3] L·ªói khi t·ªëi ∆∞u segment ${i + 1}: ${error.message}`);
                optimizedSegments.push(segment);
            }
        }

        // Step 4: T·∫°o video Veo3 tu·∫ßn t·ª± v·ªõi prompts ƒë√£ t·ªëi ∆∞u
        console.log(`üé¨ [Step 4] T·∫°o ${TOTAL_SEGMENTS} video Veo3 tu·∫ßn t·ª± v·ªõi prompts ƒë√£ t·ªëi ∆∞u (1 ph√∫t)...`);
        
        const veo3Results = [];
        
        for (let i = 0; i < optimizedSegments.length; i++) {
            const segment = optimizedSegments[i];
            console.log(`üé¨ [Step 4] T·∫°o video segment ${i + 1}: ${segment.timeRange}`);
            console.log(`üé¨ [Step 4] Focus: ${segment.focus}`);
            console.log(`üé¨ [Step 4] Theme: ${segment.prompt.theme}`);
            console.log('üé¨ [Step 4] Full prompt:', JSON.stringify(segment.prompt, null, 2));
            
            try {
                // Ki·ªÉm tra c·∫•u tr√∫c prompt m·ªôt l·∫ßn n·ªØa tr∆∞·ªõc khi g·ª≠i
                const promptToSend = segment.prompt;
                if (!promptToSend.theme || !promptToSend.timeline || !promptToSend.visualNotes || !promptToSend.transitionNotes) {
                    throw new Error(`Segment ${i + 1}: Prompt thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc`);
                }
                
                // Log chi ti·∫øt ƒë·ªÉ ki·ªÉm tra
                console.log(`\nüîç [DEBUG] Segment ${i + 1} Prompt Details:`);
                console.log('Theme:', promptToSend.theme);
                console.log('Timeline count:', promptToSend.timeline.length);
                console.log('Visual Notes:', Object.keys(promptToSend.visualNotes).join(', '));
                console.log('Transition Notes:', Object.keys(promptToSend.transitionNotes).join(', '));
                
                const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        input: segment.segmentTheme || segment.focus,
                        prompt: promptToSend
                    })
                });
                
                const veo3Result = await veo3Response.json();
                
                if (veo3Result.success) {
                    console.log(`‚úÖ [Step 4] Segment ${i + 1} Veo3: ${veo3Result.operationName}`);
                    veo3Results.push({
                        segmentIndex: i,
                        timeRange: segment.timeRange,
                        focus: segment.focus,
                        prompt: segment.prompt,
                        operationId: veo3Result.operationName,
                        success: true
                    });
                } else {
                    console.log(`‚ùå [Step 4] Segment ${i + 1} th·∫•t b·∫°i: ${veo3Result.message}`);
                    veo3Results.push({
                        segmentIndex: i,
                        timeRange: segment.timeRange,
                        error: veo3Result.message,
                        success: false
                    });
                }
                
                // Ch·ªù gi·ªØa c√°c requests ƒë·ªÉ tr√°nh spam
                if (i < optimizedSegments.length - 1) {
                    console.log(`‚è≥ [Step 4] Ch·ªù 5 gi√¢y tr∆∞·ªõc khi t·∫°o segment ti·∫øp theo...`);
                    await new Promise(resolve => setTimeout(resolve, 5000));
                }
                
            } catch (error) {
                console.log(`‚ùå [Step 4] Segment ${i + 1} l·ªói: ${error.message}`);
                veo3Results.push({
                    segmentIndex: i,
                    timeRange: segment.timeRange,
                    error: error.message,
                    success: false
                });
            }
        }
        
        const successfulOperations = veo3Results.filter(r => r.success);
        console.log(`‚úÖ [Step 4] ƒê√£ g·ª≠i ${successfulOperations.length}/36 Veo3 requests`);
        
        if (successfulOperations.length > 0) {
            console.log(`üöÄ [Step 4] T·∫•t c·∫£ Veo3 ƒëang ch·∫°y ng·∫ßm...`);
            console.log(`üöÄ [Step 4] C√°c operation IDs:`);
            successfulOperations.forEach(op => {
                console.log(`üöÄ [Step 4] - Segment ${op.segmentIndex + 1}: ${op.operationId}`);
            });
            
            console.log(`‚è≥ [Step 4] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
            console.log(`‚è≥ [Step 4] Ki·ªÉm tra th∆∞ m·ª•c public/audio/ ƒë·ªÉ xem video m·ªõi`);
            
            // L∆∞u k·∫øt qu·∫£ ho√†n ch·ªânh
            const finalResult = {
                timestamp: new Date().toISOString(),
                youtubeUrl: youtubeUrl,
                transcript: transcriptText,
                overallTheme: analysis.overallTheme,
                colorScheme: analysis.colorScheme,
                visualStyle: analysis.visualStyle,
                segmentsCreated: analysis.segments.length,
                veo3OperationsSent: successfulOperations.length,
                segments: optimizedSegments,
                veo3Results: veo3Results,
                outputDir: outputDir
            };
            
            const resultPath = path.join(outputDir, 'mh370-complete-5min-result.json');
            fs.writeFileSync(resultPath, JSON.stringify(finalResult, null, 2));
            
            console.log(`üìä [Step 4] ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${resultPath}`);
            
            console.log('üéâ [MH370] Ho√†n th√†nh t·∫°o video 1 ph√∫t v·ªõi transcript MH370!');
            console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
            console.log(`üéâ [MH370] M√†u s·∫Øc: ${analysis.colorScheme}`);
            console.log(`üéâ [MH370] ƒê√£ g·ª≠i ${successfulOperations.length} Veo3 requests`);
            console.log(`‚è≥ [MH370] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
            
            return {
                success: true,
                result: finalResult
            };
            
        } else {
            throw new Error('Kh√¥ng c√≥ video Veo3 n√†o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng');
        }
        
    } catch (error) {
        console.error(`‚ùå [MH370] L·ªói:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

console.log('üöÄ [START] T·∫°o video 1 ph√∫t ho√†n ch·ªânh v·ªõi transcript MH370...');
createCompleteMH370Video5min().then(result => {
    if (result.success) {
        console.log('üéâ [MH370] Ho√†n th√†nh th√†nh c√¥ng!');
        console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${result.result.overallTheme}`);
        console.log(`üéâ [MH370] ƒê√£ g·ª≠i ${result.result.veo3OperationsSent} Veo3 requests`);
    } else {
        console.log(`‚ùå [MH370] Th·∫•t b·∫°i: ${result.error}`);
    }
});
