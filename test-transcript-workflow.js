const fetch = require('node-fetch');

async function testTranscriptWorkflow() {
    try {
        console.log('üöÄ [Test] Test Transcript Workflow...');
        
        const serverUrl = 'http://localhost:8888';
        
        // Test ch·ªâ l·∫•y transcript tr∆∞·ªõc
        console.log('üìù [Step 1] Test l·∫•y transcript...');
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                videoUrl: './test.mp4',
                language: 'vi'
            })
        });
        
        const transcriptResult = await transcriptResponse.json();
        console.log('üìù [Step 1] Transcript result:', transcriptResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (transcriptResult.success) {
            console.log(`üìù [Step 1] Transcript: ${transcriptResult.transcript?.substring(0, 200)}...`);
            
            // Test ChatGPT ph√¢n t√≠ch transcript
            console.log('ü§ñ [Step 2] Test ChatGPT ph√¢n t√≠ch transcript...');
            const chatGPTResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer 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`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: 'gpt-4o',
                    messages: [
                        { 
                            role: "system", 
                            content: "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch n·ªôi dung video. Ph√¢n t√≠ch transcript v√† t√≥m t·∫Øt ch·ªß ƒë·ªÅ ch√≠nh." 
                        },
                        { 
                            role: "user", 
                            content: `Ph√¢n t√≠ch transcript n√†y v√† t√≥m t·∫Øt ch·ªß ƒë·ªÅ ch√≠nh:\n\n${transcriptResult.transcript}` 
                        }
                    ],
                    max_tokens: 500,
                    temperature: 0.7
                })
            });
            
            const chatGPTResult = await chatGPTResponse.json();
            console.log('ü§ñ [Step 2] ChatGPT result:', chatGPTResult.choices ? '‚úÖ Success' : '‚ùå Failed');
            
            if (chatGPTResult.choices) {
                console.log(`ü§ñ [Step 2] Ph√¢n t√≠ch: ${chatGPTResult.choices[0].message.content}`);
            }
            
        } else {
            console.log(`‚ùå [Step 1] Transcript th·∫•t b·∫°i: ${transcriptResult.message}`);
        }
        
    } catch (error) {
        console.error('‚ùå [Test] L·ªói:', error.message);
    }
}

console.log('üöÄ [START] Test Transcript Workflow...');
testTranscriptWorkflow();
