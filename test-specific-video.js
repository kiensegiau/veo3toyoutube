/**
 * Test script for specific YouTube video transcript
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:8888';
const TEST_VIDEO_URL = 'https://www.youtube.com/watch?v=VcROsS0Q3-g';

async function testSpecificVideo() {
    console.log('üß™ Testing transcript API v·ªõi video c·ª• th·ªÉ...\n');
    console.log(`üì∫ Video URL: ${TEST_VIDEO_URL}\n`);

    try {
        // Test 1: Get transcript
        console.log('1Ô∏è‚É£ L·∫•y l·ªùi tho·∫°i video...');
        const transcriptResponse = await fetch(`${BASE_URL}/api/get-transcript`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                url: TEST_VIDEO_URL,
                lang: 'en',
                text: true,
                mode: 'auto'
            })
        });

        const transcriptResult = await transcriptResponse.json();
        
        if (transcriptResult.success) {
            console.log('‚úÖ L·∫•y l·ªùi tho·∫°i th√†nh c√¥ng!');
            console.log('üìù N·ªôi dung l·ªùi tho·∫°i:');
            console.log('‚îÄ'.repeat(50));
            console.log(transcriptResult.transcript.content);
            console.log('‚îÄ'.repeat(50));
        } else {
            console.log('‚ùå L·ªói l·∫•y l·ªùi tho·∫°i:', transcriptResult.message);
            console.log('Chi ti·∫øt l·ªói:', transcriptResult.error);
        }

        // Test 2: Get video metadata
        console.log('\n2Ô∏è‚É£ L·∫•y th√¥ng tin video...');
        const metadataResponse = await fetch(`${BASE_URL}/api/get-video-metadata`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                videoId: 'VcROsS0Q3-g'
            })
        });

        const metadataResult = await metadataResponse.json();
        
        if (metadataResult.success) {
            console.log('‚úÖ L·∫•y metadata th√†nh c√¥ng!');
            console.log('üìä Th√¥ng tin video:');
            console.log(`   üì∫ Ti√™u ƒë·ªÅ: ${metadataResult.video.title}`);
            console.log(`   ‚è±Ô∏è Th·ªùi l∆∞·ª£ng: ${metadataResult.video.duration} gi√¢y`);
            console.log(`   üëÄ L∆∞·ª£t xem: ${metadataResult.video.viewCount?.toLocaleString() || 'N/A'}`);
            console.log(`   üëç L∆∞·ª£t th√≠ch: ${metadataResult.video.likeCount?.toLocaleString() || 'N/A'}`);
            console.log(`   üì∫ K√™nh: ${metadataResult.video.channel?.name || 'N/A'}`);
            console.log(`   üìÖ Ng√†y upload: ${metadataResult.video.uploadDate || 'N/A'}`);
        } else {
            console.log('‚ùå L·ªói l·∫•y metadata:', metadataResult.message);
        }

    } catch (error) {
        console.error('‚ùå L·ªói test:', error.message);
    }
}

// Run the test
if (require.main === module) {
    testSpecificVideo();
}

module.exports = { testSpecificVideo };
