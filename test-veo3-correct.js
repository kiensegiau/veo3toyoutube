const fetch = require('node-fetch');

async function testVeo3Correct() {
    try {
        console.log('üöÄ [testVeo3Correct] Test Veo3 v·ªõi logic chia video ƒë√∫ng');
        
        const videoPath = './test.mp4';
        const serverUrl = 'http://localhost:8888';
        
        // Test v·ªõi video 23 ph√∫t
        console.log('\nüìä [Test] Video info:');
        const extractResponse = await fetch(`${serverUrl}/api/extract-frames`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                videoPath: videoPath,
                count: 8, // Test v·ªõi 8 frames tr∆∞·ªõc
                interval: 8
            })
        });
        
        const extractResult = await extractResponse.json();
        if (extractResult.success) {
            const duration = extractResult.videoInfo.duration;
            console.log(`üìä Video duration: ${duration}s (${(duration/60).toFixed(1)} ph√∫t)`);
            console.log(`üìä Resolution: ${extractResult.videoInfo.width}x${extractResult.videoInfo.height}`);
            
            // T√≠nh to√°n s·ªë segments c·∫ßn thi·∫øt
            const segmentsNeeded = Math.ceil(duration / 8); // M·ªói 8 gi√¢y 1 segment
            const maxSegments = 64; // T·ªëi ƒëa 64 segments (8 ph√∫t)
            const finalSegments = Math.min(segmentsNeeded, maxSegments);
            
            console.log(`üìä Segments needed: ${segmentsNeeded}`);
            console.log(`üìä Final segments: ${finalSegments} (limited to ${maxSegments})`);
            console.log(`üìä Total video time: ${finalSegments * 8}s (${(finalSegments * 8 / 60).toFixed(1)} ph√∫t)`);
            
            if (segmentsNeeded > maxSegments) {
                console.log(`‚ö†Ô∏è Video qu√° d√†i! S·∫Ω ch·ªâ t·∫°o ${maxSegments} segments (${maxSegments * 8 / 60} ph√∫t)`);
                console.log(`üí° ƒê·ªÉ t·∫°o to√†n b·ªô video, c·∫ßn chia th√†nh nhi·ªÅu batch ho·∫∑c tƒÉng maxSegments`);
            }
        }
        
        // Test Hybrid workflow v·ªõi logic m·ªõi
        console.log('\nüöÄ [Test] Hybrid workflow v·ªõi logic m·ªõi...');
        const hybridResponse = await fetch(`${serverUrl}/api/veo3-hybrid-workflow`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                videoPath: videoPath,
                options: {
                    frameInterval: 8, // M·ªói 8 gi√¢y 1 frame
                    outputFilename: `veo3_hybrid_correct_${Date.now()}.mp4`
                }
            })
        });
        
        const hybridResult = await hybridResponse.json();
        console.log('üöÄ [Test] Hybrid workflow result:', hybridResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (hybridResult.success) {
            console.log('üöÄ [Test] Workflow completed successfully');
            console.log('üöÄ [Test] Next steps:', hybridResult.nextSteps);
        } else {
            console.log('‚ùå [Test] Error:', hybridResult.message);
        }
        
    } catch (error) {
        console.error('‚ùå [testVeo3Correct] L·ªói:', error);
    }
}

testVeo3Correct();
