const fetch = require('node-fetch');
const fs = require('fs');

async function refineWithChatGPTAndCreateVeo3() {
    try {
        console.log('üé¨ [Test] ƒê∆∞a k·∫øt qu·∫£ cho ChatGPT m√¥ t·∫£ chi ti·∫øt v√† ƒë·ªìng nh·∫•t...');
        
        const serverUrl = 'http://localhost:8888';
        
        // ƒê·ªçc k·∫øt qu·∫£ ph√¢n t√≠ch c√≥ s·∫µn
        console.log('üìñ [Step 1] ƒê·ªçc k·∫øt qu·∫£ ph√¢n t√≠ch...');
        const resultPath = './temp/veo3-simple/veo3-simple-result.json';
        const resultData = JSON.parse(fs.readFileSync(resultPath, 'utf8'));
        
        console.log(`üìñ [Step 1] ƒê√£ ƒë·ªçc ${resultData.veo3JSON.length} segments`);
        
        // T·∫°o prompt cho ChatGPT ƒë·ªÉ m√¥ t·∫£ chi ti·∫øt v√† ƒë·ªìng nh·∫•t
        console.log('ü§ñ [Step 2] G·ª≠i k·∫øt qu·∫£ cho ChatGPT ƒë·ªÉ m√¥ t·∫£ chi ti·∫øt...');
        
        const chatgptPrompt = `B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3. 

Nhi·ªám v·ª•: T·∫°o m·ªôt prompt CHI TI·∫æT v√† ƒê·ªíNG NH·∫§T cho video 8 gi√¢y d·ª±a tr√™n ph√¢n t√≠ch t·ª´ng c·∫£nh.

PH√ÇN T√çCH G·ªêC:
${resultData.veo3JSON.map((segment, index) => 
    `C·∫£nh ${index + 1} (${segment.timeStart}s-${segment.timeEnd}s): ${segment.action}`
).join('\n')}

Y√äU C·∫¶U:
1. T·∫°o prompt CHI TI·∫æT cho to√†n b·ªô video 8 gi√¢y
2. ƒê·∫£m b·∫£o T√çNH ƒê·ªíNG NH·∫§T gi·ªØa c√°c c·∫£nh
3. M√¥ t·∫£ r√µ r√†ng t·ª´ng gi√¢y (0-2s, 2-4s, 4-6s, 6-8s)
4. Bao g·ªìm camera style, lighting, colors, mood
5. T·∫°o c·∫£m gi√°c LI·ªÄN M·∫†CH v√† LOGIC
6. Prompt ph·∫£i d√†i √≠t nh·∫•t 200 t·ª´

Tr·∫£ v·ªÅ prompt ho√†n ch·ªânh cho Veo3:`;

        // G·ªçi ChatGPT API
        const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';
        
        const chatgptResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    { role: 'system', content: 'B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3 v·ªõi kh·∫£ nƒÉng m√¥ t·∫£ chi ti·∫øt v√† ƒë·ªìng nh·∫•t.' },
                    { role: 'user', content: chatgptPrompt }
                ],
                max_tokens: 1000,
                temperature: 0.7
            })
        });
        
        const chatgptResult = await chatgptResponse.json();
        
        if (chatgptResult.choices && chatgptResult.choices[0]) {
            const refinedPrompt = chatgptResult.choices[0].message.content;
            console.log('ü§ñ [Step 2] ChatGPT ƒë√£ t·∫°o prompt chi ti·∫øt:');
            console.log(`ü§ñ [Step 2] ${refinedPrompt.substring(0, 200)}...`);
            
            // T·∫°o video Veo3 v·ªõi prompt ƒë√£ ƒë∆∞·ª£c ChatGPT refine
            console.log('üé¨ [Step 3] T·∫°o video Veo3 v·ªõi prompt ƒë√£ refine...');
            const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    input: refinedPrompt,
                    prompt: refinedPrompt
                })
            });
            
            const veo3Result = await veo3Response.json();
            console.log('üé¨ [Step 3] Veo3 result:', veo3Result.success ? '‚úÖ Success' : '‚ùå Failed');
            
            if (veo3Result.success) {
                console.log(`üé¨ [Step 3] Video Veo3 ƒë√£ ƒë∆∞·ª£c t·∫°o: ${veo3Result.operationName}`);
                console.log(`üé¨ [Step 3] Status: ${veo3Result.videoStatus}`);
                
                // L∆∞u k·∫øt qu·∫£ ho√†n ch·ªânh
                const finalResult = {
                    timestamp: new Date().toISOString(),
                    originalVideo: 'test.mp4 (8s)',
                    analysisSegments: resultData.veo3JSON.length,
                    originalAnalysis: resultData.veo3JSON,
                    chatgptRefinedPrompt: refinedPrompt,
                    veo3Operation: veo3Result.operationName,
                    veo3Status: veo3Result.videoStatus
                };
                
                const finalPath = './temp/veo3-chatgpt-refined-result.json';
                fs.writeFileSync(finalPath, JSON.stringify(finalResult, null, 2));
                
                console.log(`üìä [Step 3] ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${finalPath}`);
                
                // T√≥m t·∫Øt
                console.log('üìä [Step 4] T√≥m t·∫Øt:');
                console.log(`üìä [Step 4] - Video g·ªëc: test.mp4 (8s)`);
                console.log(`üìä [Step 4] - Ph√¢n t√≠ch g·ªëc: ${resultData.veo3JSON.length} segments`);
                console.log(`üìä [Step 4] - ChatGPT refine: ‚úÖ Ho√†n th√†nh`);
                console.log(`üìä [Step 4] - Video Veo3: ${veo3Result.success ? '‚úÖ Th√†nh c√¥ng' : '‚ùå Th·∫•t b·∫°i'}`);
                console.log(`üìä [Step 4] - Operation ID: ${veo3Result.operationName}`);
                
                console.log('üéâ [Test] Ho√†n th√†nh workflow ChatGPT refine + Veo3!');
                
            } else {
                console.log(`‚ùå [Step 3] T·∫°o video Veo3 th·∫•t b·∫°i: ${veo3Result.message}`);
            }
            
        } else {
            throw new Error('ChatGPT kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá');
        }
        
    } catch (error) {
        console.error('‚ùå [Test] L·ªói:', error.message);
    }
}

console.log('üöÄ [START] ChatGPT refine + Veo3 workflow...');
refineWithChatGPTAndCreateVeo3();
