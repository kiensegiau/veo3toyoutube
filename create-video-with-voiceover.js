const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

// Video Configuration
const TARGET_SEGMENT_DURATION = 8; // M·ª•c ti√™u m·ªói segment 8 gi√¢y
const MAX_CHARS_PER_SEGMENT = 200; // S·ªë k√Ω t·ª± t·ªëi ƒëa m·ªói ƒëo·∫°n tho·∫°i (~8 gi√¢y)

// Cache cookie
let cachedCookie = null;
let cookieCacheTime = 0;
const COOKIE_CACHE_DURATION = 30 * 60 * 1000; // 30 ph√∫t

/**
 * ƒê·ªçc cookie t·ª´ file labs-cookies.txt
 */
function readCookieFromFile() {
    try {
        const cookieFilePath = path.join(__dirname, 'labs-cookies.txt');
        if (!fs.existsSync(cookieFilePath)) {
            console.log('‚ùå File labs-cookies.txt kh√¥ng t·ªìn t·∫°i');
            return null;
        }
        const content = fs.readFileSync(cookieFilePath, 'utf8');
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            if (line.trim() && !line.startsWith('#')) {
                console.log(`‚úÖ ƒê·ªçc cookie t·ª´ file labs-cookies.txt`);
                return line.trim();
            }
        }
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y cookies trong file');
        return null;
    } catch (error) {
        console.error('‚ùå L·ªói ƒë·ªçc cookie t·ª´ file:', error.message);
        return null;
    }
}

/**
 * L·∫•y cookie t·ª´ cache ho·∫∑c fetch m·ªõi
 */
async function getCachedOrFreshCookie(serverUrl) {
    const now = Date.now();
    if (cachedCookie && (now - cookieCacheTime) < COOKIE_CACHE_DURATION) {
        console.log(`üç™ S·ª≠ d·ª•ng cached cookie (c√≤n ${Math.floor((COOKIE_CACHE_DURATION - (now - cookieCacheTime)) / 1000 / 60)} ph√∫t)`);
        return cachedCookie;
    }
    console.log(`üîÑ L·∫•y cookie m·ªõi t·ª´ server...`);
    try {
        const response = await fetch(`${serverUrl}/api/labs/get-cookies`, { method: 'GET' });
        const result = await response.json();
        if (result.success && result.cookies) {
            cachedCookie = result.cookies;
            cookieCacheTime = now;
            console.log(`‚úÖ ƒê√£ cache cookie m·ªõi t·ª´ server`);
            return cachedCookie;
        } else {
            throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c cookie t·ª´ server');
        }
    } catch (error) {
        console.error(`‚ùå L·ªói l·∫•y cookie t·ª´ server:`, error.message);
        console.log(`üîÑ Th·ª≠ l·∫•y cookie t·ª´ file labs-cookies.txt...`);
        const cookieFromFile = readCookieFromFile();
        if (cookieFromFile) {
            cachedCookie = cookieFromFile;
            cookieCacheTime = now;
            console.log(`‚úÖ S·ª≠ d·ª•ng cookie t·ª´ file labs-cookies.txt`);
            return cachedCookie;
        } else {
            console.error(`‚ùå Kh√¥ng th·ªÉ l·∫•y cookie t·ª´ c·∫£ server v√† file txt`);
            return null;
        }
    }
}

/**
 * Chia transcript th√†nh c√°c ƒëo·∫°n nh·ªè d·ª±a tr√™n c√¢u v√† ƒë·ªô d√†i
 */
function splitTranscriptIntoSegments(transcriptText) {
    console.log('üìù Chia transcript th√†nh c√°c ƒëo·∫°n...');
    
    // T√°ch th√†nh c√°c c√¢u
    const sentences = transcriptText
        .split(/[.!?]+/)
        .map(s => s.trim())
        .filter(s => s.length > 0);
    
    const segments = [];
    let currentSegment = '';
    
    for (const sentence of sentences) {
        // N·∫øu th√™m c√¢u n√†y v√†o segment hi·ªán t·∫°i v·∫´n < MAX_CHARS_PER_SEGMENT
        if ((currentSegment + ' ' + sentence).length <= MAX_CHARS_PER_SEGMENT) {
            currentSegment += (currentSegment ? ' ' : '') + sentence + '.';
        } else {
            // L∆∞u segment hi·ªán t·∫°i v√† b·∫Øt ƒë·∫ßu segment m·ªõi
            if (currentSegment) {
                segments.push(currentSegment.trim());
            }
            currentSegment = sentence + '.';
        }
    }
    
    // Th√™m segment cu·ªëi c√πng
    if (currentSegment) {
        segments.push(currentSegment.trim());
    }
    
    console.log(`‚úÖ ƒê√£ chia th√†nh ${segments.length} ƒëo·∫°n tho·∫°i`);
    return segments;
}

/**
 * T·∫°o TTS cho m·ªôt ƒëo·∫°n text
 */
async function createTTSForSegment(serverUrl, text, segmentIndex) {
    try {
        console.log(`üéôÔ∏è [TTS ${segmentIndex + 1}] T·∫°o voice-over...`);
        
        const ttsResponse = await fetch(`${serverUrl}/api/tts`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                text: text,
                voice: 'hn-quynhanh', // Gi·ªçng n·ªØ mi·ªÅn B·∫Øc
                speed: 1.0,
                timeout: 120000 // 2 ph√∫t timeout
            })
        });
        
        const ttsResult = await ttsResponse.json();
        
        if (ttsResult.success && ttsResult.audioPath) {
            console.log(`‚úÖ [TTS ${segmentIndex + 1}] Voice-over ƒë√£ t·∫°o: ${ttsResult.audioPath}`);
            return {
                success: true,
                audioPath: ttsResult.audioPath,
                publicPath: ttsResult.publicPath,
                duration: ttsResult.duration || TARGET_SEGMENT_DURATION
            };
        } else {
            throw new Error(ttsResult.message || 'TTS failed');
        }
    } catch (error) {
        console.error(`‚ùå [TTS ${segmentIndex + 1}] L·ªói:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * T·∫°o video v·ªõi voice-over t·ª´ transcript
 */
async function createVideoWithVoiceover() {
    try {
        const serverUrl = 'http://localhost:8888';
        const youtubeUrl = 'https://youtu.be/52ru0qDc0LQ?si=zahSVRyDiQy7Jd6H';
        
        const videoIdMatch = youtubeUrl.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/);
        const videoId = videoIdMatch ? videoIdMatch[1] : null;
        
        if (!videoId) {
            throw new Error('Kh√¥ng th·ªÉ extract video ID t·ª´ URL');
        }
        
        const outputDir = `./temp/youtube-voiceover-video`;
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        // Step 1: L·∫•y transcript t·ª´ YouTube
        console.log('üìù [Step 1] L·∫•y transcript t·ª´ YouTube...');
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                url: youtubeUrl,
                lang: 'vi'
            })
        });
        
        const transcriptResult = await transcriptResponse.json();
        console.log('üìù [Step 1] Transcript result:', transcriptResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!transcriptResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y transcript: ${transcriptResult.message}`);
        }
        
        const transcriptText = typeof transcriptResult.transcript === 'string' ? 
            transcriptResult.transcript : 
            JSON.stringify(transcriptResult.transcript);
        
        console.log(`üìù [Step 1] Transcript: ${transcriptText.substring(0, 300)}...`);
        
        // Step 2: Chia transcript th√†nh c√°c ƒëo·∫°n
        console.log('‚úÇÔ∏è [Step 2] Chia transcript th√†nh c√°c ƒëo·∫°n...');
        const textSegments = splitTranscriptIntoSegments(transcriptText);
        console.log(`‚úÖ [Step 2] ƒê√£ chia th√†nh ${textSegments.length} ƒëo·∫°n`);
        
        // Step 3: T·∫°o TTS cho t·ª´ng ƒëo·∫°n
        console.log('üéôÔ∏è [Step 3] T·∫°o voice-over cho t·ª´ng ƒëo·∫°n...');
        const ttsPromises = textSegments.map((text, index) => 
            createTTSForSegment(serverUrl, text, index)
        );
        const ttsResults = await Promise.all(ttsPromises);
        const successfulTTS = ttsResults.filter(r => r.success);
        
        console.log(`‚úÖ [Step 3] ƒê√£ t·∫°o ${successfulTTS.length}/${textSegments.length} voice-over`);
        
        // Step 4: L·∫•y cookie
        console.log('üç™ [Step 4] L·∫•y cookie...');
        await getCachedOrFreshCookie(serverUrl);
        
        // Step 5: T·∫°o video cho t·ª´ng ƒëo·∫°n v·ªõi ChatGPT
        console.log('ü§ñ [Step 5] ChatGPT t·∫°o prompt v√† t·∫°o video...');
        
        const videoPromises = successfulTTS.map(async (ttsData, index) => {
            const text = textSegments[index];
            const audioDuration = ttsData.duration;
            
            console.log(`\nü§ñ [Segment ${index + 1}/${successfulTTS.length}] T·∫°o prompt cho: "${text.substring(0, 50)}..."`);
            console.log(`üéôÔ∏è [Segment ${index + 1}] Voice-over: ${audioDuration}s`);
            
            // G·ªçi ChatGPT ƒë·ªÉ t·∫°o prompt
            const chatGPTResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: 'gpt-4o-mini',
                    messages: [
                        { 
                            role: "system", 
                            content: `B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3.
Nhi·ªám v·ª•: T·∫°o prompt video ${audioDuration} gi√¢y ph√π h·ª£p v·ªõi n·ªôi dung voice-over.

Y√äU C·∫¶U:
1. Visual ph·∫£i KH·ªöP v·ªõi n·ªôi dung voice-over
2. KH√îNG c√≥ text/ch·ªØ/subtitle trong video
3. Phong c√°ch: Documentary, cinematic
4. M√†u s·∫Øc: Xanh d∆∞∆°ng v√† x√°m, t·∫°o c·∫£m gi√°c b√≠ ·∫©n

Tr·∫£ v·ªÅ JSON:
{
    "prompt": "M√¥ t·∫£ visual chi ti·∫øt cho video ${audioDuration}s",
    "focus": "Tr·ªçng t√¢m c·ªßa ƒëo·∫°n n√†y"
}`
                        },
                        {
                            role: "user",
                            content: `T·∫°o prompt video ${audioDuration}s cho voice-over n√†y:

"${text}"

Prompt ph·∫£i visual h√≥a ƒê√öNG n·ªôi dung voice-over, KH√îNG s√°ng t·∫°o th√™m.`
                        }
                    ],
                    max_tokens: 500,
                    temperature: 0.3
                })
            });

