const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// ChatGPT API configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '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';

/**
 * L√†m s·∫°ch JSON string ƒë·ªÉ parse ƒë∆∞·ª£c
 */
function cleanJsonString(jsonString) {
    return jsonString
        .replace(/\/\/.*$/gm, '') // Lo·∫°i b·ªè comment //
        .replace(/\/\*[\s\S]*?\*\//g, '') // Lo·∫°i b·ªè comment /* */
        .replace(/,(\s*[}\]])/g, '$1') // Lo·∫°i b·ªè trailing comma
        .replace(/\s+/g, ' ') // Chu·∫©n h√≥a whitespace
        .trim();
}

/**
 * Parse JSON t·ª´ ChatGPT response v·ªõi x·ª≠ l√Ω l·ªói t·ªët
 */
function parseChatGPTResponse(responseText) {
    try {
        console.log(`üîç ƒêang ph√¢n t√≠ch response t·ª´ ChatGPT...`);
        
        // T√¨m JSON trong response
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
            throw new Error('Kh√¥ng t√¨m th·∫•y JSON trong response');
        }
        
        // L√†m s·∫°ch v√† parse JSON
        const cleanedJson = cleanJsonString(jsonMatch[0]);
        console.log(`üîç JSON ƒë√£ l√†m s·∫°ch: ${cleanedJson.substring(0, 200)}...`);
        
        const parsed = JSON.parse(cleanedJson);
        
        // Validate structure - kh√¥ng c·∫ßn segments array cho format m·ªõi
        if (!parsed.focus || !parsed.prompt) {
            throw new Error('JSON kh√¥ng c√≥ focus ho·∫∑c prompt h·ª£p l·ªá');
        }
        
        console.log(`‚úÖ Parse th√†nh c√¥ng! Focus: ${parsed.focus}`);
        return parsed;
        
    } catch (error) {
        console.error(`‚ùå L·ªói parse JSON: ${error.message}`);
        throw error;
    }
}

/**
 * T·∫°o video MH370 d√†i h∆°n 23 ph√∫t chia th√†nh t·ª´ng c·∫£nh 8s
 */
async function createMH370LongVideo() {
    try {
        console.log('üöÄ [MH370] T·∫°o video d√†i MH370 (h∆°n 23 ph√∫t)...');
        
        const serverUrl = 'http://localhost:8888';
        const youtubeUrl = 'https://youtu.be/52ru0qDc0LQ?si=zahSVRyDiQy7Jd6H';
        const outputDir = './temp/mh370-long-video';
        
        // T·∫°o th∆∞ m·ª•c output
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        // Step 1: L·∫•y transcript t·ª´ YouTube
        console.log('üìù [Step 1] L·∫•y transcript t·ª´ YouTube MH370...');
        const transcriptResponse = await fetch(`${serverUrl}/api/get-transcript`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                url: youtubeUrl,
                lang: 'vi'
            })
        });
        
        const transcriptResult = await transcriptResponse.json();
        console.log('üìù [Step 1] Transcript result:', transcriptResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (!transcriptResult.success) {
            throw new Error(`Kh√¥ng th·ªÉ l·∫•y transcript: ${transcriptResult.message}`);
        }
        
        const transcriptText = typeof transcriptResult.transcript === 'string' ? 
            transcriptResult.transcript : 
            JSON.stringify(transcriptResult.transcript);
        
        console.log(`üìù [Step 1] Transcript: ${transcriptText.substring(0, 300)}...`);
        
        // Step 2: Chia transcript th√†nh c√°c ƒëo·∫°n 8s
        console.log('üìù [Step 2] Chia transcript th√†nh c√°c ƒëo·∫°n 8s...');
        
        // T√≠nh to√°n s·ªë segments c·∫ßn thi·∫øt (23 ph√∫t = 1380 gi√¢y √∑ 8s = 172.5 ‚âà 173 segments)
        const totalDurationSeconds = 23 * 60; // 23 ph√∫t = 1380 gi√¢y
        const segmentDurationSeconds = 8;
        const totalSegments = Math.ceil(totalDurationSeconds / segmentDurationSeconds);
        
        console.log(`üìù [Step 2] T·ªïng th·ªùi gian: ${totalDurationSeconds}s (23 ph√∫t)`);
        console.log(`üìù [Step 2] M·ªói segment: ${segmentDurationSeconds}s`);
        console.log(`üìù [Step 2] T·ªïng segments c·∫ßn t·∫°o: ${totalSegments}`);
        
        // Chia transcript th√†nh c√°c ƒëo·∫°n
        const transcriptWords = transcriptText.split(' ');
        const wordsPerSegment = Math.ceil(transcriptWords.length / totalSegments);
        
        const segments = [];
        for (let i = 0; i < totalSegments; i++) {
            const startTime = i * segmentDurationSeconds;
            const endTime = Math.min((i + 1) * segmentDurationSeconds, totalDurationSeconds);
            const startWordIndex = i * wordsPerSegment;
            const endWordIndex = Math.min((i + 1) * wordsPerSegment, transcriptWords.length);
            const segmentText = transcriptWords.slice(startWordIndex, endWordIndex).join(' ');
            
            segments.push({
                segmentIndex: i,
                timeRange: `${startTime}-${endTime}s`,
                transcriptContent: segmentText,
                startTime: startTime,
                endTime: endTime
            });
        }
        
        console.log(`‚úÖ [Step 2] ƒê√£ chia transcript th√†nh ${segments.length} segments`);
        console.log(`‚úÖ [Step 2] V√≠ d·ª• segment ƒë·∫ßu: ${segments[0].transcriptContent.substring(0, 100)}...`);
        
        // Step 3: Ph√¢n t√≠ch t·ª´ng segment v·ªõi ChatGPT
        console.log('ü§ñ [Step 3] Ph√¢n t√≠ch t·ª´ng segment v·ªõi ChatGPT...');
        
        const analyzedSegments = [];
        const analysisBatchSize = 3; // Gi·∫£m xu·ªëng 3 segments c√πng l√∫c ƒë·ªÉ tr√°nh rate limit
        
        for (let i = 0; i < segments.length; i += analysisBatchSize) {
            const batch = segments.slice(i, i + analysisBatchSize);
            console.log(`ü§ñ [Step 3] X·ª≠ l√Ω batch ${Math.floor(i/analysisBatchSize) + 1}: segments ${i + 1}-${Math.min(i + analysisBatchSize, segments.length)}`);
            
            // X·ª≠ l√Ω batch song song
            const batchPromises = batch.map(async (segment, batchIndex) => {
                const segmentIndex = i + batchIndex;
                console.log(`ü§ñ [Step 3] Ph√¢n t√≠ch segment ${segmentIndex + 1}: ${segment.timeRange}`);
                
                try {
                    const chatGPTResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${OPENAI_API_KEY}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            model: 'gpt-4o',
                            messages: [
                                { 
                                    role: "system", 
                                    content: `B·∫°n l√† chuy√™n gia t·∫°o prompt video cho Veo3 v·ªÅ MH370.

QUAN TR·ªåNG: KH√îNG BAO GI·ªú th√™m b·∫•t c·ª© ch·ªØ, text, subtitle, ho·∫∑c vƒÉn b·∫£n n√†o v√†o video. Ch·ªâ t·∫°o video thu·∫ßn t√∫y v·ªõi h√¨nh ·∫£nh.

Nhi·ªám v·ª•: Ph√¢n t√≠ch m·ªôt ƒëo·∫°n transcript v·ªÅ MH370 v√† t·∫°o prompt cho Veo3:

Y√äU C·∫¶U:
1. H√åNH ·∫¢NH C·ª§ TH·ªÇ V·ªÄ MH370:
   - PH·∫¢I li√™n quan tr·ª±c ti·∫øp ƒë·∫øn MH370
   - Boeing 777-200ER (lo·∫°i m√°y bay MH370)
   - S√¢n bay Kuala Lumpur (n∆°i MH370 c·∫•t c√°nh)
   - ·∫§n ƒê·ªô D∆∞∆°ng (n∆°i t√¨m ki·∫øm MH370)
   - D·ªØ li·ªáu radar, v·ªá tinh v·ªÅ MH370

2. T√çNH NH·∫§T QU√ÅN:
   - M√†u s·∫Øc: Xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng, x√°m
   - Phong c√°ch: T√†i li·ªáu ƒëi·ªÅu tra chuy√™n nghi·ªáp v·ªÅ MH370
   - Camera work: angles, movements, transitions
   - Lighting: mood, atmosphere, color temperature

3. TUY·ªÜT ƒê·ªêI KH√îNG C√ì CH·ªÆ, TEXT, SUBTITLE, VƒÇN B·∫¢N N√ÄO

Tr·∫£ v·ªÅ JSON format:
{
    "focus": "N·ªôi dung ch√≠nh c·ªßa segment",
    "visualElements": "C√°c y·∫øu t·ªë h√¨nh ·∫£nh c·ª• th·ªÉ",
    "cameraWork": "G√≥c quay, chuy·ªÉn ƒë·ªông camera",
    "lighting": "√Ånh s√°ng, t√¥ng m√†u",
    "prompt": "Prompt chi ti·∫øt cho Veo3 - KH√îNG C√ì CH·ªÆ"
}` 
                                },
                                { 
                                    role: "user", 
                                    content: `Ph√¢n t√≠ch ƒëo·∫°n transcript n√†y v·ªÅ MH370 v√† t·∫°o prompt cho Veo3:

TRANSCRIPT SEGMENT:
${segment.transcriptContent}

TH√îNG TIN SEGMENT:
- Time Range: ${segment.timeRange}
- Segment Index: ${segmentIndex + 1}/${segments.length}

Y√™u c·∫ßu: T·∫°o prompt video 8s v·ªÅ MH370 d·ª±a tr√™n ƒëo·∫°n transcript n√†y. Video ph·∫£i li√™n quan ƒë·∫øn MH370, kh√¥ng c√≥ ch·ªØ, m√†u xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng, x√°m.` 
                                }
                            ],
                            max_tokens: 1000,
                            temperature: 0.7
                        })
                    });
                    
                    const chatGPTResult = await chatGPTResponse.json();
                    
                    if (chatGPTResult.choices && !chatGPTResult.error) {
                        const analysisText = chatGPTResult.choices[0].message.content;
                        const analysis = parseChatGPTResponse(analysisText);
                        
                        return {
                            ...segment,
                            focus: analysis.focus,
                            visualElements: analysis.visualElements,
                            cameraWork: analysis.cameraWork,
                            lighting: analysis.lighting,
                            prompt: analysis.prompt,
                            success: true
                        };
                    } else {
                        throw new Error('ChatGPT API Error');
                    }
                    
                } catch (error) {
                    console.log(`‚ùå [Step 3] Segment ${segmentIndex + 1} l·ªói: ${error.message}`);
                    return {
                        ...segment,
                        error: error.message,
                        success: false
                    };
                }
            });
            
            // Ch·ªù batch ho√†n th√†nh
            const batchResults = await Promise.all(batchPromises);
            analyzedSegments.push(...batchResults);
            
            // Ch·ªù gi·ªØa c√°c batches ƒë·ªÉ tr√°nh spam
            if (i + analysisBatchSize < segments.length) {
                console.log(`‚è≥ [Step 3] Ch·ªù 5 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω batch ti·∫øp theo...`);
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }
        
        const successfulSegments = analyzedSegments.filter(s => s.success);
        console.log(`‚úÖ [Step 3] ƒê√£ ph√¢n t√≠ch ${successfulSegments.length}/${segments.length} segments`);
        
        if (successfulSegments.length === 0) {
            throw new Error('Kh√¥ng c√≥ segment n√†o ƒë∆∞·ª£c ph√¢n t√≠ch th√†nh c√¥ng');
        }
        
        // T·∫°o analysis object ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
        const analysis = {
            overallTheme: "Cu·ªôc ƒëi·ªÅu tra v√† t√¨m ki·∫øm chuy·∫øn bay MH370",
            colorScheme: "Xanh d∆∞∆°ng ƒë·∫≠m, ƒëen, tr·∫Øng, x√°m",
            visualStyle: "Phong c√°ch t√†i li·ªáu ƒëi·ªÅu tra chuy√™n nghi·ªáp",
            storyline: "Cu·ªôc h√†nh tr√¨nh t·ª´ s·ª± bi·∫øn m·∫•t b√≠ ·∫©n c·ªßa MH370 ƒë·∫øn nh·ªØng n·ªó l·ª±c t√¨m ki·∫øm kh√¥ng ng·ª´ng ngh·ªâ",
            totalSegments: successfulSegments.length,
            segments: successfulSegments
        };
        
        console.log(`‚úÖ [Step 3] ƒê√£ ph√¢n t√≠ch th√†nh c√¥ng ${analysis.segments.length} segments`);
        console.log(`‚úÖ [Step 3] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
        console.log(`‚úÖ [Step 3] M√†u s·∫Øc: ${analysis.colorScheme}`);
        console.log(`‚úÖ [Step 3] Phong c√°ch: ${analysis.visualStyle}`);
        
        // Hi·ªÉn th·ªã m·ªôt s·ªë segments ƒë·∫ßu
        if (analysis.segments && analysis.segments.length > 0) {
            console.log(`‚úÖ [Step 3] V√≠ d·ª• segments ƒë√£ ph√¢n t√≠ch:`);
            analysis.segments.forEach((segment, index) => {
                if (index < 3) { // Ch·ªâ hi·ªÉn th·ªã 3 segments ƒë·∫ßu
                    console.log(`‚úÖ [Step 3] Segment ${index + 1}: ${segment.focus}`);
                    console.log(`‚úÖ [Step 3] - Transcript: ${segment.transcriptContent ? segment.transcriptContent.substring(0, 100) + '...' : 'N/A'}`);
                    console.log(`‚úÖ [Step 3] - Visual: ${segment.visualElements || 'N/A'}`);
                    console.log(`‚úÖ [Step 3] - Camera: ${segment.cameraWork || 'N/A'}`);
                }
            });
            if (analysis.segments.length > 3) {
                console.log(`‚úÖ [Step 3] ... v√† ${analysis.segments.length - 3} segments kh√°c`);
            }
        }
        
        // Step 4: T·∫°o video Veo3 cho t·ª´ng segment
        console.log(`üé¨ [Step 4] T·∫°o video Veo3 cho ${analysis.segments.length} segments...`);
        
        const veo3Results = [];
        const batchSize = 5; // X·ª≠ l√Ω 5 segments c√πng l√∫c
        
        for (let i = 0; i < analysis.segments.length; i += batchSize) {
            const batch = analysis.segments.slice(i, i + batchSize);
            console.log(`üé¨ [Step 4] X·ª≠ l√Ω batch ${Math.floor(i/batchSize) + 1}: segments ${i + 1}-${Math.min(i + batchSize, analysis.segments.length)}`);
            
            // X·ª≠ l√Ω batch song song
            const batchPromises = batch.map(async (segment, batchIndex) => {
                const segmentIndex = i + batchIndex;
                console.log(`üé¨ [Step 4] T·∫°o video segment ${segmentIndex + 1}: ${segment.timeRange}`);
                console.log(`üé¨ [Step 4] Focus: ${segment.focus}`);
                console.log(`üé¨ [Step 4] Transcript: ${segment.transcriptContent ? segment.transcriptContent.substring(0, 100) + '...' : 'N/A'}`);
                console.log(`üé¨ [Step 4] Visual: ${segment.visualElements || 'N/A'}`);
                console.log(`üé¨ [Step 4] Camera: ${segment.cameraWork || 'N/A'}`);
                console.log(`üé¨ [Step 4] Prompt: ${segment.prompt.substring(0, 150)}...`);
                
                try {
                    // T·∫°o prompt chi ti·∫øt h∆°n v·ªõi th√¥ng tin t·ª´ segment
                    const enhancedPrompt = `MH370 INVESTIGATION DOCUMENTARY - ${segment.prompt}

MH370 SPECIFIC REQUIREMENTS:
- MUST be about Malaysia Airlines flight MH370 disappearance
- MUST show Boeing 777-200ER aircraft (MH370's aircraft type)
- MUST relate to the 2014 disappearance and ongoing investigation
- MUST include MH370-specific elements: Kuala Lumpur airport, Indian Ocean search, satellite data, Ocean Infinity search

SEGMENT DETAILS:
- Time Range: ${segment.timeRange}
- Focus: ${segment.focus}
- Visual Elements: ${segment.visualElements || 'MH370 investigation visuals'}
- Camera Work: ${segment.cameraWork || 'Professional documentary camera work'}
- Lighting: ${segment.lighting || 'Professional documentary lighting'}

CRITICAL: NO TEXT, NO SUBTITLES, NO WORDS - PURE VISUAL STORYTELLING ONLY - MUST BE ABOUT MH370`;

                    const veo3Response = await fetch(`${serverUrl}/api/create-video`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            input: enhancedPrompt,
                            prompt: enhancedPrompt
                        })
                    });
                    
                    const veo3Result = await veo3Response.json();
                    
                    if (veo3Result.success) {
                        console.log(`‚úÖ [Step 4] Segment ${segmentIndex + 1} Veo3: ${veo3Result.operationName}`);
                        return {
                            segmentIndex: segmentIndex,
                            timeRange: segment.timeRange,
                            focus: segment.focus,
                            transcriptContent: segment.transcriptContent,
                            visualElements: segment.visualElements,
                            cameraWork: segment.cameraWork,
                            lighting: segment.lighting,
                            prompt: enhancedPrompt,
                            operationId: veo3Result.operationName,
                            success: true
                        };
                    } else {
                        console.log(`‚ùå [Step 4] Segment ${segmentIndex + 1} th·∫•t b·∫°i: ${veo3Result.message}`);
                        return {
                            segmentIndex: segmentIndex,
                            timeRange: segment.timeRange,
                            focus: segment.focus,
                            error: veo3Result.message,
                            success: false
                        };
                    }
                    
                } catch (error) {
                    console.log(`‚ùå [Step 4] Segment ${segmentIndex + 1} l·ªói: ${error.message}`);
                    return {
                        segmentIndex: segmentIndex,
                        timeRange: segment.timeRange,
                        focus: segment.focus,
                        error: error.message,
                        success: false
                    };
                }
            });
            
            // Ch·ªù batch ho√†n th√†nh
            const batchResults = await Promise.all(batchPromises);
            veo3Results.push(...batchResults);
            
            // Ch·ªù gi·ªØa c√°c batches ƒë·ªÉ tr√°nh spam
            if (i + batchSize < analysis.segments.length) {
                console.log(`‚è≥ [Step 4] Ch·ªù 10 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω batch ti·∫øp theo...`);
                await new Promise(resolve => setTimeout(resolve, 10000));
            }
        }
        
        const successfulOperations = veo3Results.filter(r => r.success);
        console.log(`‚úÖ [Step 4] ƒê√£ g·ª≠i ${successfulOperations.length}/${analysis.segments.length} Veo3 requests`);
        
        if (successfulOperations.length > 0) {
            console.log(`üöÄ [Step 4] T·∫•t c·∫£ Veo3 ƒëang ch·∫°y ng·∫ßm...`);
            console.log(`üöÄ [Step 4] C√°c operation IDs (${successfulOperations.length}):`);
            successfulOperations.forEach(op => {
                console.log(`üöÄ [Step 4] - Segment ${op.segmentIndex + 1}: ${op.operationId}`);
            });
            
            console.log(`‚è≥ [Step 4] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
            console.log(`‚è≥ [Step 4] Ki·ªÉm tra th∆∞ m·ª•c public/audio/ ƒë·ªÉ xem video m·ªõi`);
            
            // L∆∞u k·∫øt qu·∫£ ho√†n ch·ªânh
            const finalResult = {
                timestamp: new Date().toISOString(),
                youtubeUrl: youtubeUrl,
                transcript: transcriptText,
                overallTheme: analysis.overallTheme,
                colorScheme: analysis.colorScheme,
                visualStyle: analysis.visualStyle,
                storyline: analysis.storyline,
                totalSegments: analysis.segments.length,
                segmentsCreated: analysis.segments.length,
                veo3OperationsSent: successfulOperations.length,
                segments: analysis.segments,
                veo3Results: veo3Results,
                outputDir: outputDir,
                note: "VIDEO D√ÄI H∆†N 23 PH√öT - CHIA TH√ÄNH T·ª™NG C·∫¢NH 8S - KH√îNG C√ì CH·ªÆ"
            };
            
            const resultPath = path.join(outputDir, 'mh370-long-video-result.json');
            fs.writeFileSync(resultPath, JSON.stringify(finalResult, null, 2));
            
            console.log(`üìä [Step 3] ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${resultPath}`);
            
            console.log('üéâ [MH370] Ho√†n th√†nh t·∫°o video d√†i!');
            console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${analysis.overallTheme}`);
            console.log(`üéâ [MH370] M√†u s·∫Øc: ${analysis.colorScheme}`);
            console.log(`üéâ [MH370] T·ªïng segments: ${analysis.segments.length}`);
            console.log(`üéâ [MH370] ƒê√£ g·ª≠i ${successfulOperations.length} Veo3 requests`);
            console.log(`‚è≥ [MH370] Video s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ trong v√†i ph√∫t...`);
            console.log(`üìù [MH370] L∆ØU √ù: Video d√†i h∆°n 23 ph√∫t, chia th√†nh t·ª´ng c·∫£nh 8s, KH√îNG C√ì CH·ªÆ`);
            
            return {
                success: true,
                result: finalResult
            };
            
        } else {
            throw new Error('Kh√¥ng c√≥ video Veo3 n√†o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng');
        }
        
    } catch (error) {
        console.error(`‚ùå [MH370] L·ªói:`, error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

console.log('üöÄ [START] T·∫°o video d√†i MH370 (h∆°n 23 ph√∫t)...');
createMH370LongVideo().then(result => {
    if (result.success) {
        console.log('üéâ [MH370] Ho√†n th√†nh th√†nh c√¥ng!');
        console.log(`üéâ [MH370] Ch·ªß ƒë·ªÅ: ${result.result.overallTheme}`);
        console.log(`üéâ [MH370] T·ªïng segments: ${result.result.totalSegments}`);
        console.log(`üéâ [MH370] ƒê√£ g·ª≠i ${result.result.veo3OperationsSent} Veo3 requests`);
        console.log(`üìù [MH370] L∆ØU √ù: Video d√†i h∆°n 23 ph√∫t, chia th√†nh t·ª´ng c·∫£nh 8s, KH√îNG C√ì CH·ªÆ`);
    } else {
        console.log(`‚ùå [MH370] Th·∫•t b·∫°i: ${result.error}`);
    }
});



